
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000542  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000542  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000862  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000395  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2f  00000000  00000000  000012d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006324  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007af  00000000  00000000  0000848c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00008c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000023f7  00000000  00000000  00008ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	7b d1       	rcall	.+758    	; 0x36e <main>
  78:	62 c2       	rjmp	.+1220   	; 0x53e <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <Keypad_init>:

int Keypad_R[] = {R0, R1, R2, R3};
int Keypad_C[] = {C0, C1, C2, C3};

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	80 7f       	andi	r24, 0xF0	; 240
  80:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 6f       	ori	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	08 95       	ret

0000008e <Keypad_getkey>:
}

char Keypad_getkey(){
  8e:	af 92       	push	r10
  90:	bf 92       	push	r11
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 e6       	ldi	r16, 0x60	; 96
  a4:	10 e0       	ldi	r17, 0x00	; 0
	int i,j;
	for (i = 0; i < 4; i++){
  a6:	c0 e0       	ldi	r28, 0x00	; 0
  a8:	d0 e0       	ldi	r29, 0x00	; 0
		KEYPAD_PORT |= ((1<<Keypad_C[0]) | (1<<Keypad_C[1]) | (1<<Keypad_C[2]) | (1<<Keypad_C[3]));
  aa:	d8 01       	movw	r26, r16
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	0f 2e       	mov	r0, r31
  b2:	f8 e6       	ldi	r31, 0x68	; 104
  b4:	cf 2e       	mov	r12, r31
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	df 2e       	mov	r13, r31
  ba:	f0 2d       	mov	r31, r0
		KEYPAD_PORT &= ~(1<<Keypad_C[i]);
  bc:	a1 2c       	mov	r10, r1
  be:	b1 2c       	mov	r11, r1
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Keypad_C[0]) | (1<<Keypad_C[1]) | (1<<Keypad_C[2]) | (1<<Keypad_C[3]));
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	ba 01       	movw	r22, r20
  c4:	0c 90       	ld	r0, X
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Keypad_getkey+0x3e>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Keypad_getkey+0x3a>
  d0:	9a 01       	movw	r18, r20
  d2:	12 96       	adiw	r26, 0x02	; 2
  d4:	0c 90       	ld	r0, X
  d6:	12 97       	sbiw	r26, 0x02	; 2
  d8:	02 c0       	rjmp	.+4      	; 0xde <Keypad_getkey+0x50>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <Keypad_getkey+0x4c>
  e2:	26 2b       	or	r18, r22
  e4:	82 2f       	mov	r24, r18
  e6:	89 2b       	or	r24, r25
  e8:	9a 01       	movw	r18, r20
  ea:	14 96       	adiw	r26, 0x04	; 4
  ec:	0c 90       	ld	r0, X
  ee:	14 97       	sbiw	r26, 0x04	; 4
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <Keypad_getkey+0x68>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <Keypad_getkey+0x64>
  fa:	28 2b       	or	r18, r24
  fc:	ca 01       	movw	r24, r20
  fe:	16 96       	adiw	r26, 0x06	; 6
 100:	0c 90       	ld	r0, X
 102:	16 97       	sbiw	r26, 0x06	; 6
 104:	02 c0       	rjmp	.+4      	; 0x10a <Keypad_getkey+0x7c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <Keypad_getkey+0x78>
 10e:	82 2b       	or	r24, r18
 110:	82 bb       	out	0x12, r24	; 18
		KEYPAD_PORT &= ~(1<<Keypad_C[i]);
 112:	92 b3       	in	r25, 0x12	; 18
 114:	f8 01       	movw	r30, r16
 116:	80 81       	ld	r24, Z
 118:	0e 5f       	subi	r16, 0xFE	; 254
 11a:	1f 4f       	sbci	r17, 0xFF	; 255
 11c:	9a 01       	movw	r18, r20
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Keypad_getkey+0x96>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <Keypad_getkey+0x92>
 128:	82 2f       	mov	r24, r18
 12a:	80 95       	com	r24
 12c:	89 23       	and	r24, r25
 12e:	82 bb       	out	0x12, r24	; 18
 130:	f6 01       	movw	r30, r12
 132:	7a 01       	movw	r14, r20
 134:	6a 2d       	mov	r22, r10
 136:	7b 2d       	mov	r23, r11
 138:	05 c0       	rjmp	.+10     	; 0x144 <Keypad_getkey+0xb6>
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	e8 1a       	sub	r14, r24
 142:	f8 0a       	sbc	r15, r24
		for(j = 0; j < 4; j++){
			if (!(keypadPIN & (1 << Keypad_R[j])))
 144:	80 b3       	in	r24, 0x10	; 16
 146:	20 81       	ld	r18, Z
 148:	32 96       	adiw	r30, 0x02	; 2
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Keypad_getkey+0xc6>
 150:	95 95       	asr	r25
 152:	87 95       	ror	r24
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <Keypad_getkey+0xc2>
 158:	80 fd       	sbrc	r24, 0
 15a:	4f c0       	rjmp	.+158    	; 0x1fa <Keypad_getkey+0x16c>
 15c:	ca 01       	movw	r24, r20
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Keypad_getkey+0xd6>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <Keypad_getkey+0xd2>
 168:	9c 01       	movw	r18, r24
			{
				while(!(keypadPIN & (1 << Keypad_R[j])));
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	82 23       	and	r24, r18
 170:	93 23       	and	r25, r19
 172:	89 2b       	or	r24, r25
 174:	d1 f3       	breq	.-12     	; 0x16a <Keypad_getkey+0xdc>
				switch(i){
 176:	c1 30       	cpi	r28, 0x01	; 1
 178:	d1 05       	cpc	r29, r1
 17a:	c1 f0       	breq	.+48     	; 0x1ac <Keypad_getkey+0x11e>
 17c:	1c f4       	brge	.+6      	; 0x184 <Keypad_getkey+0xf6>
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	41 f0       	breq	.+16     	; 0x192 <Keypad_getkey+0x104>
 182:	3b c0       	rjmp	.+118    	; 0x1fa <Keypad_getkey+0x16c>
 184:	c2 30       	cpi	r28, 0x02	; 2
 186:	d1 05       	cpc	r29, r1
 188:	f1 f0       	breq	.+60     	; 0x1c6 <Keypad_getkey+0x138>
 18a:	c3 30       	cpi	r28, 0x03	; 3
 18c:	d1 05       	cpc	r29, r1
 18e:	41 f1       	breq	.+80     	; 0x1e0 <Keypad_getkey+0x152>
 190:	34 c0       	rjmp	.+104    	; 0x1fa <Keypad_getkey+0x16c>
					case (0):
						if (j == 0) return '7';
 192:	61 15       	cp	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	e9 f1       	breq	.+122    	; 0x212 <Keypad_getkey+0x184>
						else if (j == 1) return '4';
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	71 05       	cpc	r23, r1
 19c:	e1 f1       	breq	.+120    	; 0x216 <Keypad_getkey+0x188>
						else if (j == 2) return '1';
 19e:	62 30       	cpi	r22, 0x02	; 2
 1a0:	71 05       	cpc	r23, r1
 1a2:	d9 f1       	breq	.+118    	; 0x21a <Keypad_getkey+0x18c>
						else if (j == 3) return '!';
 1a4:	63 30       	cpi	r22, 0x03	; 3
 1a6:	71 05       	cpc	r23, r1
 1a8:	41 f5       	brne	.+80     	; 0x1fa <Keypad_getkey+0x16c>
 1aa:	39 c0       	rjmp	.+114    	; 0x21e <Keypad_getkey+0x190>
						break;
					
					case (1):
						if (j == 0) return '8';
 1ac:	61 15       	cp	r22, r1
 1ae:	71 05       	cpc	r23, r1
 1b0:	c1 f1       	breq	.+112    	; 0x222 <Keypad_getkey+0x194>
						else if (j == 1) return '5';
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	71 05       	cpc	r23, r1
 1b6:	b9 f1       	breq	.+110    	; 0x226 <Keypad_getkey+0x198>
						else if (j == 2) return '2';
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	71 05       	cpc	r23, r1
 1bc:	b1 f1       	breq	.+108    	; 0x22a <Keypad_getkey+0x19c>
						else if (j == 3) return '0';
 1be:	63 30       	cpi	r22, 0x03	; 3
 1c0:	71 05       	cpc	r23, r1
 1c2:	d9 f4       	brne	.+54     	; 0x1fa <Keypad_getkey+0x16c>
 1c4:	34 c0       	rjmp	.+104    	; 0x22e <Keypad_getkey+0x1a0>
						break;
					
					case (2):
						if (j == 0) return '9';
 1c6:	61 15       	cp	r22, r1
 1c8:	71 05       	cpc	r23, r1
 1ca:	99 f1       	breq	.+102    	; 0x232 <Keypad_getkey+0x1a4>
						else if (j == 1) return '6';
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	71 05       	cpc	r23, r1
 1d0:	91 f1       	breq	.+100    	; 0x236 <Keypad_getkey+0x1a8>
						else if (j == 2) return '3';
 1d2:	62 30       	cpi	r22, 0x02	; 2
 1d4:	71 05       	cpc	r23, r1
 1d6:	89 f1       	breq	.+98     	; 0x23a <Keypad_getkey+0x1ac>
						else if (j == 3) return '=';
 1d8:	63 30       	cpi	r22, 0x03	; 3
 1da:	71 05       	cpc	r23, r1
 1dc:	71 f4       	brne	.+28     	; 0x1fa <Keypad_getkey+0x16c>
 1de:	2f c0       	rjmp	.+94     	; 0x23e <Keypad_getkey+0x1b0>
						break;
					
					case (3):
						if (j == 0) return '/';
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	71 f1       	breq	.+92     	; 0x242 <Keypad_getkey+0x1b4>
						else if (j == 1) return '*';
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	71 05       	cpc	r23, r1
 1ea:	69 f1       	breq	.+90     	; 0x246 <Keypad_getkey+0x1b8>
						else if (j == 2) return '-';
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	71 05       	cpc	r23, r1
 1f0:	61 f1       	breq	.+88     	; 0x24a <Keypad_getkey+0x1bc>
						else if (j == 3) return '+';
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	71 05       	cpc	r23, r1
 1f6:	69 f5       	brne	.+90     	; 0x252 <Keypad_getkey+0x1c4>
 1f8:	2a c0       	rjmp	.+84     	; 0x24e <Keypad_getkey+0x1c0>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Keypad_C[0]) | (1<<Keypad_C[1]) | (1<<Keypad_C[2]) | (1<<Keypad_C[3]));
		KEYPAD_PORT &= ~(1<<Keypad_C[i]);
		for(j = 0; j < 4; j++){
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	e9 16       	cp	r14, r25
 1fe:	f1 04       	cpc	r15, r1
 200:	0c f4       	brge	.+2      	; 0x204 <Keypad_getkey+0x176>
 202:	9b cf       	rjmp	.-202    	; 0x13a <Keypad_getkey+0xac>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c4 30       	cpi	r28, 0x04	; 4
 208:	d1 05       	cpc	r29, r1
 20a:	09 f0       	breq	.+2      	; 0x20e <Keypad_getkey+0x180>
 20c:	59 cf       	rjmp	.-334    	; 0xc0 <Keypad_getkey+0x32>
						break;
				}
			}
		}
	}
	return 'N';
 20e:	8e e4       	ldi	r24, 0x4E	; 78
 210:	26 c0       	rjmp	.+76     	; 0x25e <Keypad_getkey+0x1d0>
			if (!(keypadPIN & (1 << Keypad_R[j])))
			{
				while(!(keypadPIN & (1 << Keypad_R[j])));
				switch(i){
					case (0):
						if (j == 0) return '7';
 212:	87 e3       	ldi	r24, 0x37	; 55
 214:	24 c0       	rjmp	.+72     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 1) return '4';
 216:	84 e3       	ldi	r24, 0x34	; 52
 218:	22 c0       	rjmp	.+68     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 2) return '1';
 21a:	81 e3       	ldi	r24, 0x31	; 49
 21c:	20 c0       	rjmp	.+64     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 3) return '!';
 21e:	81 e2       	ldi	r24, 0x21	; 33
 220:	1e c0       	rjmp	.+60     	; 0x25e <Keypad_getkey+0x1d0>
						break;
					
					case (1):
						if (j == 0) return '8';
 222:	88 e3       	ldi	r24, 0x38	; 56
 224:	1c c0       	rjmp	.+56     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 1) return '5';
 226:	85 e3       	ldi	r24, 0x35	; 53
 228:	1a c0       	rjmp	.+52     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 2) return '2';
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	18 c0       	rjmp	.+48     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 3) return '0';
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	16 c0       	rjmp	.+44     	; 0x25e <Keypad_getkey+0x1d0>
						break;
					
					case (2):
						if (j == 0) return '9';
 232:	89 e3       	ldi	r24, 0x39	; 57
 234:	14 c0       	rjmp	.+40     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 1) return '6';
 236:	86 e3       	ldi	r24, 0x36	; 54
 238:	12 c0       	rjmp	.+36     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 2) return '3';
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	10 c0       	rjmp	.+32     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 3) return '=';
 23e:	8d e3       	ldi	r24, 0x3D	; 61
 240:	0e c0       	rjmp	.+28     	; 0x25e <Keypad_getkey+0x1d0>
						break;
					
					case (3):
						if (j == 0) return '/';
 242:	8f e2       	ldi	r24, 0x2F	; 47
 244:	0c c0       	rjmp	.+24     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 1) return '*';
 246:	8a e2       	ldi	r24, 0x2A	; 42
 248:	0a c0       	rjmp	.+20     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 2) return '-';
 24a:	8d e2       	ldi	r24, 0x2D	; 45
 24c:	08 c0       	rjmp	.+16     	; 0x25e <Keypad_getkey+0x1d0>
						else if (j == 3) return '+';
 24e:	8b e2       	ldi	r24, 0x2B	; 43
 250:	06 c0       	rjmp	.+12     	; 0x25e <Keypad_getkey+0x1d0>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Keypad_C[0]) | (1<<Keypad_C[1]) | (1<<Keypad_C[2]) | (1<<Keypad_C[3]));
		KEYPAD_PORT &= ~(1<<Keypad_C[i]);
		for(j = 0; j < 4; j++){
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	e8 16       	cp	r14, r24
 256:	f1 04       	cpc	r15, r1
 258:	0c f4       	brge	.+2      	; 0x25c <Keypad_getkey+0x1ce>
 25a:	6f cf       	rjmp	.-290    	; 0x13a <Keypad_getkey+0xac>
						break;
				}
			}
		}
	}
	return 'N';
 25c:	8e e4       	ldi	r24, 0x4E	; 78
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	ff 90       	pop	r15
 268:	ef 90       	pop	r14
 26a:	df 90       	pop	r13
 26c:	cf 90       	pop	r12
 26e:	bf 90       	pop	r11
 270:	af 90       	pop	r10
 272:	08 95       	ret

00000274 <lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
 274:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	83 ed       	ldi	r24, 0xD3	; 211
 278:	90 e3       	ldi	r25, 0x30	; 48
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_kick+0x6>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_kick+0xc>
 280:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 282:	c3 98       	cbi	0x18, 3	; 24
 284:	08 95       	ret

00000286 <lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
 286:	8a b3       	in	r24, 0x1a	; 26
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
 28c:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
 28e:	c1 98       	cbi	0x18, 1	; 24
	lcd_kick();
 290:	f1 df       	rcall	.-30     	; 0x274 <lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
 292:	8a b3       	in	r24, 0x1a	; 26
 294:	80 6f       	ori	r24, 0xF0	; 240
 296:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);	
 298:	c2 98       	cbi	0x18, 2	; 24
 29a:	08 95       	ret

0000029c <LCD_WRITE_COMMAND>:
}


void LCD_WRITE_COMMAND(unsigned char command){
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
	lcd_isbusy();
 2a0:	f2 df       	rcall	.-28     	; 0x286 <lcd_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_PORT = command;
 2a2:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	89 7f       	andi	r24, 0xF9	; 249
 2a8:	88 bb       	out	0x18, r24	; 24
		lcd_kick();
 2aa:	e4 df       	rcall	.-56     	; 0x274 <lcd_kick>
		lcd_kick();
		LCD_PORT= (LCD_PORT & 0x0f) | (command << 4);
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		lcd_kick();
	#endif
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_clear_screen>:
﻿#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	f4 cf       	rjmp	.-24     	; 0x29c <LCD_WRITE_COMMAND>
 2b4:	08 95       	ret

000002b6 <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	31 f4       	brne	.+12     	; 0x2c6 <LCD_GOTO_XY+0x10>
	{
		if (position < 16 && position >= 0)
 2ba:	60 31       	cpi	r22, 0x10	; 16
 2bc:	58 f4       	brcc	.+22     	; 0x2d4 <LCD_GOTO_XY+0x1e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	86 0f       	add	r24, r22
 2c2:	ec cf       	rjmp	.-40     	; 0x29c <LCD_WRITE_COMMAND>
 2c4:	08 95       	ret
		}
	}
	if (line == 2)
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	29 f4       	brne	.+10     	; 0x2d4 <LCD_GOTO_XY+0x1e>
	{
		if (position < 16 && position >= 0)
 2ca:	60 31       	cpi	r22, 0x10	; 16
 2cc:	18 f4       	brcc	.+6      	; 0x2d4 <LCD_GOTO_XY+0x1e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 2ce:	80 ec       	ldi	r24, 0xC0	; 192
 2d0:	86 0f       	add	r24, r22
 2d2:	e4 cf       	rjmp	.-56     	; 0x29c <LCD_WRITE_COMMAND>
 2d4:	08 95       	ret

000002d6 <LCD_INIT>:
 2d6:	87 e8       	ldi	r24, 0x87	; 135
 2d8:	93 e1       	ldi	r25, 0x13	; 19
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_INIT+0x4>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_INIT+0xa>
 2e0:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2e2:	87 b3       	in	r24, 0x17	; 23
 2e4:	8e 60       	ori	r24, 0x0E	; 14
 2e6:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2e8:	88 b3       	in	r24, 0x18	; 24
 2ea:	81 7f       	andi	r24, 0xF1	; 241
 2ec:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	8a bb       	out	0x1a, r24	; 26
 2f2:	85 ea       	ldi	r24, 0xA5	; 165
 2f4:	9e e0       	ldi	r25, 0x0E	; 14
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_INIT+0x20>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_INIT+0x26>
 2fc:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 2fe:	d8 df       	rcall	.-80     	; 0x2b0 <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 300:	88 e3       	ldi	r24, 0x38	; 56
 302:	cc df       	rcall	.-104    	; 0x29c <LCD_WRITE_COMMAND>
	
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	ca df       	rcall	.-108    	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	c8 df       	rcall	.-112    	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 30c:	8f e0       	ldi	r24, 0x0F	; 15
 30e:	c6 cf       	rjmp	.-116    	; 0x29c <LCD_WRITE_COMMAND>
 310:	08 95       	ret

00000312 <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	lcd_isbusy();
 316:	b7 df       	rcall	.-146    	; 0x286 <lcd_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_PORT = character;
 318:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 31a:	c2 98       	cbi	0x18, 2	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 31c:	c1 9a       	sbi	0x18, 1	; 24
		lcd_kick();
 31e:	aa df       	rcall	.-172    	; 0x274 <lcd_kick>
		LCD_PORT= (LCD_PORT & 0x0f) | (character << 4);
		LCD_CTRL &= ~(1 << RW_SWITCH);
		LCD_CTRL |= (1 << RS_SWITCH);
		lcd_kick();
	#endif
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <calc>:
#include "LCD_driver/LCD.h"
#include "keypad_driver/keypad.h"

int calc(int n1, char s , int n2)
{
	switch(s)
 324:	6b 32       	cpi	r22, 0x2B	; 43
 326:	49 f0       	breq	.+18     	; 0x33a <calc+0x16>
 328:	1c f4       	brge	.+6      	; 0x330 <calc+0xc>
 32a:	6a 32       	cpi	r22, 0x2A	; 42
 32c:	a1 f0       	breq	.+40     	; 0x356 <calc+0x32>
 32e:	1b c0       	rjmp	.+54     	; 0x366 <calc+0x42>
 330:	6d 32       	cpi	r22, 0x2D	; 45
 332:	39 f0       	breq	.+14     	; 0x342 <calc+0x1e>
 334:	6f 32       	cpi	r22, 0x2F	; 47
 336:	49 f0       	breq	.+18     	; 0x34a <calc+0x26>
 338:	16 c0       	rjmp	.+44     	; 0x366 <calc+0x42>
	{
		case('+'):
			return n1+n2;
 33a:	bc 01       	movw	r22, r24
 33c:	64 0f       	add	r22, r20
 33e:	75 1f       	adc	r23, r21
 340:	13 c0       	rjmp	.+38     	; 0x368 <calc+0x44>
		case('-'):
			return n1-n2;
 342:	bc 01       	movw	r22, r24
 344:	64 1b       	sub	r22, r20
 346:	75 0b       	sbc	r23, r21
 348:	0f c0       	rjmp	.+30     	; 0x368 <calc+0x44>
		case('/'):
			if(n2==0){return ;}
 34a:	41 15       	cp	r20, r1
 34c:	51 05       	cpc	r21, r1
 34e:	59 f0       	breq	.+22     	; 0x366 <calc+0x42>
			return n1/n2;
 350:	ba 01       	movw	r22, r20
 352:	ce d0       	rcall	.+412    	; 0x4f0 <__divmodhi4>
 354:	09 c0       	rjmp	.+18     	; 0x368 <calc+0x44>
		case('*'):
			return n1*n2;
 356:	84 9f       	mul	r24, r20
 358:	b0 01       	movw	r22, r0
 35a:	85 9f       	mul	r24, r21
 35c:	70 0d       	add	r23, r0
 35e:	94 9f       	mul	r25, r20
 360:	70 0d       	add	r23, r0
 362:	11 24       	eor	r1, r1
 364:	01 c0       	rjmp	.+2      	; 0x368 <calc+0x44>
 366:	08 95       	ret
 368:	86 2f       	mov	r24, r22
 36a:	97 2f       	mov	r25, r23
	}
}
 36c:	08 95       	ret

0000036e <main>:

int main(void) {
	LCD_INIT();
 36e:	b3 df       	rcall	.-154    	; 0x2d6 <LCD_INIT>
	Keypad_init();
 370:	85 de       	rcall	.-758    	; 0x7c <Keypad_init>
	int sec=0;
	int num1=0;
	int num2=0;
	int res=0;
	char sign='-1';
 372:	d1 e3       	ldi	r29, 0x31	; 49
int main(void) {
	LCD_INIT();
	Keypad_init();
	int sec=0;
	int num1=0;
	int num2=0;
 374:	a1 2c       	mov	r10, r1
 376:	b1 2c       	mov	r11, r1

int main(void) {
	LCD_INIT();
	Keypad_init();
	int sec=0;
	int num1=0;
 378:	c1 2c       	mov	r12, r1
 37a:	d1 2c       	mov	r13, r1
}

int main(void) {
	LCD_INIT();
	Keypad_init();
	int sec=0;
 37c:	00 e0       	ldi	r16, 0x00	; 0
 37e:	10 e0       	ldi	r17, 0x00	; 0

			num1 = 0;
			num2 = 0;
			res = 0;
			sign = '-1';
			sec = 0;
 380:	66 24       	eor	r6, r6
 382:	63 94       	inc	r6
 384:	71 2c       	mov	r7, r1
		}

			_delay_ms(3000);

			num1 = 0;
			num2 = 0;
 386:	81 2c       	mov	r8, r1
 388:	91 2c       	mov	r9, r1
				LCD_WRITE_CHAR('0');
			} else {
				int temp = res;
				int digits = 0;
				while (temp != 0) {
					temp /= 10;
 38a:	0f 2e       	mov	r0, r31
 38c:	fa e0       	ldi	r31, 0x0A	; 10
 38e:	ef 2e       	mov	r14, r31
 390:	f1 2c       	mov	r15, r1
 392:	f0 2d       	mov	r31, r0
	int res=0;
	char sign='-1';
	char pressed_key='-1';
	while (1)
	{
		pressed_key=Keypad_getkey();
 394:	7c de       	rcall	.-776    	; 0x8e <Keypad_getkey>
 396:	c8 2f       	mov	r28, r24
		if (pressed_key >= '0' && pressed_key <= '9') {
 398:	90 ed       	ldi	r25, 0xD0	; 208
 39a:	98 0f       	add	r25, r24
 39c:	9a 30       	cpi	r25, 0x0A	; 10
 39e:	60 f5       	brcc	.+88     	; 0x3f8 <main+0x8a>
			LCD_WRITE_CHAR(pressed_key);
 3a0:	b8 df       	rcall	.-144    	; 0x312 <LCD_WRITE_CHAR>
			if (sec == 0) {
 3a2:	01 15       	cp	r16, r1
 3a4:	11 05       	cpc	r17, r1
 3a6:	99 f4       	brne	.+38     	; 0x3ce <main+0x60>
				num1 = num1 * 10 + (pressed_key - '0');
 3a8:	c6 01       	movw	r24, r12
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	cc 0c       	add	r12, r12
 3b0:	dd 1c       	adc	r13, r13
 3b2:	cc 0c       	add	r12, r12
 3b4:	dd 1c       	adc	r13, r13
 3b6:	cc 0c       	add	r12, r12
 3b8:	dd 1c       	adc	r13, r13
 3ba:	c8 0e       	add	r12, r24
 3bc:	d9 1e       	adc	r13, r25
 3be:	8c 2f       	mov	r24, r28
 3c0:	0c 2e       	mov	r0, r28
 3c2:	00 0c       	add	r0, r0
 3c4:	99 0b       	sbc	r25, r25
 3c6:	c0 97       	sbiw	r24, 0x30	; 48
 3c8:	c8 0e       	add	r12, r24
 3ca:	d9 1e       	adc	r13, r25
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <main+0x8a>
				} else if (sec == 1) {
 3ce:	01 30       	cpi	r16, 0x01	; 1
 3d0:	11 05       	cpc	r17, r1
 3d2:	91 f4       	brne	.+36     	; 0x3f8 <main+0x8a>
				num2 = num2 * 10 + (pressed_key - '0');
 3d4:	c5 01       	movw	r24, r10
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	aa 0c       	add	r10, r10
 3dc:	bb 1c       	adc	r11, r11
 3de:	aa 0c       	add	r10, r10
 3e0:	bb 1c       	adc	r11, r11
 3e2:	aa 0c       	add	r10, r10
 3e4:	bb 1c       	adc	r11, r11
 3e6:	a8 0e       	add	r10, r24
 3e8:	b9 1e       	adc	r11, r25
 3ea:	8c 2f       	mov	r24, r28
 3ec:	0c 2e       	mov	r0, r28
 3ee:	00 0c       	add	r0, r0
 3f0:	99 0b       	sbc	r25, r25
 3f2:	c0 97       	sbiw	r24, 0x30	; 48
 3f4:	a8 0e       	add	r10, r24
 3f6:	b9 1e       	adc	r11, r25
			}
		}
		
		if(pressed_key=='!')
 3f8:	c1 32       	cpi	r28, 0x21	; 33
 3fa:	39 f4       	brne	.+14     	; 0x40a <main+0x9c>
		{
			LCD_clear_screen();
 3fc:	59 df       	rcall	.-334    	; 0x2b0 <LCD_clear_screen>
			num1=0;
			num2=0;
 3fe:	a8 2c       	mov	r10, r8
 400:	b9 2c       	mov	r11, r9
		}
		
		if(pressed_key=='!')
		{
			LCD_clear_screen();
			num1=0;
 402:	c8 2c       	mov	r12, r8
 404:	d9 2c       	mov	r13, r9
			num2=0;
			res=0;
			sign='-1';
 406:	d1 e3       	ldi	r29, 0x31	; 49
 408:	c5 cf       	rjmp	.-118    	; 0x394 <main+0x26>
		}
		if((pressed_key=='+' || pressed_key=='-' || pressed_key=='/' || pressed_key=='*') && (sec==0))
 40a:	cb 32       	cpi	r28, 0x2B	; 43
 40c:	09 f4       	brne	.+2      	; 0x410 <main+0xa2>
 40e:	59 c0       	rjmp	.+178    	; 0x4c2 <main+0x154>
 410:	cd 32       	cpi	r28, 0x2D	; 45
 412:	09 f4       	brne	.+2      	; 0x416 <main+0xa8>
 414:	5b c0       	rjmp	.+182    	; 0x4cc <main+0x15e>
 416:	cf 32       	cpi	r28, 0x2F	; 47
 418:	09 f4       	brne	.+2      	; 0x41c <main+0xae>
 41a:	62 c0       	rjmp	.+196    	; 0x4e0 <main+0x172>
 41c:	ca 32       	cpi	r28, 0x2A	; 42
 41e:	89 f4       	brne	.+34     	; 0x442 <main+0xd4>
 420:	5a c0       	rjmp	.+180    	; 0x4d6 <main+0x168>
		{
			switch(pressed_key){
				case ('+'):
					LCD_WRITE_CHAR('+');
 422:	8b e2       	ldi	r24, 0x2B	; 43
 424:	76 df       	rcall	.-276    	; 0x312 <LCD_WRITE_CHAR>
					sign='+';
 426:	db e2       	ldi	r29, 0x2B	; 43
					sec=1;
					break;
 428:	60 c0       	rjmp	.+192    	; 0x4ea <main+0x17c>
				case ('-'):
					LCD_WRITE_CHAR('-');
 42a:	8d e2       	ldi	r24, 0x2D	; 45
 42c:	72 df       	rcall	.-284    	; 0x312 <LCD_WRITE_CHAR>
					sign='-';
 42e:	dd e2       	ldi	r29, 0x2D	; 45
					sec=1;
					break;
 430:	5c c0       	rjmp	.+184    	; 0x4ea <main+0x17c>
				case ('*'):
					LCD_WRITE_CHAR('*');
 432:	8a e2       	ldi	r24, 0x2A	; 42
 434:	6e df       	rcall	.-292    	; 0x312 <LCD_WRITE_CHAR>
					sign='*';
 436:	da e2       	ldi	r29, 0x2A	; 42
					sec=1;
					break;
 438:	58 c0       	rjmp	.+176    	; 0x4ea <main+0x17c>
				case ('/'):
					LCD_WRITE_CHAR('/');
 43a:	8f e2       	ldi	r24, 0x2F	; 47
 43c:	6a df       	rcall	.-300    	; 0x312 <LCD_WRITE_CHAR>
					sign='/';
 43e:	df e2       	ldi	r29, 0x2F	; 47
					sec=1;
					break;
 440:	54 c0       	rjmp	.+168    	; 0x4ea <main+0x17c>
			}
		}
		if (pressed_key == '=' && sec == 1) {
 442:	cd 33       	cpi	r28, 0x3D	; 61
 444:	09 f0       	breq	.+2      	; 0x448 <main+0xda>
 446:	a6 cf       	rjmp	.-180    	; 0x394 <main+0x26>
 448:	01 30       	cpi	r16, 0x01	; 1
 44a:	11 05       	cpc	r17, r1
 44c:	09 f0       	breq	.+2      	; 0x450 <main+0xe2>
 44e:	a2 cf       	rjmp	.-188    	; 0x394 <main+0x26>
			LCD_WRITE_CHAR('=');
 450:	8d e3       	ldi	r24, 0x3D	; 61
 452:	5f df       	rcall	.-322    	; 0x312 <LCD_WRITE_CHAR>
			LCD_GOTO_XY(2, 0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	2e df       	rcall	.-420    	; 0x2b6 <LCD_GOTO_XY>

			res =calc(num1,sign,num2);
 45a:	a5 01       	movw	r20, r10
 45c:	6d 2f       	mov	r22, r29
 45e:	c6 01       	movw	r24, r12
 460:	61 df       	rcall	.-318    	; 0x324 <calc>
 462:	8c 01       	movw	r16, r24

			if (res == 0) {
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	19 f4       	brne	.+6      	; 0x46e <main+0x100>
				LCD_WRITE_CHAR('0');
 468:	80 e3       	ldi	r24, 0x30	; 48
 46a:	53 df       	rcall	.-346    	; 0x312 <LCD_WRITE_CHAR>
 46c:	18 c0       	rjmp	.+48     	; 0x49e <main+0x130>
 46e:	c8 2d       	mov	r28, r8
 470:	d9 2d       	mov	r29, r9
			} else {
				int temp = res;
				int digits = 0;
				while (temp != 0) {
					temp /= 10;
 472:	b7 01       	movw	r22, r14
 474:	3d d0       	rcall	.+122    	; 0x4f0 <__divmodhi4>
 476:	cb 01       	movw	r24, r22
					digits++;
 478:	21 96       	adiw	r28, 0x01	; 1
			if (res == 0) {
				LCD_WRITE_CHAR('0');
			} else {
				int temp = res;
				int digits = 0;
				while (temp != 0) {
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	d1 f7       	brne	.-12     	; 0x472 <main+0x104>
					temp /= 10;
					digits++;
				}
				temp = res;
				for (int i = digits - 1; i >= 0; i--) {
 47e:	21 97       	sbiw	r28, 0x01	; 1
 480:	72 f0       	brmi	.+28     	; 0x49e <main+0x130>
				int digit = temp % 10;
				LCD_GOTO_XY(2, i);
 482:	6c 2f       	mov	r22, r28
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	17 df       	rcall	.-466    	; 0x2b6 <LCD_GOTO_XY>
					temp /= 10;
					digits++;
				}
				temp = res;
				for (int i = digits - 1; i >= 0; i--) {
				int digit = temp % 10;
 488:	c8 01       	movw	r24, r16
 48a:	b7 01       	movw	r22, r14
 48c:	31 d0       	rcall	.+98     	; 0x4f0 <__divmodhi4>
 48e:	c6 2e       	mov	r12, r22
 490:	d7 2e       	mov	r13, r23
				LCD_GOTO_XY(2, i);
				LCD_WRITE_CHAR(digit + '0');
 492:	80 5d       	subi	r24, 0xD0	; 208
 494:	3e df       	rcall	.-388    	; 0x312 <LCD_WRITE_CHAR>
				temp /= 10;
 496:	0c 2d       	mov	r16, r12
 498:	1d 2d       	mov	r17, r13
				while (temp != 0) {
					temp /= 10;
					digits++;
				}
				temp = res;
				for (int i = digits - 1; i >= 0; i--) {
 49a:	21 97       	sbiw	r28, 0x01	; 1
 49c:	90 f7       	brcc	.-28     	; 0x482 <main+0x114>
 49e:	9f eb       	ldi	r25, 0xBF	; 191
 4a0:	27 e2       	ldi	r18, 0x27	; 39
 4a2:	89 e0       	ldi	r24, 0x09	; 9
 4a4:	91 50       	subi	r25, 0x01	; 1
 4a6:	20 40       	sbci	r18, 0x00	; 0
 4a8:	80 40       	sbci	r24, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <main+0x136>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <main+0x140>
 4ae:	00 00       	nop
			num2 = 0;
			res = 0;
			sign = '-1';
			sec = 0;

			LCD_clear_screen();
 4b0:	ff de       	rcall	.-514    	; 0x2b0 <LCD_clear_screen>
			_delay_ms(3000);

			num1 = 0;
			num2 = 0;
			res = 0;
			sign = '-1';
 4b2:	d1 e3       	ldi	r29, 0x31	; 49
		}

			_delay_ms(3000);

			num1 = 0;
			num2 = 0;
 4b4:	a8 2c       	mov	r10, r8
 4b6:	b9 2c       	mov	r11, r9
			}
		}

			_delay_ms(3000);

			num1 = 0;
 4b8:	c8 2c       	mov	r12, r8
 4ba:	d9 2c       	mov	r13, r9
			num2 = 0;
			res = 0;
			sign = '-1';
			sec = 0;
 4bc:	08 2d       	mov	r16, r8
 4be:	19 2d       	mov	r17, r9
 4c0:	69 cf       	rjmp	.-302    	; 0x394 <main+0x26>
			num1=0;
			num2=0;
			res=0;
			sign='-1';
		}
		if((pressed_key=='+' || pressed_key=='-' || pressed_key=='/' || pressed_key=='*') && (sec==0))
 4c2:	01 15       	cp	r16, r1
 4c4:	11 05       	cpc	r17, r1
 4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x15c>
 4c8:	ac cf       	rjmp	.-168    	; 0x422 <main+0xb4>
 4ca:	64 cf       	rjmp	.-312    	; 0x394 <main+0x26>
 4cc:	01 15       	cp	r16, r1
 4ce:	11 05       	cpc	r17, r1
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <main+0x166>
 4d2:	ab cf       	rjmp	.-170    	; 0x42a <main+0xbc>
 4d4:	5f cf       	rjmp	.-322    	; 0x394 <main+0x26>
 4d6:	01 15       	cp	r16, r1
 4d8:	11 05       	cpc	r17, r1
 4da:	09 f4       	brne	.+2      	; 0x4de <main+0x170>
 4dc:	aa cf       	rjmp	.-172    	; 0x432 <main+0xc4>
 4de:	5a cf       	rjmp	.-332    	; 0x394 <main+0x26>
 4e0:	01 15       	cp	r16, r1
 4e2:	11 05       	cpc	r17, r1
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <main+0x17a>
 4e6:	a9 cf       	rjmp	.-174    	; 0x43a <main+0xcc>
 4e8:	55 cf       	rjmp	.-342    	; 0x394 <main+0x26>

			num1 = 0;
			num2 = 0;
			res = 0;
			sign = '-1';
			sec = 0;
 4ea:	06 2d       	mov	r16, r6
 4ec:	17 2d       	mov	r17, r7
 4ee:	52 cf       	rjmp	.-348    	; 0x394 <main+0x26>

000004f0 <__divmodhi4>:
 4f0:	97 fb       	bst	r25, 7
 4f2:	07 2e       	mov	r0, r23
 4f4:	16 f4       	brtc	.+4      	; 0x4fa <__divmodhi4+0xa>
 4f6:	00 94       	com	r0
 4f8:	06 d0       	rcall	.+12     	; 0x506 <__divmodhi4_neg1>
 4fa:	77 fd       	sbrc	r23, 7
 4fc:	08 d0       	rcall	.+16     	; 0x50e <__divmodhi4_neg2>
 4fe:	0b d0       	rcall	.+22     	; 0x516 <__udivmodhi4>
 500:	07 fc       	sbrc	r0, 7
 502:	05 d0       	rcall	.+10     	; 0x50e <__divmodhi4_neg2>
 504:	3e f4       	brtc	.+14     	; 0x514 <__divmodhi4_exit>

00000506 <__divmodhi4_neg1>:
 506:	90 95       	com	r25
 508:	81 95       	neg	r24
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <__divmodhi4_neg2>:
 50e:	70 95       	com	r23
 510:	61 95       	neg	r22
 512:	7f 4f       	sbci	r23, 0xFF	; 255

00000514 <__divmodhi4_exit>:
 514:	08 95       	ret

00000516 <__udivmodhi4>:
 516:	aa 1b       	sub	r26, r26
 518:	bb 1b       	sub	r27, r27
 51a:	51 e1       	ldi	r21, 0x11	; 17
 51c:	07 c0       	rjmp	.+14     	; 0x52c <__udivmodhi4_ep>

0000051e <__udivmodhi4_loop>:
 51e:	aa 1f       	adc	r26, r26
 520:	bb 1f       	adc	r27, r27
 522:	a6 17       	cp	r26, r22
 524:	b7 07       	cpc	r27, r23
 526:	10 f0       	brcs	.+4      	; 0x52c <__udivmodhi4_ep>
 528:	a6 1b       	sub	r26, r22
 52a:	b7 0b       	sbc	r27, r23

0000052c <__udivmodhi4_ep>:
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	5a 95       	dec	r21
 532:	a9 f7       	brne	.-22     	; 0x51e <__udivmodhi4_loop>
 534:	80 95       	com	r24
 536:	90 95       	com	r25
 538:	bc 01       	movw	r22, r24
 53a:	cd 01       	movw	r24, r26
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
