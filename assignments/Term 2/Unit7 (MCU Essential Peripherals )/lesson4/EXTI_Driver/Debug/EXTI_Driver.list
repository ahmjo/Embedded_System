
EXTI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d10  08000d10  00001d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d20  08000d20  00001d28  2**0
                  CONTENTS
  4 .ARM          00000000  08000d20  08000d20  00001d28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d20  08000d28  00001d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d20  08000d20  00001d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d24  08000d24  00001d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000d28  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000d28  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000115f  00000000  00000000  00001d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000057b  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a4c  00000000  00000000  0000342b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00003e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00004028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015d2  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000006b2  00000000  00000000  00005762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000568  00000000  00000000  00005e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cf8 	.word	0x08000cf8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cf8 	.word	0x08000cf8

08000170 <Wait>:


unsigned int IRQ_Flag = 0;

void Wait(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <Wait+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <Wait+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	@ 0xfe
 800018e:	d9f9      	bls.n	8000184 <Wait+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <Wait+0xe>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 80001b0:	4b06      	ldr	r3, [pc, #24]	@ (80001cc <EXTI9_CallBack+0x20>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
	LCD_WRITE_CHAR("I");
 80001b6:	4b06      	ldr	r3, [pc, #24]	@ (80001d0 <EXTI9_CallBack+0x24>)
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f93c 	bl	8000438 <LCD_WRITE_CHAR>
	Wait(1000);
 80001c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c4:	f7ff ffd4 	bl	8000170 <Wait>
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000d10 	.word	0x08000d10

080001d4 <clock_init>:

//INITs
void clock_init()
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80001d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <clock_init+0x30>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a09      	ldr	r2, [pc, #36]	@ (8000204 <clock_init+0x30>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001e4:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <clock_init+0x30>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a06      	ldr	r2, [pc, #24]	@ (8000204 <clock_init+0x30>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <clock_init+0x30>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a03      	ldr	r2, [pc, #12]	@ (8000204 <clock_init+0x30>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6193      	str	r3, [r2, #24]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	40021000 	.word	0x40021000

08000208 <EXTI_init>:

void EXTI_init()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
	EXTI_Config_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 800020e:	4a0a      	ldr	r2, [pc, #40]	@ (8000238 <EXTI_init+0x30>)
 8000210:	f107 030c 	add.w	r3, r7, #12
 8000214:	ca07      	ldmia	r2, {r0, r1, r2}
 8000216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising;
 800021a:	2300      	movs	r3, #0
 800021c:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_CallBack;
 800021e:	4b07      	ldr	r3, [pc, #28]	@ (800023c <EXTI_init+0x34>)
 8000220:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN =EXTI_IRQ_EN;
 8000222:	2301      	movs	r3, #1
 8000224:	767b      	strb	r3, [r7, #25]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fada 	bl	80007e4 <MCAL_EXTI_GPIO_Init>
}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08000d14 	.word	0x08000d14
 800023c:	080001ad 	.word	0x080001ad

08000240 <main>:
}


//main
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	//Enable Clock
	clock_init();
 8000244:	f7ff ffc6 	bl	80001d4 <clock_init>

	LCD_INIT();
 8000248:	f000 f8b8 	bl	80003bc <LCD_INIT>
	LCD_clear_screen();
 800024c:	f000 f8ce 	bl	80003ec <LCD_clear_screen>

	EXTI_init();
 8000250:	f7ff ffda 	bl	8000208 <EXTI_init>

	//GPIO_init();
	//Keypad_init();

	IRQ_Flag = 1;
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <main+0x30>)
 8000256:	2201      	movs	r2, #1
 8000258:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <main+0x30>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0fb      	beq.n	800025a <main+0x1a>
		{
			LCD_clear_screen();
 8000262:	f000 f8c3 	bl	80003ec <LCD_clear_screen>
			IRQ_Flag = 0;
 8000266:	4b02      	ldr	r3, [pc, #8]	@ (8000270 <main+0x30>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 800026c:	e7f5      	b.n	800025a <main+0x1a>
 800026e:	bf00      	nop
 8000270:	2000001c 	.word	0x2000001c

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	@ (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 fd05 	bl	8000cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffcb 	bl	8000240 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000d28 	.word	0x08000d28
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000005c 	.word	0x2000005c

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>

080002c6 <delay_ms>:
#include "lcd.h"

void delay_ms(uint32_t time) {
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	e00b      	b.n	80002ec <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	e002      	b.n	80002e0 <delay_ms+0x1a>
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	3301      	adds	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80002e4:	d9f9      	bls.n	80002da <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d3ef      	bcc.n	80002d4 <delay_ms+0xe>
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <LCD_GPIO_init>:


// Initialize GPIO for LCD
void LCD_GPIO_init() {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	GPIO_Config_t PinCfg;

    // Configure RS, RW, and EN as output
    PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800030a:	803b      	strh	r3, [r7, #0]
    PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800030c:	2304      	movs	r3, #4
 800030e:	807b      	strh	r3, [r7, #2]
    PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000310:	2301      	movs	r3, #1
 8000312:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000314:	463b      	mov	r3, r7
 8000316:	4619      	mov	r1, r3
 8000318:	481c      	ldr	r0, [pc, #112]	@ (800038c <LCD_GPIO_init+0x8c>)
 800031a:	f000 fc21 	bl	8000b60 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = RW_SWITCH;
 800031e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000322:	803b      	strh	r3, [r7, #0]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000324:	463b      	mov	r3, r7
 8000326:	4619      	mov	r1, r3
 8000328:	4818      	ldr	r0, [pc, #96]	@ (800038c <LCD_GPIO_init+0x8c>)
 800032a:	f000 fc19 	bl	8000b60 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = EN_SWITCH;
 800032e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000332:	803b      	strh	r3, [r7, #0]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000334:	463b      	mov	r3, r7
 8000336:	4619      	mov	r1, r3
 8000338:	4814      	ldr	r0, [pc, #80]	@ (800038c <LCD_GPIO_init+0x8c>)
 800033a:	f000 fc11 	bl	8000b60 <MCAL_GPIO_Init>

    // Configure data pins (D0 - D7) as output
    for (uint8_t pin = GPIO_PIN_0; pin <= GPIO_PIN_7; pin++) {
 800033e:	2301      	movs	r3, #1
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	e00a      	b.n	800035a <LCD_GPIO_init+0x5a>
        PinCfg.GPIO_PinNumber = pin;
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	b29b      	uxth	r3, r3
 8000348:	803b      	strh	r3, [r7, #0]
        MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800034a:	463b      	mov	r3, r7
 800034c:	4619      	mov	r1, r3
 800034e:	480f      	ldr	r0, [pc, #60]	@ (800038c <LCD_GPIO_init+0x8c>)
 8000350:	f000 fc06 	bl	8000b60 <MCAL_GPIO_Init>
    for (uint8_t pin = GPIO_PIN_0; pin <= GPIO_PIN_7; pin++) {
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	3301      	adds	r3, #1
 8000358:	71fb      	strb	r3, [r7, #7]
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b80      	cmp	r3, #128	@ 0x80
 800035e:	d9f1      	bls.n	8000344 <LCD_GPIO_init+0x44>
    }

    // Set initial state: Disable all control signals
    MCAL_GPIO_WRITE_Pin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000366:	4809      	ldr	r0, [pc, #36]	@ (800038c <LCD_GPIO_init+0x8c>)
 8000368:	f000 fc79 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
    MCAL_GPIO_WRITE_Pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000372:	4806      	ldr	r0, [pc, #24]	@ (800038c <LCD_GPIO_init+0x8c>)
 8000374:	f000 fc73 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
    MCAL_GPIO_WRITE_Pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800037e:	4803      	ldr	r0, [pc, #12]	@ (800038c <LCD_GPIO_init+0x8c>)
 8000380:	f000 fc6d 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40010800 	.word	0x40010800

08000390 <LCD_lcd_kick>:


void LCD_lcd_kick() {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITE_Pin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039a:	4807      	ldr	r0, [pc, #28]	@ (80003b8 <LCD_lcd_kick+0x28>)
 800039c:	f000 fc5f 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
    delay_ms(2);
 80003a0:	2002      	movs	r0, #2
 80003a2:	f7ff ff90 	bl	80002c6 <delay_ms>
    MCAL_GPIO_WRITE_Pin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003ac:	4802      	ldr	r0, [pc, #8]	@ (80003b8 <LCD_lcd_kick+0x28>)
 80003ae:	f000 fc56 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010800 	.word	0x40010800

080003bc <LCD_INIT>:


// Initialize LCD in 8-bit mode
void LCD_INIT() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    delay_ms(20);
 80003c0:	2014      	movs	r0, #20
 80003c2:	f7ff ff80 	bl	80002c6 <delay_ms>
    LCD_GPIO_init();
 80003c6:	f7ff ff9b 	bl	8000300 <LCD_GPIO_init>
    delay_ms(15);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f7ff ff7b 	bl	80002c6 <delay_ms>

    LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80003d0:	2038      	movs	r0, #56	@ 0x38
 80003d2:	f000 f813 	bl	80003fc <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003d6:	2006      	movs	r0, #6
 80003d8:	f000 f810 	bl	80003fc <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 f80d 	bl	80003fc <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003e2:	200f      	movs	r0, #15
 80003e4:	f000 f80a 	bl	80003fc <LCD_WRITE_COMMAND>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <LCD_clear_screen>:


// Clear LCD screen
void LCD_clear_screen() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 f803 	bl	80003fc <LCD_WRITE_COMMAND>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <LCD_WRITE_COMMAND>:


// Send a command to LCD
void LCD_WRITE_COMMAND(unsigned char command) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_WRITE_Port(LCD_CTRL, command);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4619      	mov	r1, r3
 800040a:	480a      	ldr	r0, [pc, #40]	@ (8000434 <LCD_WRITE_COMMAND+0x38>)
 800040c:	f000 fc3e 	bl	8000c8c <MCAL_GPIO_WRITE_Port>
    MCAL_GPIO_WRITE_Pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000416:	4807      	ldr	r0, [pc, #28]	@ (8000434 <LCD_WRITE_COMMAND+0x38>)
 8000418:	f000 fc21 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
    MCAL_GPIO_WRITE_Pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000422:	4804      	ldr	r0, [pc, #16]	@ (8000434 <LCD_WRITE_COMMAND+0x38>)
 8000424:	f000 fc1b 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
    LCD_lcd_kick();
 8000428:	f7ff ffb2 	bl	8000390 <LCD_lcd_kick>
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40010800 	.word	0x40010800

08000438 <LCD_WRITE_CHAR>:


// Write a single character to LCD
void LCD_WRITE_CHAR(unsigned char character) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WRITE_Port(LCD_CTRL, character);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4619      	mov	r1, r3
 8000446:	480a      	ldr	r0, [pc, #40]	@ (8000470 <LCD_WRITE_CHAR+0x38>)
 8000448:	f000 fc20 	bl	8000c8c <MCAL_GPIO_WRITE_Port>
	MCAL_GPIO_WRITE_Pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000452:	4807      	ldr	r0, [pc, #28]	@ (8000470 <LCD_WRITE_CHAR+0x38>)
 8000454:	f000 fc03 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
	MCAL_GPIO_WRITE_Pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800045e:	4804      	ldr	r0, [pc, #16]	@ (8000470 <LCD_WRITE_CHAR+0x38>)
 8000460:	f000 fbfd 	bl	8000c5e <MCAL_GPIO_WRITE_Pin>
    LCD_lcd_kick();
 8000464:	f7ff ff94 	bl	8000390 <LCD_lcd_kick>
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40010800 	.word	0x40010800

08000474 <Enable_NVIC>:
//Generic Variable
void (*GP_IRQ_CallBack[15])();

//Generic Function
void Enable_NVIC(uint16_t IRQ)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800047e:	88fb      	ldrh	r3, [r7, #6]
 8000480:	2b0f      	cmp	r3, #15
 8000482:	d854      	bhi.n	800052e <Enable_NVIC+0xba>
 8000484:	a201      	add	r2, pc, #4	@ (adr r2, 800048c <Enable_NVIC+0x18>)
 8000486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048a:	bf00      	nop
 800048c:	080004cd 	.word	0x080004cd
 8000490:	080004db 	.word	0x080004db
 8000494:	080004e9 	.word	0x080004e9
 8000498:	080004f7 	.word	0x080004f7
 800049c:	08000505 	.word	0x08000505
 80004a0:	08000513 	.word	0x08000513
 80004a4:	08000513 	.word	0x08000513
 80004a8:	08000513 	.word	0x08000513
 80004ac:	08000513 	.word	0x08000513
 80004b0:	08000513 	.word	0x08000513
 80004b4:	08000521 	.word	0x08000521
 80004b8:	08000521 	.word	0x08000521
 80004bc:	08000521 	.word	0x08000521
 80004c0:	08000521 	.word	0x08000521
 80004c4:	08000521 	.word	0x08000521
 80004c8:	08000521 	.word	0x08000521
	{
	case 0:
		NVIC_IRQ6_EXTI0_EN;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000538 <Enable_NVIC+0xc4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a19      	ldr	r2, [pc, #100]	@ (8000538 <Enable_NVIC+0xc4>)
 80004d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004d6:	6013      	str	r3, [r2, #0]
		break;
 80004d8:	e029      	b.n	800052e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_EN;
 80004da:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <Enable_NVIC+0xc4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <Enable_NVIC+0xc4>)
 80004e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e4:	6013      	str	r3, [r2, #0]
		break;
 80004e6:	e022      	b.n	800052e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_EN;
 80004e8:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <Enable_NVIC+0xc4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <Enable_NVIC+0xc4>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f2:	6013      	str	r3, [r2, #0]
		break;
 80004f4:	e01b      	b.n	800052e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_EN;
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <Enable_NVIC+0xc4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000538 <Enable_NVIC+0xc4>)
 80004fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000500:	6013      	str	r3, [r2, #0]
		break;
 8000502:	e014      	b.n	800052e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_EN;
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <Enable_NVIC+0xc4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0b      	ldr	r2, [pc, #44]	@ (8000538 <Enable_NVIC+0xc4>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800050e:	6013      	str	r3, [r2, #0]
		break;
 8000510:	e00d      	b.n	800052e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_EN;
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <Enable_NVIC+0xc4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <Enable_NVIC+0xc4>)
 8000518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800051c:	6013      	str	r3, [r2, #0]
		break;
 800051e:	e006      	b.n	800052e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_EN;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <Enable_NVIC+0xc8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <Enable_NVIC+0xc8>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800052a:	6013      	str	r3, [r2, #0]
		break;
 800052c:	bf00      	nop
	}
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	e000e100 	.word	0xe000e100
 800053c:	e000e104 	.word	0xe000e104

08000540 <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d854      	bhi.n	80005fa <Disable_NVIC+0xba>
 8000550:	a201      	add	r2, pc, #4	@ (adr r2, 8000558 <Disable_NVIC+0x18>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000599 	.word	0x08000599
 800055c:	080005a7 	.word	0x080005a7
 8000560:	080005b5 	.word	0x080005b5
 8000564:	080005c3 	.word	0x080005c3
 8000568:	080005d1 	.word	0x080005d1
 800056c:	080005df 	.word	0x080005df
 8000570:	080005df 	.word	0x080005df
 8000574:	080005df 	.word	0x080005df
 8000578:	080005df 	.word	0x080005df
 800057c:	080005df 	.word	0x080005df
 8000580:	080005ed 	.word	0x080005ed
 8000584:	080005ed 	.word	0x080005ed
 8000588:	080005ed 	.word	0x080005ed
 800058c:	080005ed 	.word	0x080005ed
 8000590:	080005ed 	.word	0x080005ed
 8000594:	080005ed 	.word	0x080005ed
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <Disable_NVIC+0xc4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <Disable_NVIC+0xc4>)
 800059e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a2:	6013      	str	r3, [r2, #0]
		break;
 80005a4:	e029      	b.n	80005fa <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <Disable_NVIC+0xc4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <Disable_NVIC+0xc4>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b0:	6013      	str	r3, [r2, #0]
		break;
 80005b2:	e022      	b.n	80005fa <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <Disable_NVIC+0xc4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <Disable_NVIC+0xc4>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005be:	6013      	str	r3, [r2, #0]
		break;
 80005c0:	e01b      	b.n	80005fa <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <Disable_NVIC+0xc4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000604 <Disable_NVIC+0xc4>)
 80005c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005cc:	6013      	str	r3, [r2, #0]
		break;
 80005ce:	e014      	b.n	80005fa <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <Disable_NVIC+0xc4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <Disable_NVIC+0xc4>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005da:	6013      	str	r3, [r2, #0]
		break;
 80005dc:	e00d      	b.n	80005fa <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <Disable_NVIC+0xc4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <Disable_NVIC+0xc4>)
 80005e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005e8:	6013      	str	r3, [r2, #0]
		break;
 80005ea:	e006      	b.n	80005fa <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <Disable_NVIC+0xc8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <Disable_NVIC+0xc8>)
 80005f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005f6:	6013      	str	r3, [r2, #0]
		break;
 80005f8:	bf00      	nop
	}
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	e000e180 	.word	0xe000e180
 8000608:	e000e184 	.word	0xe000e184

0800060c <Update_EXTI>:

void Update_EXTI(EXTI_Config_t* EXTI_Config)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	//1-configure GPIO to be AF input -> Floating input
	GPIO_Config_t PINCFG;

	PINCFG.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	891b      	ldrh	r3, [r3, #8]
 8000618:	813b      	strh	r3, [r7, #8]
	PINCFG.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 800061a:	2301      	movs	r3, #1
 800061c:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port,&PINCFG);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f107 0208 	add.w	r2, r7, #8
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fa99 	bl	8000b60 <MCAL_GPIO_Init>
	//====================================================
	//2-Update AFIO to Route between EXTI line with Port A,B,C,D
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_Input_LineNum/4;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	b29b      	uxth	r3, r3
 8000636:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_POS   = (EXTI_Config->EXTI_PIN.EXTI_Input_LineNum%4)*4;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_EXTICR_Index] &= (0xF << AFIO_EXTICR_POS);
 8000648:	4a5f      	ldr	r2, [pc, #380]	@ (80007c8 <Update_EXTI+0x1bc>)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3302      	adds	r3, #2
 800064e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	210f      	movs	r1, #15
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	4618      	mov	r0, r3
 800065c:	495a      	ldr	r1, [pc, #360]	@ (80007c8 <Update_EXTI+0x1bc>)
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4002      	ands	r2, r0
 8000662:	3302      	adds	r3, #2
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_POS);
 8000668:	4a57      	ldr	r2, [pc, #348]	@ (80007c8 <Update_EXTI+0x1bc>)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	3302      	adds	r3, #2
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	4955      	ldr	r1, [pc, #340]	@ (80007cc <Update_EXTI+0x1c0>)
 8000678:	428b      	cmp	r3, r1
 800067a:	d016      	beq.n	80006aa <Update_EXTI+0x9e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4953      	ldr	r1, [pc, #332]	@ (80007d0 <Update_EXTI+0x1c4>)
 8000682:	428b      	cmp	r3, r1
 8000684:	d00f      	beq.n	80006a6 <Update_EXTI+0x9a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	4952      	ldr	r1, [pc, #328]	@ (80007d4 <Update_EXTI+0x1c8>)
 800068c:	428b      	cmp	r3, r1
 800068e:	d008      	beq.n	80006a2 <Update_EXTI+0x96>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4950      	ldr	r1, [pc, #320]	@ (80007d8 <Update_EXTI+0x1cc>)
 8000696:	428b      	cmp	r3, r1
 8000698:	d101      	bne.n	800069e <Update_EXTI+0x92>
 800069a:	2303      	movs	r3, #3
 800069c:	e006      	b.n	80006ac <Update_EXTI+0xa0>
 800069e:	2300      	movs	r3, #0
 80006a0:	e004      	b.n	80006ac <Update_EXTI+0xa0>
 80006a2:	2302      	movs	r3, #2
 80006a4:	e002      	b.n	80006ac <Update_EXTI+0xa0>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <Update_EXTI+0xa0>
 80006aa:	2300      	movs	r3, #0
 80006ac:	7bb9      	ldrb	r1, [r7, #14]
 80006ae:	408b      	lsls	r3, r1
 80006b0:	4618      	mov	r0, r3
 80006b2:	4945      	ldr	r1, [pc, #276]	@ (80007c8 <Update_EXTI+0x1bc>)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4302      	orrs	r2, r0
 80006b8:	3302      	adds	r3, #2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//====================================================
	//3-Update Rising or Falling Register
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <Update_EXTI+0x1d0>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a42      	ldr	r2, [pc, #264]	@ (80007dc <Update_EXTI+0x1d0>)
 80006d2:	400b      	ands	r3, r1
 80006d4:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 80006d6:	4b41      	ldr	r3, [pc, #260]	@ (80007dc <Update_EXTI+0x1d0>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	8812      	ldrh	r2, [r2, #0]
 80006de:	4611      	mov	r1, r2
 80006e0:	2201      	movs	r2, #1
 80006e2:	408a      	lsls	r2, r1
 80006e4:	43d2      	mvns	r2, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a3c      	ldr	r2, [pc, #240]	@ (80007dc <Update_EXTI+0x1d0>)
 80006ea:	400b      	ands	r3, r1
 80006ec:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7b1b      	ldrb	r3, [r3, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10b      	bne.n	800070e <Update_EXTI+0x102>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <Update_EXTI+0x1d0>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a35      	ldr	r2, [pc, #212]	@ (80007dc <Update_EXTI+0x1d0>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6093      	str	r3, [r2, #8]
 800070c:	e029      	b.n	8000762 <Update_EXTI+0x156>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7b1b      	ldrb	r3, [r3, #12]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10b      	bne.n	800072e <Update_EXTI+0x122>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <Update_EXTI+0x1d0>)
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	8812      	ldrh	r2, [r2, #0]
 800071e:	4611      	mov	r1, r2
 8000720:	2201      	movs	r2, #1
 8000722:	408a      	lsls	r2, r1
 8000724:	4611      	mov	r1, r2
 8000726:	4a2d      	ldr	r2, [pc, #180]	@ (80007dc <Update_EXTI+0x1d0>)
 8000728:	430b      	orrs	r3, r1
 800072a:	60d3      	str	r3, [r2, #12]
 800072c:	e019      	b.n	8000762 <Update_EXTI+0x156>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Both)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7b1b      	ldrb	r3, [r3, #12]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d115      	bne.n	8000762 <Update_EXTI+0x156>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <Update_EXTI+0x1d0>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	8812      	ldrh	r2, [r2, #0]
 800073e:	4611      	mov	r1, r2
 8000740:	2201      	movs	r2, #1
 8000742:	408a      	lsls	r2, r1
 8000744:	4611      	mov	r1, r2
 8000746:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <Update_EXTI+0x1d0>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <Update_EXTI+0x1d0>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	4611      	mov	r1, r2
 8000756:	2201      	movs	r2, #1
 8000758:	408a      	lsls	r2, r1
 800075a:	4611      	mov	r1, r2
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <Update_EXTI+0x1d0>)
 800075e:	430b      	orrs	r3, r1
 8000760:	60d3      	str	r3, [r2, #12]
	}
	//====================================================
	//4-Update IRQ handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_Input_LineNum] = EXTI_Config->P_IRQ_CallBack;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <Update_EXTI+0x1d4>)
 800076e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//====================================================
	//5-Enable\Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_EN)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7b5b      	ldrb	r3, [r3, #13]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d110      	bne.n	800079c <Update_EXTI+0x190>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <Update_EXTI+0x1d0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	8812      	ldrh	r2, [r2, #0]
 8000782:	4611      	mov	r1, r2
 8000784:	2201      	movs	r2, #1
 8000786:	408a      	lsls	r2, r1
 8000788:	4611      	mov	r1, r2
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <Update_EXTI+0x1d0>)
 800078c:	430b      	orrs	r3, r1
 800078e:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fe6d 	bl	8000474 <Enable_NVIC>
	}else{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
	}
}
 800079a:	e010      	b.n	80007be <Update_EXTI+0x1b2>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <Update_EXTI+0x1d0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	8812      	ldrh	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <Update_EXTI+0x1d0>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_Input_LineNum);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fec1 	bl	8000540 <Disable_NVIC>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010000 	.word	0x40010000
 80007cc:	40010800 	.word	0x40010800
 80007d0:	40010c00 	.word	0x40010c00
 80007d4:	40011000 	.word	0x40011000
 80007d8:	40011400 	.word	0x40011400
 80007dc:	40010400 	.word	0x40010400
 80007e0:	20000020 	.word	0x20000020

080007e4 <MCAL_EXTI_GPIO_Init>:
 * @param [in] 	-EXTI_Config set by @ref EXTI_Define & EXTI_Trigger_define & EXTI_IRQ_Define
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_EXTI_GPIO_Init(EXTI_Config_t* EXTI_Config)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff0d 	bl	800060c <Update_EXTI>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <EXTI0_IRQHandler>:
 * ****** ISR Functions ****************************
 * *************************************************
*/

void EXTI0_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <EXTI0_IRQHandler+0x1c>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <EXTI0_IRQHandler+0x1c>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[0]();
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <EXTI0_IRQHandler+0x20>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4798      	blx	r3
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40010400 	.word	0x40010400
 800081c:	20000020 	.word	0x20000020

08000820 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<1);
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <EXTI1_IRQHandler+0x1c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a04      	ldr	r2, [pc, #16]	@ (800083c <EXTI1_IRQHandler+0x1c>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[1]();
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <EXTI1_IRQHandler+0x20>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	4798      	blx	r3
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010400 	.word	0x40010400
 8000840:	20000020 	.word	0x20000020

08000844 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<2);
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <EXTI2_IRQHandler+0x1c>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <EXTI2_IRQHandler+0x1c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[2]();
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <EXTI2_IRQHandler+0x20>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4798      	blx	r3
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010400 	.word	0x40010400
 8000864:	20000020 	.word	0x20000020

08000868 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<3);
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <EXTI3_IRQHandler+0x1c>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <EXTI3_IRQHandler+0x1c>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[3]();
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <EXTI3_IRQHandler+0x20>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4798      	blx	r3
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010400 	.word	0x40010400
 8000888:	20000020 	.word	0x20000020

0800088c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<4);
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <EXTI4_IRQHandler+0x1c>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <EXTI4_IRQHandler+0x1c>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[4]();
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <EXTI4_IRQHandler+0x20>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	4798      	blx	r3
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010400 	.word	0x40010400
 80008ac:	20000020 	.word	0x20000020

080008b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();}
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f003 0320 	and.w	r3, r3, #32
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d008      	beq.n	80008d2 <EXTI9_5_IRQHandler+0x22>
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	6153      	str	r3, [r2, #20]
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <EXTI9_5_IRQHandler+0xa4>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4798      	blx	r3
	if(EXTI->PR & (1<<6)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[6]();}
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d008      	beq.n	80008f0 <EXTI9_5_IRQHandler+0x40>
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <EXTI9_5_IRQHandler+0xa4>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4798      	blx	r3
	if(EXTI->PR & (1<<7)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[7]();}
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d008      	beq.n	800090e <EXTI9_5_IRQHandler+0x5e>
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	6153      	str	r3, [r2, #20]
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <EXTI9_5_IRQHandler+0xa4>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4798      	blx	r3
	if(EXTI->PR & (1<<8)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[8]();}
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <EXTI9_5_IRQHandler+0x7c>
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a0c      	ldr	r2, [pc, #48]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <EXTI9_5_IRQHandler+0xa4>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	4798      	blx	r3
	if(EXTI->PR & (1<<9)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[9]();}
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000934:	2b00      	cmp	r3, #0
 8000936:	d008      	beq.n	800094a <EXTI9_5_IRQHandler+0x9a>
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <EXTI9_5_IRQHandler+0xa0>)
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6153      	str	r3, [r2, #20]
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <EXTI9_5_IRQHandler+0xa4>)
 8000946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000948:	4798      	blx	r3
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010400 	.word	0x40010400
 8000954:	20000020 	.word	0x20000020

08000958 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[10]();}
 800095c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000964:	2b00      	cmp	r3, #0
 8000966:	d008      	beq.n	800097a <EXTI15_10_IRQHandler+0x22>
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a29      	ldr	r2, [pc, #164]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 800096e:	f043 0320 	orr.w	r3, r3, #32
 8000972:	6153      	str	r3, [r2, #20]
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <EXTI15_10_IRQHandler+0xc0>)
 8000976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000978:	4798      	blx	r3
	if(EXTI->PR & (1<<11)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[11]();}
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <EXTI15_10_IRQHandler+0x40>
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	4a22      	ldr	r2, [pc, #136]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6153      	str	r3, [r2, #20]
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <EXTI15_10_IRQHandler+0xc0>)
 8000994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000996:	4798      	blx	r3
	if(EXTI->PR & (1<<12)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[12]();}
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d008      	beq.n	80009b6 <EXTI15_10_IRQHandler+0x5e>
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	6153      	str	r3, [r2, #20]
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <EXTI15_10_IRQHandler+0xc0>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	4798      	blx	r3
	if(EXTI->PR & (1<<13)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[13]();}
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d008      	beq.n	80009d4 <EXTI15_10_IRQHandler+0x7c>
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009c8:	f043 0320 	orr.w	r3, r3, #32
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <EXTI15_10_IRQHandler+0xc0>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d2:	4798      	blx	r3
	if(EXTI->PR & (1<<14)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[14]();}
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <EXTI15_10_IRQHandler+0x9a>
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	6153      	str	r3, [r2, #20]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <EXTI15_10_IRQHandler+0xc0>)
 80009ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f0:	4798      	blx	r3
	if(EXTI->PR & (1<<15)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[15]();}
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d008      	beq.n	8000a10 <EXTI15_10_IRQHandler+0xb8>
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <EXTI15_10_IRQHandler+0xbc>)
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <EXTI15_10_IRQHandler+0xc0>)
 8000a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a0e:	4798      	blx	r3
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40010400 	.word	0x40010400
 8000a18:	20000020 	.word	0x20000020

08000a1c <Get_PinPostion>:
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_PinPostion(uint16_t PinNumber)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a2c:	f000 808f 	beq.w	8000b4e <Get_PinPostion+0x132>
 8000a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a34:	f300 808d 	bgt.w	8000b52 <Get_PinPostion+0x136>
 8000a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a3c:	f000 8085 	beq.w	8000b4a <Get_PinPostion+0x12e>
 8000a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a44:	f300 8085 	bgt.w	8000b52 <Get_PinPostion+0x136>
 8000a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a4c:	d07b      	beq.n	8000b46 <Get_PinPostion+0x12a>
 8000a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a52:	dc7e      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a58:	d073      	beq.n	8000b42 <Get_PinPostion+0x126>
 8000a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a5e:	dc78      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a64:	d06b      	beq.n	8000b3e <Get_PinPostion+0x122>
 8000a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a6a:	dc72      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a70:	d063      	beq.n	8000b3a <Get_PinPostion+0x11e>
 8000a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a76:	dc6c      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a7c:	d05b      	beq.n	8000b36 <Get_PinPostion+0x11a>
 8000a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a82:	dc66      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a88:	d053      	beq.n	8000b32 <Get_PinPostion+0x116>
 8000a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a8e:	dc60      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a90:	2b80      	cmp	r3, #128	@ 0x80
 8000a92:	d05c      	beq.n	8000b4e <Get_PinPostion+0x132>
 8000a94:	2b80      	cmp	r3, #128	@ 0x80
 8000a96:	dc5c      	bgt.n	8000b52 <Get_PinPostion+0x136>
 8000a98:	2b20      	cmp	r3, #32
 8000a9a:	dc47      	bgt.n	8000b2c <Get_PinPostion+0x110>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dd58      	ble.n	8000b52 <Get_PinPostion+0x136>
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	2b1f      	cmp	r3, #31
 8000aa4:	d855      	bhi.n	8000b52 <Get_PinPostion+0x136>
 8000aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aac <Get_PinPostion+0x90>)
 8000aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aac:	08000b33 	.word	0x08000b33
 8000ab0:	08000b37 	.word	0x08000b37
 8000ab4:	08000b53 	.word	0x08000b53
 8000ab8:	08000b3b 	.word	0x08000b3b
 8000abc:	08000b53 	.word	0x08000b53
 8000ac0:	08000b53 	.word	0x08000b53
 8000ac4:	08000b53 	.word	0x08000b53
 8000ac8:	08000b3f 	.word	0x08000b3f
 8000acc:	08000b53 	.word	0x08000b53
 8000ad0:	08000b53 	.word	0x08000b53
 8000ad4:	08000b53 	.word	0x08000b53
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b53 	.word	0x08000b53
 8000ae0:	08000b53 	.word	0x08000b53
 8000ae4:	08000b53 	.word	0x08000b53
 8000ae8:	08000b43 	.word	0x08000b43
 8000aec:	08000b53 	.word	0x08000b53
 8000af0:	08000b53 	.word	0x08000b53
 8000af4:	08000b53 	.word	0x08000b53
 8000af8:	08000b53 	.word	0x08000b53
 8000afc:	08000b53 	.word	0x08000b53
 8000b00:	08000b53 	.word	0x08000b53
 8000b04:	08000b53 	.word	0x08000b53
 8000b08:	08000b53 	.word	0x08000b53
 8000b0c:	08000b53 	.word	0x08000b53
 8000b10:	08000b53 	.word	0x08000b53
 8000b14:	08000b53 	.word	0x08000b53
 8000b18:	08000b53 	.word	0x08000b53
 8000b1c:	08000b53 	.word	0x08000b53
 8000b20:	08000b53 	.word	0x08000b53
 8000b24:	08000b53 	.word	0x08000b53
 8000b28:	08000b47 	.word	0x08000b47
 8000b2c:	2b40      	cmp	r3, #64	@ 0x40
 8000b2e:	d00c      	beq.n	8000b4a <Get_PinPostion+0x12e>
 8000b30:	e00f      	b.n	8000b52 <Get_PinPostion+0x136>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e00e      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	e00c      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	e00a      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000b3e:	230c      	movs	r3, #12
 8000b40:	e008      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 8000b42:	2310      	movs	r3, #16
 8000b44:	e006      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 8000b46:	2314      	movs	r3, #20
 8000b48:	e004      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000b4a:	2318      	movs	r3, #24
 8000b4c:	e002      	b.n	8000b54 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000b4e:	231c      	movs	r3, #28
 8000b50:	e000      	b.n	8000b54 <Get_PinPostion+0x138>
		break;
	}
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MCAL_GPIO_Init>:
 * 							 the configuration information for the specified GPIO PIN
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_Config_t *pin_config)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	// Port configuration register high (GPIOx_CRH) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *confg_reg = NULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
	uint8_t PinConfig = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
	//see if it's CRL or CRH
	confg_reg = (pin_config->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH ;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	2bff      	cmp	r3, #255	@ 0xff
 8000b78:	d801      	bhi.n	8000b7e <MCAL_GPIO_Init+0x1e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	e001      	b.n	8000b82 <MCAL_GPIO_Init+0x22>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3304      	adds	r3, #4
 8000b82:	60bb      	str	r3, [r7, #8]
	//Reset CNF and MODE
	*confg_reg &= ~(0xf<<Get_PinPostion(pin_config->GPIO_PinNumber));//* because we will write value
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff47 	bl	8000a1c <Get_PinPostion>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	230f      	movs	r3, #15
 8000b94:	4093      	lsls	r3, r2
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	601a      	str	r2, [r3, #0]

	//if it's output
	if((pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_PP)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_OD)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	885b      	ldrh	r3, [r3, #2]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d00b      	beq.n	8000bc2 <MCAL_GPIO_Init+0x62>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	885b      	ldrh	r3, [r3, #2]
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	d007      	beq.n	8000bc2 <MCAL_GPIO_Init+0x62>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	885b      	ldrh	r3, [r3, #2]
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d003      	beq.n	8000bc2 <MCAL_GPIO_Init+0x62>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	885b      	ldrh	r3, [r3, #2]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d10e      	bne.n	8000be0 <MCAL_GPIO_Init+0x80>
		 * 00: General purpose output push-pull
		 * 01: General purpose output Open-drain
		 * 10: Alternate function output Push-pull
		 * 11: Alternate function output Open-drain
		 */
		PinConfig = ((((pin_config->GPIO_PinMode - 4) <<2)|(pin_config->GPIO_PinSpeed))&0xf);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	885b      	ldrh	r3, [r3, #2]
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	889b      	ldrh	r3, [r3, #4]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e02c      	b.n	8000c3a <MCAL_GPIO_Init+0xda>
		 * 01: Floating input
		 * 01: Alternative input
		 * 11: Input with PU or PD
		 * //the diff between PU & PD :=> PU: ODR --> 1  PD: ODR --> 0
		 */
		if((pin_config->GPIO_PinMode == GPIO_MODE_ANALOG)||(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_FLO))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	885b      	ldrh	r3, [r3, #2]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <MCAL_GPIO_Init+0x90>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d107      	bne.n	8000c00 <MCAL_GPIO_Init+0xa0>
		{
			PinConfig = (((pin_config->GPIO_PinMode << 2))&0xf);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e01c      	b.n	8000c3a <MCAL_GPIO_Init+0xda>
		}
		else if(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_AF)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	885b      	ldrh	r3, [r3, #2]
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d102      	bne.n	8000c0e <MCAL_GPIO_Init+0xae>
		{
			PinConfig = (((GPIO_MODE_INPUT_FLO << 2))&0xf);
 8000c08:	2304      	movs	r3, #4
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e015      	b.n	8000c3a <MCAL_GPIO_Init+0xda>
		}
		else
		{
			PinConfig = (((GPIO_MODE_INPUT_PU << 2))&0xf);
 8000c0e:	2308      	movs	r3, #8
 8000c10:	73fb      	strb	r3, [r7, #15]
			if(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	885b      	ldrh	r3, [r3, #2]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d107      	bne.n	8000c2a <MCAL_GPIO_Init+0xca>
				GPIOx->ODR |= pin_config->GPIO_PinNumber;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	8812      	ldrh	r2, [r2, #0]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	e007      	b.n	8000c3a <MCAL_GPIO_Init+0xda>
			else
				GPIOx->ODR &= ~pin_config->GPIO_PinNumber;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	8812      	ldrh	r2, [r2, #0]
 8000c32:	43d2      	mvns	r2, r2
 8000c34:	401a      	ands	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60da      	str	r2, [r3, #12]
		}
	}
	*confg_reg |= (PinConfig<<Get_PinPostion(pin_config->GPIO_PinNumber));
 8000c3a:	7bfc      	ldrb	r4, [r7, #15]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff feeb 	bl	8000a1c <Get_PinPostion>
 8000c46:	4603      	mov	r3, r0
 8000c48:	fa04 f203 	lsl.w	r2, r4, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}

08000c5e <MCAL_GPIO_WRITE_Pin>:
 * @param [in] 	-Value: The value that will write in PIN (Two Values based on @ref GPIO_PIN_STATE >> SET or RESET).
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_GPIO_WRITE_Pin(GPIO_t *GPIOx,uint16_t pinnumber,uint8_t value)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	807b      	strh	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	707b      	strb	r3, [r7, #1]
	//we may write on ODR or on BSRR and BRR

	if(value != GPIO_PIN_RESET)
 8000c6e:	787b      	ldrb	r3, [r7, #1]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <MCAL_GPIO_WRITE_Pin+0x1e>
	{
		//GPIOx->ODR |= pinnumber;
		GPIOx->BSRR = (uint32_t)pinnumber;
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	611a      	str	r2, [r3, #16]
	}
	else
		GPIOx->BRR = (uint32_t)pinnumber;
}
 8000c7a:	e002      	b.n	8000c82 <MCAL_GPIO_WRITE_Pin+0x24>
		GPIOx->BRR = (uint32_t)pinnumber;
 8000c7c:	887a      	ldrh	r2, [r7, #2]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	615a      	str	r2, [r3, #20]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <MCAL_GPIO_WRITE_Port>:
 * @param [in] 	-Value: The value that will write in PORT
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_GPIO_WRITE_Port(GPIO_t *GPIOx,uint8_t value)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR |= (uint32_t)value;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	60da      	str	r2, [r3, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <__libc_init_array>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	4d0c      	ldr	r5, [pc, #48]	@ (8000ce8 <__libc_init_array+0x38>)
 8000cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8000cec <__libc_init_array+0x3c>)
 8000cb8:	1b64      	subs	r4, r4, r5
 8000cba:	10a4      	asrs	r4, r4, #2
 8000cbc:	42a6      	cmp	r6, r4
 8000cbe:	d109      	bne.n	8000cd4 <__libc_init_array+0x24>
 8000cc0:	f000 f81a 	bl	8000cf8 <_init>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	4d0a      	ldr	r5, [pc, #40]	@ (8000cf0 <__libc_init_array+0x40>)
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <__libc_init_array+0x44>)
 8000cca:	1b64      	subs	r4, r4, r5
 8000ccc:	10a4      	asrs	r4, r4, #2
 8000cce:	42a6      	cmp	r6, r4
 8000cd0:	d105      	bne.n	8000cde <__libc_init_array+0x2e>
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd8:	4798      	blx	r3
 8000cda:	3601      	adds	r6, #1
 8000cdc:	e7ee      	b.n	8000cbc <__libc_init_array+0xc>
 8000cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce2:	4798      	blx	r3
 8000ce4:	3601      	adds	r6, #1
 8000ce6:	e7f2      	b.n	8000cce <__libc_init_array+0x1e>
 8000ce8:	08000d20 	.word	0x08000d20
 8000cec:	08000d20 	.word	0x08000d20
 8000cf0:	08000d20 	.word	0x08000d20
 8000cf4:	08000d24 	.word	0x08000d24

08000cf8 <_init>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	bf00      	nop
 8000cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfe:	bc08      	pop	{r3}
 8000d00:	469e      	mov	lr, r3
 8000d02:	4770      	bx	lr

08000d04 <_fini>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr
