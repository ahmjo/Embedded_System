
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000432  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006a  0080006a  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112f  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e2  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146a  00000000  00000000  00001fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00003430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007744  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e8e  00000000  00000000  0000b0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000bf72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001920  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	43 c0       	rjmp	.+134    	; 0x8c <__vector_1>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__vector_2>
   a:	00 00       	nop
   c:	8d c0       	rjmp	.+282    	; 0x128 <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	18 c1       	rjmp	.+560    	; 0x262 <__vector_12>
  32:	00 00       	nop
  34:	40 c1       	rjmp	.+640    	; 0x2b6 <__vector_13>
  36:	00 00       	nop
  38:	65 c1       	rjmp	.+714    	; 0x304 <__vector_14>
  3a:	00 00       	nop
  3c:	8a c1       	rjmp	.+788    	; 0x352 <__vector_15>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e0 c0       	rjmp	.+448    	; 0x20e <__vector_19>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	8c d1       	rcall	.+792    	; 0x3a0 <main>
  88:	d2 c1       	rjmp	.+932    	; 0x42e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <__vector_1>:
 * ===============================================================
 */

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	3f 93       	push	r19
  9a:	4f 93       	push	r20
  9c:	5f 93       	push	r21
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
  ae:	e0 91 6e 00 	lds	r30, 0x006E
  b2:	f0 91 6f 00 	lds	r31, 0x006F
  b6:	09 95       	icall
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	bf 91       	pop	r27
  be:	af 91       	pop	r26
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	7f 91       	pop	r23
  c6:	6f 91       	pop	r22
  c8:	5f 91       	pop	r21
  ca:	4f 91       	pop	r20
  cc:	3f 91       	pop	r19
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
  fc:	e0 91 70 00 	lds	r30, 0x0070
 100:	f0 91 71 00 	lds	r31, 0x0071
 104:	09 95       	icall
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
 14a:	e0 91 72 00 	lds	r30, 0x0072
 14e:	f0 91 73 00 	lds	r31, 0x0073
 152:	09 95       	icall
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <MCAL_I2C_Init>:
	// receive data from master
	TWCR =(1 << 7) | (1 << 6) | (1 << 2);
	while(!(Get_flag_stutus(TWINT)));

	return I2C->TWDR;
}
 176:	fc 01       	movw	r30, r24
 178:	90 93 6b 00 	sts	0x006B, r25
 17c:	80 93 6a 00 	sts	0x006A, r24
 180:	80 81       	ld	r24, Z
 182:	82 b9       	out	0x02, r24	; 2
 184:	86 81       	ldd	r24, Z+6	; 0x06
 186:	81 b9       	out	0x01, r24	; 1
 188:	85 81       	ldd	r24, Z+5	; 0x05
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	39 f4       	brne	.+14     	; 0x19c <MCAL_I2C_Init+0x26>
 18e:	86 b7       	in	r24, 0x36	; 54
 190:	81 60       	ori	r24, 0x01	; 1
 192:	86 bf       	out	0x36, r24	; 54
 194:	8f b7       	in	r24, 0x3f	; 63
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8f bf       	out	0x3f, r24	; 63
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <MCAL_I2C_Init+0x32>
 19c:	96 b7       	in	r25, 0x36	; 54
 19e:	89 23       	and	r24, r25
 1a0:	86 bf       	out	0x36, r24	; 54
 1a2:	8f b7       	in	r24, 0x3f	; 63
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	8f bf       	out	0x3f, r24	; 63
 1a8:	21 81       	ldd	r18, Z+1	; 0x01
 1aa:	32 81       	ldd	r19, Z+2	; 0x02
 1ac:	43 81       	ldd	r20, Z+3	; 0x03
 1ae:	54 81       	ldd	r21, Z+4	; 0x04
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	72 e1       	ldi	r23, 0x12	; 18
 1b4:	8a e7       	ldi	r24, 0x7A	; 122
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	18 d1       	rcall	.+560    	; 0x3ea <__udivmodsi4>
 1ba:	da 01       	movw	r26, r20
 1bc:	c9 01       	movw	r24, r18
 1be:	40 97       	sbiw	r24, 0x10	; 16
 1c0:	a1 09       	sbc	r26, r1
 1c2:	b1 09       	sbc	r27, r1
 1c4:	b6 95       	lsr	r27
 1c6:	a7 95       	ror	r26
 1c8:	97 95       	ror	r25
 1ca:	87 95       	ror	r24
 1cc:	80 b9       	out	0x00, r24	; 0
 1ce:	86 b7       	in	r24, 0x36	; 54
 1d0:	84 64       	ori	r24, 0x44	; 68
 1d2:	86 bf       	out	0x36, r24	; 54
 1d4:	08 95       	ret

000001d6 <I2C_Generate_Start>:
 1d6:	84 ea       	ldi	r24, 0xA4	; 164
 1d8:	86 bf       	out	0x36, r24	; 54
 1da:	06 b6       	in	r0, 0x36	; 54
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <I2C_Generate_Start+0x4>
 1e0:	08 95       	ret

000001e2 <MCAL_I2C_Master_RX>:
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
 1e6:	f7 df       	rcall	.-18     	; 0x1d6 <I2C_Generate_Start>
 1e8:	c1 60       	ori	r28, 0x01	; 1
 1ea:	c3 b9       	out	0x03, r28	; 3
 1ec:	86 b7       	in	r24, 0x36	; 54
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	86 bf       	out	0x36, r24	; 54
 1f2:	06 b6       	in	r0, 0x36	; 54
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <MCAL_I2C_Master_RX+0x10>
 1f8:	86 b7       	in	r24, 0x36	; 54
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	86 bf       	out	0x36, r24	; 54
 1fe:	06 b6       	in	r0, 0x36	; 54
 200:	07 fe       	sbrs	r0, 7
 202:	fd cf       	rjmp	.-6      	; 0x1fe <MCAL_I2C_Master_RX+0x1c>
 204:	83 b1       	in	r24, 0x03	; 3
 206:	94 e9       	ldi	r25, 0x94	; 148
 208:	96 bf       	out	0x36, r25	; 54
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <__vector_19>:
 * ===============================================================
 */

void __vector_19 (void) __attribute__((signal));
void __vector_19 (void)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	g_I2C_Config->P_IRQ_CALL();
 230:	e0 91 6a 00 	lds	r30, 0x006A
 234:	f0 91 6b 00 	lds	r31, 0x006B
 238:	07 80       	ldd	r0, Z+7	; 0x07
 23a:	f0 85       	ldd	r31, Z+8	; 0x08
 23c:	e0 2d       	mov	r30, r0
 23e:	09 95       	icall
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_12>:
 * ===============================================================
 */

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	g_SPI_Config->P_IRQ_CALL() ;
 284:	e0 91 6c 00 	lds	r30, 0x006C
 288:	f0 91 6d 00 	lds	r31, 0x006D
 28c:	07 80       	ldd	r0, Z+7	; 0x07
 28e:	f0 85       	ldd	r31, Z+8	; 0x08
 290:	e0 2d       	mov	r30, r0
 292:	09 95       	icall
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
 2d8:	e0 91 78 00 	lds	r30, 0x0078
 2dc:	f0 91 79 00 	lds	r31, 0x0079
 2e0:	09 95       	icall
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
 326:	e0 91 76 00 	lds	r30, 0x0076
 32a:	f0 91 77 00 	lds	r31, 0x0077
 32e:	09 95       	icall
}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
 374:	e0 91 74 00 	lds	r30, 0x0074
 378:	f0 91 75 00 	lds	r31, 0x0075
 37c:	09 95       	icall
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <main>:
//#define I2C_MODE_SLAVE



int main (void)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	29 97       	sbiw	r28, 0x09	; 9
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
#ifdef I2C_MODE_MASTER
	 I2C_config_t I2C_Config = {
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	e0 e6       	ldi	r30, 0x60	; 96
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	de 01       	movw	r26, r28
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	01 90       	ld	r0, Z+
 3c0:	0d 92       	st	X+, r0
 3c2:	8a 95       	dec	r24
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x1e>
		 .IRQ_EN = I2C_IRQ_ENABLE_Disable,
		 .Prescaler = I2C_Prescaler_1,
		 .P_IRQ_CALL = NULL
	 };

	 MCAL_I2C_Init(&I2C_Config);
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	d5 de       	rcall	.-598    	; 0x176 <MCAL_I2C_Init>
	 DDRA = 0xFF;
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	8a bb       	out	0x1a, r24	; 26

	

	 while (1) {
		uint8_t received_data = MCAL_I2C_Master_RX(0xD0);
 3d0:	80 ed       	ldi	r24, 0xD0	; 208
 3d2:	07 df       	rcall	.-498    	; 0x1e2 <MCAL_I2C_Master_RX>
		PORTA = received_data;
 3d4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	84 e3       	ldi	r24, 0x34	; 52
 3da:	9c e0       	ldi	r25, 0x0C	; 12
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x3c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x46>
 3e6:	00 00       	nop
 3e8:	f3 cf       	rjmp	.-26     	; 0x3d0 <main+0x30>

000003ea <__udivmodsi4>:
 3ea:	a1 e2       	ldi	r26, 0x21	; 33
 3ec:	1a 2e       	mov	r1, r26
 3ee:	aa 1b       	sub	r26, r26
 3f0:	bb 1b       	sub	r27, r27
 3f2:	fd 01       	movw	r30, r26
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__udivmodsi4_ep>

000003f6 <__udivmodsi4_loop>:
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	ee 1f       	adc	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	a2 17       	cp	r26, r18
 400:	b3 07       	cpc	r27, r19
 402:	e4 07       	cpc	r30, r20
 404:	f5 07       	cpc	r31, r21
 406:	20 f0       	brcs	.+8      	; 0x410 <__udivmodsi4_ep>
 408:	a2 1b       	sub	r26, r18
 40a:	b3 0b       	sbc	r27, r19
 40c:	e4 0b       	sbc	r30, r20
 40e:	f5 0b       	sbc	r31, r21

00000410 <__udivmodsi4_ep>:
 410:	66 1f       	adc	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	88 1f       	adc	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	1a 94       	dec	r1
 41a:	69 f7       	brne	.-38     	; 0x3f6 <__udivmodsi4_loop>
 41c:	60 95       	com	r22
 41e:	70 95       	com	r23
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	9b 01       	movw	r18, r22
 426:	ac 01       	movw	r20, r24
 428:	bd 01       	movw	r22, r26
 42a:	cf 01       	movw	r24, r30
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
