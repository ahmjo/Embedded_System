
UART_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009cc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000afc  08000afc  00001afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b14  08000b14  00001b1c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000b14  08000b14  00001b1c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000b14  08000b1c  00001b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b14  08000b14  00001b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b18  08000b18  00001b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000b1c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000b1c  00002060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000158f  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000063f  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a10  00000000  00000000  00003713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00004128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000170  00000000  00000000  000042f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a3b  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a53  00000000  00000000  00006e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a81b  00000000  00000000  000098ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014109  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000570  00000000  00000000  0001414c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ae4 	.word	0x08000ae4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ae4 	.word	0x08000ae4

08000170 <UART_IRQ_CallBack>:


unsigned char ch;

void UART_IRQ_CallBack()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 8000174:	2201      	movs	r2, #1
 8000176:	4905      	ldr	r1, [pc, #20]	@ (800018c <UART_IRQ_CallBack+0x1c>)
 8000178:	4805      	ldr	r0, [pc, #20]	@ (8000190 <UART_IRQ_CallBack+0x20>)
 800017a:	f000 fab9 	bl	80006f0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 800017e:	2200      	movs	r2, #0
 8000180:	4902      	ldr	r1, [pc, #8]	@ (800018c <UART_IRQ_CallBack+0x1c>)
 8000182:	4803      	ldr	r0, [pc, #12]	@ (8000190 <UART_IRQ_CallBack+0x20>)
 8000184:	f000 fa98 	bl	80006b8 <MCAL_UART_SendData>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	2000001c 	.word	0x2000001c
 8000190:	40013800 	.word	0x40013800

08000194 <main>:

int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
	//enable Clock
	RCC_GPIOA_CLK_EN();
 800019a:	4b16      	ldr	r3, [pc, #88]	@ (80001f4 <main+0x60>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a15      	ldr	r2, [pc, #84]	@ (80001f4 <main+0x60>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001a6:	4b13      	ldr	r3, [pc, #76]	@ (80001f4 <main+0x60>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a12      	ldr	r2, [pc, #72]	@ (80001f4 <main+0x60>)
 80001ac:	f043 0308 	orr.w	r3, r3, #8
 80001b0:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 80001b2:	4b10      	ldr	r3, [pc, #64]	@ (80001f4 <main+0x60>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a0f      	ldr	r2, [pc, #60]	@ (80001f4 <main+0x60>)
 80001b8:	f043 0310 	orr.w	r3, r3, #16
 80001bc:	6193      	str	r3, [r2, #24]

	UART_Config_t uartCFG;
	uartCFG.BaudRate = UART_BaudRate_115200;
 80001be:	2388      	movs	r3, #136	@ 0x88
 80001c0:	717b      	strb	r3, [r7, #5]
	uartCFG.HwFlow_CTL = UART_HwFlow_CTL_NONE;
 80001c2:	2300      	movs	r3, #0
 80001c4:	727b      	strb	r3, [r7, #9]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80001c6:	2320      	movs	r3, #32
 80001c8:	72bb      	strb	r3, [r7, #10]
	uartCFG.P_IRQ_CallBack = UART_IRQ_CallBack;
 80001ca:	4b0b      	ldr	r3, [pc, #44]	@ (80001f8 <main+0x64>)
 80001cc:	60fb      	str	r3, [r7, #12]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71bb      	strb	r3, [r7, #6]
	uartCFG.StopBits = UART_StopBits_1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	723b      	strb	r3, [r7, #8]
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 80001d6:	230c      	movs	r3, #12
 80001d8:	713b      	strb	r3, [r7, #4]
	uartCFG.parity = UART_parity_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]

	MCAL_UART_Init(USART1, &uartCFG);
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	4806      	ldr	r0, [pc, #24]	@ (80001fc <main+0x68>)
 80001e4:	f000 f9a4 	bl	8000530 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001e8:	4804      	ldr	r0, [pc, #16]	@ (80001fc <main+0x68>)
 80001ea:	f000 faaf 	bl	800074c <MCAL_UART_GPIO_Set_Pins>

	//loop forever
    while(1)
 80001ee:	bf00      	nop
 80001f0:	e7fd      	b.n	80001ee <main+0x5a>
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	08000171 	.word	0x08000171
 80001fc:	40013800 	.word	0x40013800

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	@ (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	@ (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	@ (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	@ (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	@ (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 fc35 	bl	8000a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ffaf 	bl	8000194 <main>

08000236 <LoopForever>:

LoopForever:
  b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	08000b1c 	.word	0x08000b1c
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	20000060 	.word	0x20000060

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:
 * ****** ISR Functions ****************************
 * *************************************************
*/

void EXTI0_IRQHandler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <EXTI0_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	@ (8000270 <EXTI0_IRQHandler+0x1c>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[0]();
 8000264:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <EXTI0_IRQHandler+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4798      	blx	r3
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	20000020 	.word	0x20000020

08000278 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<1);
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <EXTI1_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	@ (8000294 <EXTI1_IRQHandler+0x1c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[1]();
 8000288:	4b03      	ldr	r3, [pc, #12]	@ (8000298 <EXTI1_IRQHandler+0x20>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000020 	.word	0x20000020

0800029c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<2);
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[2]();
 80002ac:	4b03      	ldr	r3, [pc, #12]	@ (80002bc <EXTI2_IRQHandler+0x20>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4798      	blx	r3
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000020 	.word	0x20000020

080002c0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<3);
 80002c4:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <EXTI3_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <EXTI3_IRQHandler+0x1c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[3]();
 80002d0:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <EXTI3_IRQHandler+0x20>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000020 	.word	0x20000020

080002e4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<4);
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[4]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <EXTI4_IRQHandler+0x20>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	20000020 	.word	0x20000020

08000308 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();}
 800030c:	4b26      	ldr	r3, [pc, #152]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI9_5_IRQHandler+0x22>
 8000318:	4b23      	ldr	r3, [pc, #140]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a22      	ldr	r2, [pc, #136]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b21      	ldr	r3, [pc, #132]	@ (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<6)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[6]();}
 800032a:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI9_5_IRQHandler+0x40>
 8000336:	4b1c      	ldr	r3, [pc, #112]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1b      	ldr	r2, [pc, #108]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	f043 0320 	orr.w	r3, r3, #32
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<7)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[7]();}
 8000348:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI9_5_IRQHandler+0x5e>
 8000354:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a13      	ldr	r2, [pc, #76]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1<<8)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[8]();}
 8000366:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI9_5_IRQHandler+0x7c>
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000380:	6a1b      	ldr	r3, [r3, #32]
 8000382:	4798      	blx	r3
	if(EXTI->PR & (1<<9)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[9]();}
 8000384:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI9_5_IRQHandler+0x9a>
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b03      	ldr	r3, [pc, #12]	@ (80003ac <EXTI9_5_IRQHandler+0xa4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	20000020 	.word	0x20000020

080003b0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[10]();}
 80003b4:	4b2d      	ldr	r3, [pc, #180]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI15_10_IRQHandler+0x22>
 80003c0:	4b2a      	ldr	r3, [pc, #168]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a29      	ldr	r2, [pc, #164]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b28      	ldr	r3, [pc, #160]	@ (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003d0:	4798      	blx	r3
	if(EXTI->PR & (1<<11)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[11]();}
 80003d2:	4b26      	ldr	r3, [pc, #152]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d008      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x40>
 80003de:	4b23      	ldr	r3, [pc, #140]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a22      	ldr	r2, [pc, #136]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	f043 0320 	orr.w	r3, r3, #32
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b21      	ldr	r3, [pc, #132]	@ (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ee:	4798      	blx	r3
	if(EXTI->PR & (1<<12)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[12]();}
 80003f0:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <EXTI15_10_IRQHandler+0x5e>
 80003fc:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a1a      	ldr	r2, [pc, #104]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <EXTI15_10_IRQHandler+0xc0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4798      	blx	r3
	if(EXTI->PR & (1<<13)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[13]();}
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <EXTI15_10_IRQHandler+0x7c>
 800041a:	4b14      	ldr	r3, [pc, #80]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a13      	ldr	r2, [pc, #76]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	f043 0320 	orr.w	r3, r3, #32
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800042a:	4798      	blx	r3
	if(EXTI->PR & (1<<14)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[14]();}
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI15_10_IRQHandler+0x9a>
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0b      	ldr	r2, [pc, #44]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000448:	4798      	blx	r3
	if(EXTI->PR & (1<<15)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[15]();}
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <EXTI15_10_IRQHandler+0xb8>
 8000456:	4b05      	ldr	r3, [pc, #20]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a04      	ldr	r2, [pc, #16]	@ (800046c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	f043 0320 	orr.w	r3, r3, #32
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b03      	ldr	r3, [pc, #12]	@ (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000466:	4798      	blx	r3
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010400 	.word	0x40010400
 8000470:	20000020 	.word	0x20000020

08000474 <MCAL_RCC_GetSYS_CLKFreq>:
const uint8_t AHBprescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};



uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	2b02      	cmp	r3, #2
 8000484:	d00a      	beq.n	800049c <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000486:	2b02      	cmp	r3, #2
 8000488:	d80a      	bhi.n	80004a0 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 800048e:	2b01      	cmp	r3, #1
 8000490:	d002      	beq.n	8000498 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000492:	e005      	b.n	80004a0 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
	case 0:
		return HSI_RC_Clk;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000496:	e004      	b.n	80004a2 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
		break;
	case 1:
		//to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800049a:	e002      	b.n	80004a2 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
		break;
	case 2:
		//to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 800049c:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800049e:	e000      	b.n	80004a2 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
		break;
	}
	return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	000c3500 	.word	0x000c3500
 80004b4:	00f42400 	.word	0x00f42400

080004b8 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	// Bits 7:4HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBprescTable[(RCC->CFGR >> 4) & 0xf]);
 80004bc:	f7ff ffda 	bl	8000474 <MCAL_RCC_GetSYS_CLKFreq>
 80004c0:	4602      	mov	r2, r0
 80004c2:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <MCAL_RCC_GetHCLKFreq+0x20>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	091b      	lsrs	r3, r3, #4
 80004c8:	f003 030f 	and.w	r3, r3, #15
 80004cc:	4903      	ldr	r1, [pc, #12]	@ (80004dc <MCAL_RCC_GetHCLKFreq+0x24>)
 80004ce:	5ccb      	ldrb	r3, [r1, r3]
 80004d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000
 80004dc:	08000b04 	.word	0x08000b04

080004e0 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLKFreq() >> APBprescTable[(RCC->CFGR >> 8) & 0b111]);
 80004e4:	f7ff ffe8 	bl	80004b8 <MCAL_RCC_GetHCLKFreq>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	f003 0307 	and.w	r3, r3, #7
 80004f4:	4903      	ldr	r1, [pc, #12]	@ (8000504 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80004f6:	5ccb      	ldrb	r3, [r1, r3]
 80004f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000
 8000504:	08000afc 	.word	0x08000afc

08000508 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    //Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBprescTable[(RCC->CFGR >> 11) & 0b111]);
 800050c:	f7ff ffd4 	bl	80004b8 <MCAL_RCC_GetHCLKFreq>
 8000510:	4602      	mov	r2, r0
 8000512:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	0adb      	lsrs	r3, r3, #11
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	4903      	ldr	r1, [pc, #12]	@ (800052c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800051e:	5ccb      	ldrb	r3, [r1, r3]
 8000520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000524:	4618      	mov	r0, r3
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	08000afc 	.word	0x08000afc

08000530 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			- NONE
 ==================================================================*/

void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;
	Global_UART_Config = UART_Config;
 800053a:	4a58      	ldr	r2, [pc, #352]	@ (800069c <MCAL_UART_Init+0x16c>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	6013      	str	r3, [r2, #0]

	//Enable the Clock for given USART Peripheral
	if(USARTx == USART1) RCC_USART1_CLK_EN();
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a57      	ldr	r2, [pc, #348]	@ (80006a0 <MCAL_UART_Init+0x170>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <MCAL_UART_Init+0x26>
 8000548:	4b56      	ldr	r3, [pc, #344]	@ (80006a4 <MCAL_UART_Init+0x174>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a55      	ldr	r2, [pc, #340]	@ (80006a4 <MCAL_UART_Init+0x174>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	e014      	b.n	8000580 <MCAL_UART_Init+0x50>
	else if(USARTx == USART2) RCC_USART2_CLK_EN();
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a53      	ldr	r2, [pc, #332]	@ (80006a8 <MCAL_UART_Init+0x178>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <MCAL_UART_Init+0x3c>
 800055e:	4b51      	ldr	r3, [pc, #324]	@ (80006a4 <MCAL_UART_Init+0x174>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a50      	ldr	r2, [pc, #320]	@ (80006a4 <MCAL_UART_Init+0x174>)
 8000564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	e009      	b.n	8000580 <MCAL_UART_Init+0x50>
	else if(USARTx == USART3) RCC_USART3_CLK_EN();
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a4f      	ldr	r2, [pc, #316]	@ (80006ac <MCAL_UART_Init+0x17c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d105      	bne.n	8000580 <MCAL_UART_Init+0x50>
 8000574:	4b4b      	ldr	r3, [pc, #300]	@ (80006a4 <MCAL_UART_Init+0x174>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a4a      	ldr	r2, [pc, #296]	@ (80006a4 <MCAL_UART_Init+0x174>)
 800057a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800057e:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]

	//Enable USART Tx & Rx engines according  to the USART_Mode configuration item
	//USART_CR1  Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60da      	str	r2, [r3, #12]

	//PayLoad Width
	//USART_CR1 Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	7892      	ldrb	r2, [r2, #2]
 80005a2:	431a      	orrs	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	//USARTx->CR1 Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->parity;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	78d2      	ldrb	r2, [r2, #3]
 80005b0:	431a      	orrs	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	431a      	orrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlow_CTL;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	7952      	ldrb	r2, [r2, #5]
 80005cc:	431a      	orrs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if(USARTx == USART1) pclk = MCAL_RCC_GetPCLK2Freq();
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a32      	ldr	r2, [pc, #200]	@ (80006a0 <MCAL_UART_Init+0x170>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d103      	bne.n	80005e2 <MCAL_UART_Init+0xb2>
 80005da:	f7ff ff95 	bl	8000508 <MCAL_RCC_GetPCLK2Freq>
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <MCAL_UART_Init+0xb8>
	else pclk = MCAL_RCC_GetPCLK1Freq();
 80005e2:	f7ff ff7d 	bl	80004e0 <MCAL_RCC_GetPCLK1Freq>
 80005e6:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80005f6:	0119      	lsls	r1, r3, #4
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	4613      	mov	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	009a      	lsls	r2, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	7852      	ldrb	r2, [r2, #1]
 8000608:	0092      	lsls	r2, r2, #2
 800060a:	fbb3 f2f2 	udiv	r2, r3, r2
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	4618      	mov	r0, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	fbb3 f3f0 	udiv	r3, r3, r0
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	fb00 f303 	mul.w	r3, r0, r3
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <MCAL_UART_Init+0x180>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	095b      	lsrs	r3, r3, #5
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	430b      	orrs	r3, r1
 8000634:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR ;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	799b      	ldrb	r3, [r3, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d026      	beq.n	8000692 <MCAL_UART_Init+0x162>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	7992      	ldrb	r2, [r2, #6]
 800064c:	431a      	orrs	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60da      	str	r2, [r3, #12]

		//Enable NVIC For USARTx IRQ
		if(USARTx == USART1) NVIC_IRQ37_USART1_EN;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MCAL_UART_Init+0x170>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <MCAL_UART_Init+0x138>
 800065a:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <MCAL_UART_Init+0x184>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a15      	ldr	r2, [pc, #84]	@ (80006b4 <MCAL_UART_Init+0x184>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2) NVIC_IRQ38_USART2_EN;
		else if(USARTx == USART3) NVIC_IRQ39_USART3_EN;
	}
}
 8000666:	e014      	b.n	8000692 <MCAL_UART_Init+0x162>
		else if(USARTx == USART2) NVIC_IRQ38_USART2_EN;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <MCAL_UART_Init+0x178>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <MCAL_UART_Init+0x14e>
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MCAL_UART_Init+0x184>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MCAL_UART_Init+0x184>)
 8000676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	e009      	b.n	8000692 <MCAL_UART_Init+0x162>
		else if(USARTx == USART3) NVIC_IRQ39_USART3_EN;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <MCAL_UART_Init+0x17c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d105      	bne.n	8000692 <MCAL_UART_Init+0x162>
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MCAL_UART_Init+0x184>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <MCAL_UART_Init+0x184>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000690:	6013      	str	r3, [r2, #0]
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000005c 	.word	0x2000005c
 80006a0:	40013800 	.word	0x40013800
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40004400 	.word	0x40004400
 80006ac:	40004800 	.word	0x40004800
 80006b0:	51eb851f 	.word	0x51eb851f
 80006b4:	e000e104 	.word	0xe000e104

080006b8 <MCAL_UART_SendData>:
 * @param[in]         - PollingEn   Enable pooling or disable it
 *
 * @retval 			  - NONE
 =================================================================*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]

	// wait until TXE flag is set in the SR
	if(PollingEn == enable) while(!(USARTx->SR & 1<<7));
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d106      	bne.n	80006da <MCAL_UART_SendData+0x22>
 80006cc:	bf00      	nop
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f9      	beq.n	80006ce <MCAL_UART_SendData+0x16>
	if(Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
		//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	else
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	605a      	str	r2, [r3, #4]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechism PollingEn )
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	71fb      	strb	r3, [r7, #7]
	// wait until TXE flag is set in the SR
	if(PollingEn == enable) while(!(USARTx->SR & 1<<5));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d106      	bne.n	8000712 <MCAL_UART_ReceiveData+0x22>
 8000704:	bf00      	nop
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <MCAL_UART_ReceiveData+0x16>
		}
	}
	else
	{
		//This is 8bit data
		if (Global_UART_Config->parity == UART_parity_NONE)
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MCAL_UART_ReceiveData+0x58>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d107      	bne.n	800072c <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b29a      	uxth	r2, r3
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	801a      	strh	r2, [r3, #0]
		{
			//Parity is used, so,7 bits will be of user data and 1 bit is parity
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 800072a:	e007      	b.n	800073c <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	b29b      	uxth	r3, r3
 8000732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000736:	b29a      	uxth	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	801a      	strh	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2000005c 	.word	0x2000005c

0800074c <MCAL_UART_GPIO_Set_Pins>:
 * @brief 			- Initializes GPIO Pins
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	GPIO_Config_t PinCfg;
	if(USARTx == USART1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a2b      	ldr	r2, [pc, #172]	@ (8000804 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d118      	bne.n	800078e <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800075c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000760:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000762:	2306      	movs	r3, #6
 8000764:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000766:	2301      	movs	r3, #1
 8000768:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4619      	mov	r1, r3
 8000770:	4825      	ldr	r0, [pc, #148]	@ (8000808 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000772:	f000 f911 	bl	8000998 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077a:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 800077c:	2308      	movs	r3, #8
 800077e:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4619      	mov	r1, r3
 8000786:	4820      	ldr	r0, [pc, #128]	@ (8000808 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000788:	f000 f906 	bl	8000998 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 800078c:	e036      	b.n	80007fc <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a1e      	ldr	r2, [pc, #120]	@ (800080c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d116      	bne.n	80007c4 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000796:	2304      	movs	r3, #4
 8000798:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 800079a:	2306      	movs	r3, #6
 800079c:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 800079e:	2301      	movs	r3, #1
 80007a0:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	4817      	ldr	r0, [pc, #92]	@ (8000808 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80007aa:	f000 f8f5 	bl	8000998 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80007ae:	2308      	movs	r3, #8
 80007b0:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 80007b2:	2308      	movs	r3, #8
 80007b4:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4812      	ldr	r0, [pc, #72]	@ (8000808 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80007be:	f000 f8eb 	bl	8000998 <MCAL_GPIO_Init>
}
 80007c2:	e01b      	b.n	80007fc <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d117      	bne.n	80007fc <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80007cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d0:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80007d2:	2306      	movs	r3, #6
 80007d4:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80007d6:	2301      	movs	r3, #1
 80007d8:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80007e2:	f000 f8d9 	bl	8000998 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80007e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007ea:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 80007ec:	2308      	movs	r3, #8
 80007ee:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80007f8:	f000 f8ce 	bl	8000998 <MCAL_GPIO_Init>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013800 	.word	0x40013800
 8000808:	40010800 	.word	0x40010800
 800080c:	40004400 	.word	0x40004400
 8000810:	40004800 	.word	0x40004800
 8000814:	40010c00 	.word	0x40010c00

08000818 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 800081c:	4b02      	ldr	r3, [pc, #8]	@ (8000828 <USART1_IRQHandler+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	4798      	blx	r3
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000005c 	.word	0x2000005c

0800082c <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000830:	4b02      	ldr	r3, [pc, #8]	@ (800083c <USART2_IRQHandler+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	4798      	blx	r3
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000005c 	.word	0x2000005c

08000840 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000844:	4b02      	ldr	r3, [pc, #8]	@ (8000850 <USART3_IRQHandler+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	4798      	blx	r3
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000005c 	.word	0x2000005c

08000854 <Get_PinPostion>:
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_PinPostion(uint16_t PinNumber)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000864:	f000 808f 	beq.w	8000986 <Get_PinPostion+0x132>
 8000868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800086c:	f300 808d 	bgt.w	800098a <Get_PinPostion+0x136>
 8000870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000874:	f000 8085 	beq.w	8000982 <Get_PinPostion+0x12e>
 8000878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800087c:	f300 8085 	bgt.w	800098a <Get_PinPostion+0x136>
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000884:	d07b      	beq.n	800097e <Get_PinPostion+0x12a>
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800088a:	dc7e      	bgt.n	800098a <Get_PinPostion+0x136>
 800088c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000890:	d073      	beq.n	800097a <Get_PinPostion+0x126>
 8000892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000896:	dc78      	bgt.n	800098a <Get_PinPostion+0x136>
 8000898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800089c:	d06b      	beq.n	8000976 <Get_PinPostion+0x122>
 800089e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008a2:	dc72      	bgt.n	800098a <Get_PinPostion+0x136>
 80008a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008a8:	d063      	beq.n	8000972 <Get_PinPostion+0x11e>
 80008aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008ae:	dc6c      	bgt.n	800098a <Get_PinPostion+0x136>
 80008b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008b4:	d05b      	beq.n	800096e <Get_PinPostion+0x11a>
 80008b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008ba:	dc66      	bgt.n	800098a <Get_PinPostion+0x136>
 80008bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008c0:	d053      	beq.n	800096a <Get_PinPostion+0x116>
 80008c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008c6:	dc60      	bgt.n	800098a <Get_PinPostion+0x136>
 80008c8:	2b80      	cmp	r3, #128	@ 0x80
 80008ca:	d05c      	beq.n	8000986 <Get_PinPostion+0x132>
 80008cc:	2b80      	cmp	r3, #128	@ 0x80
 80008ce:	dc5c      	bgt.n	800098a <Get_PinPostion+0x136>
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	dc47      	bgt.n	8000964 <Get_PinPostion+0x110>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd58      	ble.n	800098a <Get_PinPostion+0x136>
 80008d8:	3b01      	subs	r3, #1
 80008da:	2b1f      	cmp	r3, #31
 80008dc:	d855      	bhi.n	800098a <Get_PinPostion+0x136>
 80008de:	a201      	add	r2, pc, #4	@ (adr r2, 80008e4 <Get_PinPostion+0x90>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	0800096b 	.word	0x0800096b
 80008e8:	0800096f 	.word	0x0800096f
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	08000973 	.word	0x08000973
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	08000977 	.word	0x08000977
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	0800097b 	.word	0x0800097b
 8000924:	0800098b 	.word	0x0800098b
 8000928:	0800098b 	.word	0x0800098b
 800092c:	0800098b 	.word	0x0800098b
 8000930:	0800098b 	.word	0x0800098b
 8000934:	0800098b 	.word	0x0800098b
 8000938:	0800098b 	.word	0x0800098b
 800093c:	0800098b 	.word	0x0800098b
 8000940:	0800098b 	.word	0x0800098b
 8000944:	0800098b 	.word	0x0800098b
 8000948:	0800098b 	.word	0x0800098b
 800094c:	0800098b 	.word	0x0800098b
 8000950:	0800098b 	.word	0x0800098b
 8000954:	0800098b 	.word	0x0800098b
 8000958:	0800098b 	.word	0x0800098b
 800095c:	0800098b 	.word	0x0800098b
 8000960:	0800097f 	.word	0x0800097f
 8000964:	2b40      	cmp	r3, #64	@ 0x40
 8000966:	d00c      	beq.n	8000982 <Get_PinPostion+0x12e>
 8000968:	e00f      	b.n	800098a <Get_PinPostion+0x136>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800096a:	2300      	movs	r3, #0
 800096c:	e00e      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800096e:	2304      	movs	r3, #4
 8000970:	e00c      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000972:	2308      	movs	r3, #8
 8000974:	e00a      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000976:	230c      	movs	r3, #12
 8000978:	e008      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800097a:	2310      	movs	r3, #16
 800097c:	e006      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800097e:	2314      	movs	r3, #20
 8000980:	e004      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000982:	2318      	movs	r3, #24
 8000984:	e002      	b.n	800098c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000986:	231c      	movs	r3, #28
 8000988:	e000      	b.n	800098c <Get_PinPostion+0x138>
		break;
	}
	return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <MCAL_GPIO_Init>:
 * 							 the configuration information for the specified GPIO PIN
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_Config_t *pin_config)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	// Port configuration register high (GPIOx_CRH) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *confg_reg = NULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
	uint8_t PinConfig = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
	//see if it's CRL or CRH
	confg_reg = (pin_config->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH ;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2bff      	cmp	r3, #255	@ 0xff
 80009b0:	d801      	bhi.n	80009b6 <MCAL_GPIO_Init+0x1e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	e001      	b.n	80009ba <MCAL_GPIO_Init+0x22>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3304      	adds	r3, #4
 80009ba:	60bb      	str	r3, [r7, #8]
	//Reset CNF and MODE
	*confg_reg &= ~(0xf<<Get_PinPostion(pin_config->GPIO_PinNumber));//* because we will write value
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff47 	bl	8000854 <Get_PinPostion>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	230f      	movs	r3, #15
 80009cc:	4093      	lsls	r3, r2
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	401a      	ands	r2, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	601a      	str	r2, [r3, #0]

	//if it's output
	if((pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_PP)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_OD)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	885b      	ldrh	r3, [r3, #2]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d00b      	beq.n	80009fa <MCAL_GPIO_Init+0x62>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	885b      	ldrh	r3, [r3, #2]
 80009e6:	2b05      	cmp	r3, #5
 80009e8:	d007      	beq.n	80009fa <MCAL_GPIO_Init+0x62>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d003      	beq.n	80009fa <MCAL_GPIO_Init+0x62>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	885b      	ldrh	r3, [r3, #2]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d10f      	bne.n	8000a1a <MCAL_GPIO_Init+0x82>
		 * 00: General purpose output push-pull
		 * 01: General purpose output Open-drain
		 * 10: Alternate function output Push-pull
		 * 11: Alternate function output Open-drain
		 */
		PinConfig = ((((pin_config->GPIO_PinMode - 4) <<2)|(pin_config->GPIO_PinSpeed))&0xf);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	885b      	ldrh	r3, [r3, #2]
 80009fe:	3b04      	subs	r3, #4
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	b25a      	sxtb	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	889b      	ldrh	r3, [r3, #4]
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e02d      	b.n	8000a76 <MCAL_GPIO_Init+0xde>
		 * 01: Floating input
		 * 01: Alternative input
		 * 11: Input with PU or PD
		 * //the diff between PU & PD :=> PU: ODR --> 1  PD: ODR --> 0
		 */
		if((pin_config->GPIO_PinMode == GPIO_MODE_ANALOG)||(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_FLO))
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	885b      	ldrh	r3, [r3, #2]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d003      	beq.n	8000a2a <MCAL_GPIO_Init+0x92>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	885b      	ldrh	r3, [r3, #2]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d108      	bne.n	8000a3c <MCAL_GPIO_Init+0xa4>
		{
			PinConfig = (((pin_config->GPIO_PinMode << 2))&0xf);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	885b      	ldrh	r3, [r3, #2]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f003 030f 	and.w	r3, r3, #15
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e01c      	b.n	8000a76 <MCAL_GPIO_Init+0xde>
		}
		else if(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_AF)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	885b      	ldrh	r3, [r3, #2]
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d102      	bne.n	8000a4a <MCAL_GPIO_Init+0xb2>
		{
			PinConfig = (((GPIO_MODE_INPUT_FLO << 2))&0xf);
 8000a44:	2304      	movs	r3, #4
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e015      	b.n	8000a76 <MCAL_GPIO_Init+0xde>
		}
		else
		{
			PinConfig = (((GPIO_MODE_INPUT_PU << 2))&0xf);
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	73fb      	strb	r3, [r7, #15]
			if(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	885b      	ldrh	r3, [r3, #2]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d107      	bne.n	8000a66 <MCAL_GPIO_Init+0xce>
				GPIOx->ODR |= pin_config->GPIO_PinNumber;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	8812      	ldrh	r2, [r2, #0]
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	e007      	b.n	8000a76 <MCAL_GPIO_Init+0xde>
			else
				GPIOx->ODR &= ~pin_config->GPIO_PinNumber;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	8812      	ldrh	r2, [r2, #0]
 8000a6e:	43d2      	mvns	r2, r2
 8000a70:	401a      	ands	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60da      	str	r2, [r3, #12]
		}
	}
	*confg_reg |= (PinConfig<<Get_PinPostion(pin_config->GPIO_PinNumber));
 8000a76:	7bfc      	ldrb	r4, [r7, #15]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fee9 	bl	8000854 <Get_PinPostion>
 8000a82:	4603      	mov	r3, r0
 8000a84:	fa04 f203 	lsl.w	r2, r4, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
	...

08000a9c <__libc_init_array>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	4d0c      	ldr	r5, [pc, #48]	@ (8000ad4 <__libc_init_array+0x38>)
 8000aa2:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad8 <__libc_init_array+0x3c>)
 8000aa4:	1b64      	subs	r4, r4, r5
 8000aa6:	10a4      	asrs	r4, r4, #2
 8000aa8:	42a6      	cmp	r6, r4
 8000aaa:	d109      	bne.n	8000ac0 <__libc_init_array+0x24>
 8000aac:	f000 f81a 	bl	8000ae4 <_init>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	4d0a      	ldr	r5, [pc, #40]	@ (8000adc <__libc_init_array+0x40>)
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <__libc_init_array+0x44>)
 8000ab6:	1b64      	subs	r4, r4, r5
 8000ab8:	10a4      	asrs	r4, r4, #2
 8000aba:	42a6      	cmp	r6, r4
 8000abc:	d105      	bne.n	8000aca <__libc_init_array+0x2e>
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac4:	4798      	blx	r3
 8000ac6:	3601      	adds	r6, #1
 8000ac8:	e7ee      	b.n	8000aa8 <__libc_init_array+0xc>
 8000aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ace:	4798      	blx	r3
 8000ad0:	3601      	adds	r6, #1
 8000ad2:	e7f2      	b.n	8000aba <__libc_init_array+0x1e>
 8000ad4:	08000b14 	.word	0x08000b14
 8000ad8:	08000b14 	.word	0x08000b14
 8000adc:	08000b14 	.word	0x08000b14
 8000ae0:	08000b18 	.word	0x08000b18

08000ae4 <_init>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr

08000af0 <_fini>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	bf00      	nop
 8000af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af6:	bc08      	pop	{r3}
 8000af8:	469e      	mov	lr, r3
 8000afa:	4770      	bx	lr
