
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bb  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043b  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cfd  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e4  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000679a  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f8  00000000  00000000  00008926  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00008f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002684  00000000  00000000  00009016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	79 d0       	rcall	.+242    	; 0x17a <main>
  88:	8a c0       	rjmp	.+276    	; 0x19e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  8c:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	83 ed       	ldi	r24, 0xD3	; 211
  90:	90 e3       	ldi	r25, 0x30	; 48
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_kick+0x6>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcd_kick+0xc>
  98:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  9a:	c3 98       	cbi	0x18, 3	; 24
  9c:	08 95       	ret

0000009e <lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  9e:	8a b3       	in	r24, 0x1a	; 26
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  a4:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  a6:	c1 98       	cbi	0x18, 1	; 24
	lcd_kick();
  a8:	f1 df       	rcall	.-30     	; 0x8c <lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	80 6f       	ori	r24, 0xF0	; 240
  ae:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);	
  b0:	c2 98       	cbi	0x18, 2	; 24
  b2:	08 95       	ret

000000b4 <LCD_WRITE_COMMAND>:
}


void LCD_WRITE_COMMAND(unsigned char command){
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	lcd_isbusy();
  b8:	f2 df       	rcall	.-28     	; 0x9e <lcd_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_PORT = command;
  ba:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	89 7f       	andi	r24, 0xF9	; 249
  c0:	88 bb       	out	0x18, r24	; 24
		lcd_kick();
  c2:	e4 df       	rcall	.-56     	; 0x8c <lcd_kick>
		lcd_kick();
		LCD_PORT= (LCD_PORT & 0x0f) | (command << 4);
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		lcd_kick();
	#endif
}
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <LCD_clear_screen>:
ï»¿#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	f4 cf       	rjmp	.-24     	; 0xb4 <LCD_WRITE_COMMAND>
  cc:	08 95       	ret

000000ce <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	31 f4       	brne	.+12     	; 0xde <LCD_GOTO_XY+0x10>
	{
		if (position < 16 && position >= 0)
  d2:	60 31       	cpi	r22, 0x10	; 16
  d4:	58 f4       	brcc	.+22     	; 0xec <LCD_GOTO_XY+0x1e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	86 0f       	add	r24, r22
  da:	ec cf       	rjmp	.-40     	; 0xb4 <LCD_WRITE_COMMAND>
  dc:	08 95       	ret
		}
	}
	if (line == 2)
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	29 f4       	brne	.+10     	; 0xec <LCD_GOTO_XY+0x1e>
	{
		if (position < 16 && position >= 0)
  e2:	60 31       	cpi	r22, 0x10	; 16
  e4:	18 f4       	brcc	.+6      	; 0xec <LCD_GOTO_XY+0x1e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
  e6:	80 ec       	ldi	r24, 0xC0	; 192
  e8:	86 0f       	add	r24, r22
  ea:	e4 cf       	rjmp	.-56     	; 0xb4 <LCD_WRITE_COMMAND>
  ec:	08 95       	ret

000000ee <LCD_INIT>:
  ee:	87 e8       	ldi	r24, 0x87	; 135
  f0:	93 e1       	ldi	r25, 0x13	; 19
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_INIT+0x4>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_INIT+0xa>
  f8:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
  fa:	87 b3       	in	r24, 0x17	; 23
  fc:	8e 60       	ori	r24, 0x0E	; 14
  fe:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 100:	88 b3       	in	r24, 0x18	; 24
 102:	81 7f       	andi	r24, 0xF1	; 241
 104:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a bb       	out	0x1a, r24	; 26
 10a:	85 ea       	ldi	r24, 0xA5	; 165
 10c:	9e e0       	ldi	r25, 0x0E	; 14
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_INIT+0x20>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_INIT+0x26>
 114:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 116:	d8 df       	rcall	.-80     	; 0xc8 <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	cc df       	rcall	.-104    	; 0xb4 <LCD_WRITE_COMMAND>
	
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	ca df       	rcall	.-108    	; 0xb4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	c8 df       	rcall	.-112    	; 0xb4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	c6 cf       	rjmp	.-116    	; 0xb4 <LCD_WRITE_COMMAND>
 128:	08 95       	ret

0000012a <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
	lcd_isbusy();
 12e:	b7 df       	rcall	.-146    	; 0x9e <lcd_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_PORT = character;
 130:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 132:	c2 98       	cbi	0x18, 2	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 134:	c1 9a       	sbi	0x18, 1	; 24
		lcd_kick();
 136:	aa df       	rcall	.-172    	; 0x8c <lcd_kick>
		LCD_PORT= (LCD_PORT & 0x0f) | (character << 4);
		LCD_CTRL &= ~(1 << RW_SWITCH);
		LCD_CTRL |= (1 << RS_SWITCH);
		lcd_kick();
	#endif
}
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
	while (*string) {
 142:	88 81       	ld	r24, Y
 144:	88 23       	and	r24, r24
 146:	29 f0       	breq	.+10     	; 0x152 <LCD_WRITE_STRING+0x16>
 148:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 14a:	ef df       	rcall	.-34     	; 0x12a <LCD_WRITE_CHAR>
		lcd_kick();
	#endif
}

void LCD_WRITE_STRING(char* string) {
	while (*string) {
 14c:	89 91       	ld	r24, Y+
 14e:	81 11       	cpse	r24, r1
 150:	fc cf       	rjmp	.-8      	; 0x14a <LCD_WRITE_STRING+0xe>
		LCD_WRITE_CHAR(*string++);
	}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <UART_Send>:
}

uint8_t UART_ReceiveNoBlock(void)
{
	return UDR;
}
 158:	5d 9b       	sbis	0x0b, 5	; 11
 15a:	fe cf       	rjmp	.-4      	; 0x158 <UART_Send>
 15c:	8c b9       	out	0x0c, r24	; 12
 15e:	08 95       	ret

00000160 <UART_Receive>:
 160:	5f 9b       	sbis	0x0b, 7	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <UART_Receive>
 164:	8c b1       	in	r24, 0x0c	; 12
 166:	08 95       	ret

00000168 <UART_RX_InterruptEnable>:

void UART_RX_InterruptEnable(void)
{
	Set_Bit(UCSRB, RXCIE);
 168:	57 9a       	sbi	0x0a, 7	; 10
 16a:	08 95       	ret

0000016c <UART_Init>:
static uint8_t Rx_AsyncBusy = 0;
static uint8_t Rx_AsyncDone = 0;

void UART_Init(void)
{
	UBRRL = 51;
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	89 b9       	out	0x09, r24	; 9
	CLR_Bit(UCSRA, U2X);
 170:	59 98       	cbi	0x0b, 1	; 11
	Set_Bit(UCSRB, TXEN);
 172:	53 9a       	sbi	0x0a, 3	; 10
	Set_Bit(UCSRB, RXEN);
 174:	54 9a       	sbi	0x0a, 4	; 10
	UART_RX_InterruptEnable();
 176:	f8 cf       	rjmp	.-16     	; 0x168 <UART_RX_InterruptEnable>
 178:	08 95       	ret

0000017a <main>:
#include <stdint.h>
#include <avr/io.h>

int main(void)
{
	LCD_INIT();
 17a:	b9 df       	rcall	.-142    	; 0xee <LCD_INIT>
	UART_Init();
 17c:	f7 df       	rcall	.-18     	; 0x16c <UART_Init>
	
	LCD_GOTO_XY(1,0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	a5 df       	rcall	.-182    	; 0xce <LCD_GOTO_XY>
	LCD_WRITE_STRING("UART Tx");
 184:	80 e6       	ldi	r24, 0x60	; 96
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	d9 df       	rcall	.-78     	; 0x13c <LCD_WRITE_STRING>
	UART_Send('x');
 18a:	88 e7       	ldi	r24, 0x78	; 120
 18c:	e5 df       	rcall	.-54     	; 0x158 <UART_Send>
	UART_Send('y');
 18e:	89 e7       	ldi	r24, 0x79	; 121
 190:	e3 df       	rcall	.-58     	; 0x158 <UART_Send>
	LCD_GOTO_XY(2,0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	9b df       	rcall	.-202    	; 0xce <LCD_GOTO_XY>
	while(1)
	{
		char x = UART_Receive();
 198:	e3 df       	rcall	.-58     	; 0x160 <UART_Receive>
		LCD_WRITE_CHAR(x);
 19a:	c7 df       	rcall	.-114    	; 0x12a <LCD_WRITE_CHAR>
	}
 19c:	fd cf       	rjmp	.-6      	; 0x198 <main+0x1e>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
