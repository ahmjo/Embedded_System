
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f70  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080010a0  080010a0  000020a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b8  080010b8  000020c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080010b8  080010b8  000020c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080010b8  080010c0  000020c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b8  080010b8  000020b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010bc  080010bc  000020bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000020c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  080010c0  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080010c0  00003070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e8e  00000000  00000000  000020e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000893  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d34  00000000  00000000  0000480a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00005540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  00005768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d72  00000000  00000000  00005928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000362a  00000000  00000000  0000869a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000aef1  00000000  00000000  0000bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00016bb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006dc  00000000  00000000  00016bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001088 	.word	0x08001088

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001088 	.word	0x08001088

08000170 <SPI_IRQ_CallBack>:


uint16_t   ch;

void SPI_IRQ_CallBack(struct S_IRQ_SRC irq_src)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	80b8      	strh	r0, [r7, #4]
#ifdef MCU_Act_as_Slave
	if(irq_src.RXNE)
 8000178:	793b      	ldrb	r3, [r7, #4]
 800017a:	f003 0302 	and.w	r3, r3, #2
 800017e:	b2db      	uxtb	r3, r3
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00c      	beq.n	800019e <SPI_IRQ_CallBack+0x2e>
	{
		ch = 0xF;
 8000184:	4b08      	ldr	r3, [pc, #32]	@ (80001a8 <SPI_IRQ_CallBack+0x38>)
 8000186:	220f      	movs	r2, #15
 8000188:	801a      	strh	r2, [r3, #0]
		MCAL_SPI_Tx_Rx(SPI1, &ch, PollingDisable);
 800018a:	2201      	movs	r2, #1
 800018c:	4906      	ldr	r1, [pc, #24]	@ (80001a8 <SPI_IRQ_CallBack+0x38>)
 800018e:	4807      	ldr	r0, [pc, #28]	@ (80001ac <SPI_IRQ_CallBack+0x3c>)
 8000190:	f000 faa4 	bl	80006dc <MCAL_SPI_Tx_Rx>
		MCAL_UART_SendData(USART1, &ch, enable);
 8000194:	2200      	movs	r2, #0
 8000196:	4904      	ldr	r1, [pc, #16]	@ (80001a8 <SPI_IRQ_CallBack+0x38>)
 8000198:	4805      	ldr	r0, [pc, #20]	@ (80001b0 <SPI_IRQ_CallBack+0x40>)
 800019a:	f000 fd17 	bl	8000bcc <MCAL_UART_SendData>
	}
#endif
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	40013000 	.word	0x40013000
 80001b0:	40013800 	.word	0x40013800

080001b4 <UART_IRQ_CallBack>:


void UART_IRQ_CallBack()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	//Send to SPI
	MCAL_GPIO_WRITE_Pin(GPIOA, GPIO_PIN_4, 0);
	MCAL_SPI_Tx_Rx(SPI1, &ch, PollingEnable);
	MCAL_GPIO_WRITE_Pin(GPIOA, GPIO_PIN_4, 1);
#endif
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <main>:

int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b08c      	sub	sp, #48	@ 0x30
 80001c4:	af00      	add	r7, sp, #0
	//enable Clock
	RCC_GPIOA_CLK_EN();
 80001c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000270 <main+0xb0>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a29      	ldr	r2, [pc, #164]	@ (8000270 <main+0xb0>)
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001d2:	4b27      	ldr	r3, [pc, #156]	@ (8000270 <main+0xb0>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a26      	ldr	r2, [pc, #152]	@ (8000270 <main+0xb0>)
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 80001de:	4b24      	ldr	r3, [pc, #144]	@ (8000270 <main+0xb0>)
 80001e0:	699b      	ldr	r3, [r3, #24]
 80001e2:	4a23      	ldr	r2, [pc, #140]	@ (8000270 <main+0xb0>)
 80001e4:	f043 0310 	orr.w	r3, r3, #16
 80001e8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001ea:	4b21      	ldr	r3, [pc, #132]	@ (8000270 <main+0xb0>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	4a20      	ldr	r2, [pc, #128]	@ (8000270 <main+0xb0>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6193      	str	r3, [r2, #24]
	//PA9 TX
	//PA10 RX
	//PA11 CTS
	//PA12 RTS
	UART_Config_t uartCFG;
	uartCFG.BaudRate = UART_BaudRate_115200;
 80001f6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80001fa:	623b      	str	r3, [r7, #32]
	uartCFG.HwFlow_CTL = UART_HwFlow_CTL_NONE;
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000202:	2320      	movs	r3, #32
 8000204:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uartCFG.P_IRQ_CallBack = UART_IRQ_CallBack;
 8000208:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <main+0xb4>)
 800020a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 800020c:	2300      	movs	r3, #0
 800020e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uartCFG.StopBits = UART_StopBits_1;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 8000216:	230c      	movs	r3, #12
 8000218:	773b      	strb	r3, [r7, #28]
	uartCFG.parity = UART_parity_NONE;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	MCAL_UART_Init(USART1, &uartCFG);
 8000220:	f107 031c 	add.w	r3, r7, #28
 8000224:	4619      	mov	r1, r3
 8000226:	4814      	ldr	r0, [pc, #80]	@ (8000278 <main+0xb8>)
 8000228:	f000 fbf6 	bl	8000a18 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 800022c:	4812      	ldr	r0, [pc, #72]	@ (8000278 <main+0xb8>)
 800022e:	f000 fd35 	bl	8000c9c <MCAL_UART_GPIO_Set_Pins>
	// PA6  : SPI1_MISO
	// PA7  : SPI1_MOSI
	SPI_Config_t SPI1CFG;

	//Common configuration
	SPI1CFG.CLKPhase = SPI_CLKPhase_2EDGE;
 8000232:	2301      	movs	r3, #1
 8000234:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.CLKPolarity = SPI_CLKPolarity_HIGH_When_Idle;
 8000236:	2302      	movs	r3, #2
 8000238:	81bb      	strh	r3, [r7, #12]
	SPI1CFG.DataSize = SPI_DataSize_8BIT;
 800023a:	2300      	movs	r3, #0
 800023c:	817b      	strh	r3, [r7, #10]
	SPI1CFG.Frame_format = SPI_Frame_Format_MSB;
 800023e:	2300      	movs	r3, #0
 8000240:	813b      	strh	r3, [r7, #8]
	//Assume by default pclk2 = 8MHZ
	SPI1CFG.SPI_BandRatePrescaler = SPI_BandRatePrescaler_8;
 8000242:	2310      	movs	r3, #16
 8000244:	827b      	strh	r3, [r7, #18]
	SPI1CFG.Communication_Mode = SPI_DIRECTION_2LINES;
 8000246:	2300      	movs	r3, #0
 8000248:	80fb      	strh	r3, [r7, #6]
	//Force the SS (High) Idle Node
	MCAL_GPIO_WRITE_Pin(GPIOA, GPIO_PIN_4, 1);
#endif

#ifdef MCU_Act_as_Slave
	SPI1CFG.Device_Mode = SPI_Device_Mode_SLAVE;
 800024a:	2300      	movs	r3, #0
 800024c:	80bb      	strh	r3, [r7, #4]
	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
 800024e:	2340      	movs	r3, #64	@ 0x40
 8000250:	82bb      	strh	r3, [r7, #20]
	SPI1CFG.NSS = SPI_NSS_HW_Slave;
 8000252:	2300      	movs	r3, #0
 8000254:	823b      	strh	r3, [r7, #16]
	SPI1CFG.P_IRQ_CallBack = SPI_IRQ_CallBack;
 8000256:	4b09      	ldr	r3, [pc, #36]	@ (800027c <main+0xbc>)
 8000258:	61bb      	str	r3, [r7, #24]
#endif
	MCAL_SPI_Init(SPI1, &SPI1CFG);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	4808      	ldr	r0, [pc, #32]	@ (8000280 <main+0xc0>)
 8000260:	f000 f9a8 	bl	80005b4 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000264:	4806      	ldr	r0, [pc, #24]	@ (8000280 <main+0xc0>)
 8000266:	f000 fa91 	bl	800078c <MCAL_SPI_GPIO_Set_Pins>

	//loop forever
	while(1)
 800026a:	bf00      	nop
 800026c:	e7fd      	b.n	800026a <main+0xaa>
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	080001b5 	.word	0x080001b5
 8000278:	40013800 	.word	0x40013800
 800027c:	08000171 	.word	0x08000171
 8000280:	40013000 	.word	0x40013000

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	@ (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	@ (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	@ (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 fec5 	bl	8001040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff83 	bl	80001c0 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	080010c0 	.word	0x080010c0
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	20000070 	.word	0x20000070

080002d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <EXTI0_IRQHandler>:
 * ****** ISR Functions ****************************
 * *************************************************
*/

void EXTI0_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<0);
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <EXTI0_IRQHandler+0x1c>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <EXTI0_IRQHandler+0x1c>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[0]();
 80002e8:	4b03      	ldr	r3, [pc, #12]	@ (80002f8 <EXTI0_IRQHandler+0x20>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4798      	blx	r3
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010400 	.word	0x40010400
 80002f8:	20000020 	.word	0x20000020

080002fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<1);
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <EXTI1_IRQHandler+0x1c>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <EXTI1_IRQHandler+0x1c>)
 8000306:	f043 0302 	orr.w	r3, r3, #2
 800030a:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[1]();
 800030c:	4b03      	ldr	r3, [pc, #12]	@ (800031c <EXTI1_IRQHandler+0x20>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4798      	blx	r3
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010400 	.word	0x40010400
 800031c:	20000020 	.word	0x20000020

08000320 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<2);
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <EXTI2_IRQHandler+0x1c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <EXTI2_IRQHandler+0x1c>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[2]();
 8000330:	4b03      	ldr	r3, [pc, #12]	@ (8000340 <EXTI2_IRQHandler+0x20>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4798      	blx	r3
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010400 	.word	0x40010400
 8000340:	20000020 	.word	0x20000020

08000344 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<3);
 8000348:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <EXTI3_IRQHandler+0x1c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <EXTI3_IRQHandler+0x1c>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[3]();
 8000354:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <EXTI3_IRQHandler+0x20>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4798      	blx	r3
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400
 8000364:	20000020 	.word	0x20000020

08000368 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit (EXTI_PR)
	EXTI->PR |= (1<<4);
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <EXTI4_IRQHandler+0x1c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <EXTI4_IRQHandler+0x1c>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6153      	str	r3, [r2, #20]
	//Call IRQ Call
	GP_IRQ_CallBack[4]();
 8000378:	4b03      	ldr	r3, [pc, #12]	@ (8000388 <EXTI4_IRQHandler+0x20>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	4798      	blx	r3
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010400 	.word	0x40010400
 8000388:	20000020 	.word	0x20000020

0800038c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();}
 8000390:	4b26      	ldr	r3, [pc, #152]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	2b00      	cmp	r3, #0
 800039a:	d008      	beq.n	80003ae <EXTI9_5_IRQHandler+0x22>
 800039c:	4b23      	ldr	r3, [pc, #140]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a22      	ldr	r2, [pc, #136]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6153      	str	r3, [r2, #20]
 80003a8:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <EXTI9_5_IRQHandler+0xa4>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4798      	blx	r3
	if(EXTI->PR & (1<<6)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[6]();}
 80003ae:	4b1f      	ldr	r3, [pc, #124]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d008      	beq.n	80003cc <EXTI9_5_IRQHandler+0x40>
 80003ba:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a1b      	ldr	r2, [pc, #108]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	f043 0320 	orr.w	r3, r3, #32
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000430 <EXTI9_5_IRQHandler+0xa4>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4798      	blx	r3
	if(EXTI->PR & (1<<7)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[7]();}
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d008      	beq.n	80003ea <EXTI9_5_IRQHandler+0x5e>
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a13      	ldr	r2, [pc, #76]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6153      	str	r3, [r2, #20]
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <EXTI9_5_IRQHandler+0xa4>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	4798      	blx	r3
	if(EXTI->PR & (1<<8)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[8]();}
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <EXTI9_5_IRQHandler+0x7c>
 80003f6:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a0c      	ldr	r2, [pc, #48]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <EXTI9_5_IRQHandler+0xa4>)
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	4798      	blx	r3
	if(EXTI->PR & (1<<9)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[9]();}
 8000408:	4b08      	ldr	r3, [pc, #32]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <EXTI9_5_IRQHandler+0x9a>
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a04      	ldr	r2, [pc, #16]	@ (800042c <EXTI9_5_IRQHandler+0xa0>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6153      	str	r3, [r2, #20]
 8000420:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <EXTI9_5_IRQHandler+0xa4>)
 8000422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000424:	4798      	blx	r3
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010400 	.word	0x40010400
 8000430:	20000020 	.word	0x20000020

08000434 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[10]();}
 8000438:	4b2d      	ldr	r3, [pc, #180]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000440:	2b00      	cmp	r3, #0
 8000442:	d008      	beq.n	8000456 <EXTI15_10_IRQHandler+0x22>
 8000444:	4b2a      	ldr	r3, [pc, #168]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a29      	ldr	r2, [pc, #164]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6153      	str	r3, [r2, #20]
 8000450:	4b28      	ldr	r3, [pc, #160]	@ (80004f4 <EXTI15_10_IRQHandler+0xc0>)
 8000452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000454:	4798      	blx	r3
	if(EXTI->PR & (1<<11)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[11]();}
 8000456:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800045e:	2b00      	cmp	r3, #0
 8000460:	d008      	beq.n	8000474 <EXTI15_10_IRQHandler+0x40>
 8000462:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a22      	ldr	r2, [pc, #136]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	f043 0320 	orr.w	r3, r3, #32
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b21      	ldr	r3, [pc, #132]	@ (80004f4 <EXTI15_10_IRQHandler+0xc0>)
 8000470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000472:	4798      	blx	r3
	if(EXTI->PR & (1<<12)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[12]();}
 8000474:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800047c:	2b00      	cmp	r3, #0
 800047e:	d008      	beq.n	8000492 <EXTI15_10_IRQHandler+0x5e>
 8000480:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6153      	str	r3, [r2, #20]
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <EXTI15_10_IRQHandler+0xc0>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4798      	blx	r3
	if(EXTI->PR & (1<<13)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[13]();}
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800049a:	2b00      	cmp	r3, #0
 800049c:	d008      	beq.n	80004b0 <EXTI15_10_IRQHandler+0x7c>
 800049e:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a13      	ldr	r2, [pc, #76]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	f043 0320 	orr.w	r3, r3, #32
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <EXTI15_10_IRQHandler+0xc0>)
 80004ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ae:	4798      	blx	r3
	if(EXTI->PR & (1<<14)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[14]();}
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d008      	beq.n	80004ce <EXTI15_10_IRQHandler+0x9a>
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6153      	str	r3, [r2, #20]
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <EXTI15_10_IRQHandler+0xc0>)
 80004ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004cc:	4798      	blx	r3
	if(EXTI->PR & (1<<15)){EXTI->PR |= (1<<5);	GP_IRQ_CallBack[15]();}
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d008      	beq.n	80004ec <EXTI15_10_IRQHandler+0xb8>
 80004da:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <EXTI15_10_IRQHandler+0xc0>)
 80004e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004ea:	4798      	blx	r3
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40010400 	.word	0x40010400
 80004f4:	20000020 	.word	0x20000020

080004f8 <MCAL_RCC_GetSYS_CLKFreq>:
const uint8_t AHBprescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};



uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	f003 0303 	and.w	r3, r3, #3
 8000506:	2b02      	cmp	r3, #2
 8000508:	d00a      	beq.n	8000520 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 800050a:	2b02      	cmp	r3, #2
 800050c:	d80a      	bhi.n	8000524 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000512:	2b01      	cmp	r3, #1
 8000514:	d002      	beq.n	800051c <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000516:	e005      	b.n	8000524 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
	case 0:
		return HSI_RC_Clk;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 800051a:	e004      	b.n	8000526 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
		break;
	case 1:
		//to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800051e:	e002      	b.n	8000526 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
		break;
	case 2:
		//to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000522:	e000      	b.n	8000526 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
		break;
	}
	return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	007a1200 	.word	0x007a1200
 8000538:	00f42400 	.word	0x00f42400

0800053c <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	// Bits 7:4HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBprescTable[(RCC->CFGR >> 4) & 0xf]);
 8000540:	f7ff ffda 	bl	80004f8 <MCAL_RCC_GetSYS_CLKFreq>
 8000544:	4602      	mov	r2, r0
 8000546:	4b05      	ldr	r3, [pc, #20]	@ (800055c <MCAL_RCC_GetHCLKFreq+0x20>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	091b      	lsrs	r3, r3, #4
 800054c:	f003 030f 	and.w	r3, r3, #15
 8000550:	4903      	ldr	r1, [pc, #12]	@ (8000560 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000552:	5ccb      	ldrb	r3, [r1, r3]
 8000554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	080010a8 	.word	0x080010a8

08000564 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLKFreq() >> APBprescTable[(RCC->CFGR >> 8) & 0b111]);
 8000568:	f7ff ffe8 	bl	800053c <MCAL_RCC_GetHCLKFreq>
 800056c:	4602      	mov	r2, r0
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	f003 0307 	and.w	r3, r3, #7
 8000578:	4903      	ldr	r1, [pc, #12]	@ (8000588 <MCAL_RCC_GetPCLK1Freq+0x24>)
 800057a:	5ccb      	ldrb	r3, [r1, r3]
 800057c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000580:	4618      	mov	r0, r3
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	080010a0 	.word	0x080010a0

0800058c <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    //Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBprescTable[(RCC->CFGR >> 11) & 0b111]);
 8000590:	f7ff ffd4 	bl	800053c <MCAL_RCC_GetHCLKFreq>
 8000594:	4602      	mov	r2, r0
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	0adb      	lsrs	r3, r3, #11
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	4903      	ldr	r1, [pc, #12]	@ (80005b0 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005a2:	5ccb      	ldrb	r3, [r1, r3]
 80005a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	080010a0 	.word	0x080010a0

080005b4 <MCAL_SPI_Init>:
 * @param [in] 		- SPI_Config: pointer to a structure that contains the configuration information for SPI (Master/Slave, Clock Polarity, Phase, etc.)
 * @retval 			- NONE
 * Note				- This function enables the SPI clock and configures the SPI CR1 and CR2 registers.
 ==================================================================*/
void MCAL_SPI_Init(SPI_t* SPIx, SPI_Config_t* SPI_Config)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	//Sefety for registers
	uint16_t tmpreg_CR1 = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a3f      	ldr	r2, [pc, #252]	@ (80006c8 <MCAL_SPI_Init+0x114>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d109      	bne.n	80005e2 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_Config;
 80005ce:	4a3f      	ldr	r2, [pc, #252]	@ (80006cc <MCAL_SPI_Init+0x118>)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80005d4:	4b3e      	ldr	r3, [pc, #248]	@ (80006d0 <MCAL_SPI_Init+0x11c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a3d      	ldr	r2, [pc, #244]	@ (80006d0 <MCAL_SPI_Init+0x11c>)
 80005da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	e00c      	b.n	80005fc <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a3b      	ldr	r2, [pc, #236]	@ (80006d4 <MCAL_SPI_Init+0x120>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d108      	bne.n	80005fc <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_Config;
 80005ea:	4a38      	ldr	r2, [pc, #224]	@ (80006cc <MCAL_SPI_Init+0x118>)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80005f0:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <MCAL_SPI_Init+0x11c>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <MCAL_SPI_Init+0x11c>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI CR1:Bit6 SPE: SPI enable
	tmpreg_CR1 = (0x1<<6);
 80005fc:	2340      	movs	r3, #64	@ 0x40
 80005fe:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |= SPI_Config->Device_Mode;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	881a      	ldrh	r2, [r3, #0]
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	4313      	orrs	r3, r2
 8000608:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |= SPI_Config->Communication_Mode;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	885a      	ldrh	r2, [r3, #2]
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	4313      	orrs	r3, r2
 8000612:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |= SPI_Config->Frame_format;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	889a      	ldrh	r2, [r3, #4]
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	4313      	orrs	r3, r2
 800061c:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |= SPI_Config->DataSize;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	88da      	ldrh	r2, [r3, #6]
 8000622:	89fb      	ldrh	r3, [r7, #14]
 8000624:	4313      	orrs	r3, r2
 8000626:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |= SPI_Config->CLKPhase;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	895a      	ldrh	r2, [r3, #10]
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	4313      	orrs	r3, r2
 8000630:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |= SPI_Config->CLKPolarity;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	891a      	ldrh	r2, [r3, #8]
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	4313      	orrs	r3, r2
 800063a:	81fb      	strh	r3, [r7, #14]

	//=======================NSS==============================
	if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_OP_EN)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	2b04      	cmp	r3, #4
 8000642:	d105      	bne.n	8000650 <MCAL_SPI_Init+0x9c>
	{
		tmpreg_CR2 |= SPI_Config->NSS;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	899a      	ldrh	r2, [r3, #12]
 8000648:	89bb      	ldrh	r3, [r7, #12]
 800064a:	4313      	orrs	r3, r2
 800064c:	81bb      	strh	r3, [r7, #12]
 800064e:	e00d      	b.n	800066c <MCAL_SPI_Init+0xb8>
	}
	else if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_OP_Disable)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	899b      	ldrh	r3, [r3, #12]
 8000654:	2b05      	cmp	r3, #5
 8000656:	d104      	bne.n	8000662 <MCAL_SPI_Init+0xae>
	{
		tmpreg_CR2 &= ~(0x1U<<2);
 8000658:	89bb      	ldrh	r3, [r7, #12]
 800065a:	f023 0304 	bic.w	r3, r3, #4
 800065e:	81bb      	strh	r3, [r7, #12]
 8000660:	e004      	b.n	800066c <MCAL_SPI_Init+0xb8>
	}
	else
	{
		tmpreg_CR1 |= SPI_Config->NSS;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	899a      	ldrh	r2, [r3, #12]
 8000666:	89fb      	ldrh	r3, [r7, #14]
 8000668:	4313      	orrs	r3, r2
 800066a:	81fb      	strh	r3, [r7, #14]
	}
	//========================================================
	//SPI_BandRatePrescaler
	tmpreg_CR1 |= SPI_Config->SPI_BandRatePrescaler;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	89da      	ldrh	r2, [r3, #14]
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	4313      	orrs	r3, r2
 8000674:	81fb      	strh	r3, [r7, #14]

	//Interrupt
	if(SPI_Config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	8a1b      	ldrh	r3, [r3, #16]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d019      	beq.n	80006b2 <MCAL_SPI_Init+0xfe>
	{
		tmpreg_CR2 |= SPI_Config->IRQ_Enable;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	8a1a      	ldrh	r2, [r3, #16]
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MCAL_SPI_Init+0x114>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <MCAL_SPI_Init+0xea>
		{
			NVIC_IRQ35_SPI1_EN;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MCAL_SPI_Init+0x124>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <MCAL_SPI_Init+0x124>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	e009      	b.n	80006b2 <MCAL_SPI_Init+0xfe>
		}
		else if(SPIx == SPI2)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <MCAL_SPI_Init+0x120>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d105      	bne.n	80006b2 <MCAL_SPI_Init+0xfe>
		{
			NVIC_IRQ36_SPI2_EN;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MCAL_SPI_Init+0x124>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <MCAL_SPI_Init+0x124>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6013      	str	r3, [r2, #0]
		}
	}


	SPIx->CR1 = tmpreg_CR1;
 80006b2:	89fa      	ldrh	r2, [r7, #14]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpreg_CR2;
 80006b8:	89ba      	ldrh	r2, [r7, #12]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	605a      	str	r2, [r3, #4]
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40013000 	.word	0x40013000
 80006cc:	2000005c 	.word	0x2000005c
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40003800 	.word	0x40003800
 80006d8:	e000e104 	.word	0xe000e104

080006dc <MCAL_SPI_Tx_Rx>:
 * Note				- In full-duplex SPI, sending and receiving occur simultaneously.
 * 					  This function sends the data in *pTxBuffer and overwrites it with received data.
 ==================================================================*/

void MCAL_SPI_Tx_Rx(SPI_t* SPIx, uint16_t* pTxBuffer, enum PollingMechism PollingEn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == PollingEnable)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <MCAL_SPI_Tx_Rx+0x22>
		while(!(SPIx->SR & SPI_SR_TXE));
 80006f0:	bf00      	nop
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <MCAL_SPI_Tx_Rx+0x16>

	if(Global_SPI_Config[SPIx == SPI1 ? SPI1_Index : SPI2_Index]->DataSize == SPI_DataSize_16BIT)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <MCAL_SPI_Tx_Rx+0xa8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MCAL_SPI_Tx_Rx+0xac>)
 8000710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000714:	88db      	ldrh	r3, [r3, #6]
 8000716:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800071a:	d105      	bne.n	8000728 <MCAL_SPI_Tx_Rx+0x4c>
	{
		SPIx->DR = *pTxBuffer;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	e004      	b.n	8000732 <MCAL_SPI_Tx_Rx+0x56>
	}
	else
	{
		*((uint8_t*)&SPIx->DR) = *((uint8_t*)pTxBuffer);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	330c      	adds	r3, #12
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	701a      	strb	r2, [r3, #0]
	}



	if(PollingEn == PollingEnable)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <MCAL_SPI_Tx_Rx+0x6a>
		while(!(SPIx->SR & SPI_SR_RXNE));
 8000738:	bf00      	nop
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f9      	beq.n	800073a <MCAL_SPI_Tx_Rx+0x5e>

	if(Global_SPI_Config[SPIx == SPI1 ? SPI1_Index : SPI2_Index]->DataSize == SPI_DataSize_16BIT)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <MCAL_SPI_Tx_Rx+0xa8>)
 800074a:	4293      	cmp	r3, r2
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MCAL_SPI_Tx_Rx+0xac>)
 8000758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800075c:	88db      	ldrh	r3, [r3, #6]
 800075e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000762:	d105      	bne.n	8000770 <MCAL_SPI_Tx_Rx+0x94>
	{
		*pTxBuffer = SPIx->DR;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	b29a      	uxth	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		*((uint8_t*)pTxBuffer) = *((uint8_t*)&SPIx->DR);
	}
}
 800076e:	e004      	b.n	800077a <MCAL_SPI_Tx_Rx+0x9e>
		*((uint8_t*)pTxBuffer) = *((uint8_t*)&SPIx->DR);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	330c      	adds	r3, #12
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	701a      	strb	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40013000 	.word	0x40013000
 8000788:	2000005c 	.word	0x2000005c

0800078c <MCAL_SPI_GPIO_Set_Pins>:
 * 							SCK and MOSI are configured as Input Floating
 * 							MISO is configured as Alternate Function Push-Pull output
 * 					  - NSS pin is configured only if hardware slave management is enabled.
 ==================================================================*/
void MCAL_SPI_GPIO_Set_Pins(SPI_t* SPIx)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	GPIO_Config_t PinCfg;
	uint8_t SPI_Index;
	GPIO_t * GPIO_Port;

	if (SPIx == SPI1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a6d      	ldr	r2, [pc, #436]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d104      	bne.n	80007a6 <MCAL_SPI_GPIO_Set_Pins+0x1a>
	{
		SPI_Index = SPI1_Index;
 800079c:	2300      	movs	r3, #0
 800079e:	75fb      	strb	r3, [r7, #23]
		GPIO_Port = GPIOA;
 80007a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000950 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	e008      	b.n	80007b8 <MCAL_SPI_GPIO_Set_Pins+0x2c>
	}
	else if (SPIx == SPI2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a6a      	ldr	r2, [pc, #424]	@ (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1c8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	f040 80c7 	bne.w	800093e <MCAL_SPI_GPIO_Set_Pins+0x1b2>
	{
		SPI_Index = SPI2_Index;
 80007b0:	2301      	movs	r3, #1
 80007b2:	75fb      	strb	r3, [r7, #23]
		GPIO_Port = GPIOB;
 80007b4:	4b68      	ldr	r3, [pc, #416]	@ (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1cc>)
 80007b6:	613b      	str	r3, [r7, #16]
	else
	{
		return;
	}

	if (Global_SPI_Config[SPI_Index] == NULL)
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	4a68      	ldr	r2, [pc, #416]	@ (800095c <MCAL_SPI_GPIO_Set_Pins+0x1d0>)
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f000 80be 	beq.w	8000942 <MCAL_SPI_GPIO_Set_Pins+0x1b6>
		return;

	if (Global_SPI_Config[SPI_Index]->Device_Mode == SPI_Device_Mode_MASTER)
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	4a64      	ldr	r2, [pc, #400]	@ (800095c <MCAL_SPI_GPIO_Set_Pins+0x1d0>)
 80007ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d166      	bne.n	80008a2 <MCAL_SPI_GPIO_Set_Pins+0x116>
	{
		switch (Global_SPI_Config[SPI_Index]->NSS)
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	4a61      	ldr	r2, [pc, #388]	@ (800095c <MCAL_SPI_GPIO_Set_Pins+0x1d0>)
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d013      	beq.n	800080a <MCAL_SPI_GPIO_Set_Pins+0x7e>
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	d125      	bne.n	8000832 <MCAL_SPI_GPIO_Set_Pins+0xa6>
		{
		case SPI_NSS_HW_Master_SS_OP_Disable:
			PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_4 : GPIO_PIN_12;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a58      	ldr	r2, [pc, #352]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <MCAL_SPI_GPIO_Set_Pins+0x66>
 80007ee:	2310      	movs	r3, #16
 80007f0:	e001      	b.n	80007f6 <MCAL_SPI_GPIO_Set_Pins+0x6a>
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	813b      	strh	r3, [r7, #8]
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 80007f8:	2301      	movs	r3, #1
 80007fa:	817b      	strh	r3, [r7, #10]
			MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4619      	mov	r1, r3
 8000802:	6938      	ldr	r0, [r7, #16]
 8000804:	f000 fb9a 	bl	8000f3c <MCAL_GPIO_Init>
			break;
 8000808:	e013      	b.n	8000832 <MCAL_SPI_GPIO_Set_Pins+0xa6>
		case SPI_NSS_HW_Master_SS_OP_EN:
			PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_4 : GPIO_PIN_12;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a4f      	ldr	r2, [pc, #316]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <MCAL_SPI_GPIO_Set_Pins+0x8a>
 8000812:	2310      	movs	r3, #16
 8000814:	e001      	b.n	800081a <MCAL_SPI_GPIO_Set_Pins+0x8e>
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	813b      	strh	r3, [r7, #8]
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 800081c:	2306      	movs	r3, #6
 800081e:	817b      	strh	r3, [r7, #10]
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000820:	2301      	movs	r3, #1
 8000822:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	6938      	ldr	r0, [r7, #16]
 800082c:	f000 fb86 	bl	8000f3c <MCAL_GPIO_Init>
			break;
 8000830:	bf00      	nop
		}

		PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_5 : GPIO_PIN_13;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a45      	ldr	r2, [pc, #276]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <MCAL_SPI_GPIO_Set_Pins+0xb2>
 800083a:	2320      	movs	r3, #32
 800083c:	e001      	b.n	8000842 <MCAL_SPI_GPIO_Set_Pins+0xb6>
 800083e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000842:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000844:	2306      	movs	r3, #6
 8000846:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000848:	2301      	movs	r3, #1
 800084a:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4619      	mov	r1, r3
 8000852:	6938      	ldr	r0, [r7, #16]
 8000854:	f000 fb72 	bl	8000f3c <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_6 : GPIO_PIN_14;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a3c      	ldr	r2, [pc, #240]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d101      	bne.n	8000864 <MCAL_SPI_GPIO_Set_Pins+0xd8>
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	e001      	b.n	8000868 <MCAL_SPI_GPIO_Set_Pins+0xdc>
 8000864:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000868:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 800086a:	2301      	movs	r3, #1
 800086c:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	6938      	ldr	r0, [r7, #16]
 8000876:	f000 fb61 	bl	8000f3c <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_7 : GPIO_PIN_15;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a33      	ldr	r2, [pc, #204]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <MCAL_SPI_GPIO_Set_Pins+0xfa>
 8000882:	2380      	movs	r3, #128	@ 0x80
 8000884:	e001      	b.n	800088a <MCAL_SPI_GPIO_Set_Pins+0xfe>
 8000886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800088a:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 800088c:	2306      	movs	r3, #6
 800088e:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000890:	2301      	movs	r3, #1
 8000892:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4619      	mov	r1, r3
 800089a:	6938      	ldr	r0, [r7, #16]
 800089c:	f000 fb4e 	bl	8000f3c <MCAL_GPIO_Init>
 80008a0:	e050      	b.n	8000944 <MCAL_SPI_GPIO_Set_Pins+0x1b8>
	}
	else
	{
		PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_5 : GPIO_PIN_13;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a29      	ldr	r2, [pc, #164]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <MCAL_SPI_GPIO_Set_Pins+0x122>
 80008aa:	2320      	movs	r3, #32
 80008ac:	e001      	b.n	80008b2 <MCAL_SPI_GPIO_Set_Pins+0x126>
 80008ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b2:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 80008b4:	2301      	movs	r3, #1
 80008b6:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	6938      	ldr	r0, [r7, #16]
 80008c0:	f000 fb3c 	bl	8000f3c <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_7 : GPIO_PIN_15;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a21      	ldr	r2, [pc, #132]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d101      	bne.n	80008d0 <MCAL_SPI_GPIO_Set_Pins+0x144>
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	e001      	b.n	80008d4 <MCAL_SPI_GPIO_Set_Pins+0x148>
 80008d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008d4:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 80008d6:	2301      	movs	r3, #1
 80008d8:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4619      	mov	r1, r3
 80008e0:	6938      	ldr	r0, [r7, #16]
 80008e2:	f000 fb2b 	bl	8000f3c <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_6 : GPIO_PIN_14;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a18      	ldr	r2, [pc, #96]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <MCAL_SPI_GPIO_Set_Pins+0x166>
 80008ee:	2340      	movs	r3, #64	@ 0x40
 80008f0:	e001      	b.n	80008f6 <MCAL_SPI_GPIO_Set_Pins+0x16a>
 80008f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f6:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80008f8:	2306      	movs	r3, #6
 80008fa:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80008fc:	2301      	movs	r3, #1
 80008fe:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	4619      	mov	r1, r3
 8000906:	6938      	ldr	r0, [r7, #16]
 8000908:	f000 fb18 	bl	8000f3c <MCAL_GPIO_Init>

		if (Global_SPI_Config[SPI_Index]->NSS == SPI_NSS_HW_Slave)
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	4a13      	ldr	r2, [pc, #76]	@ (800095c <MCAL_SPI_GPIO_Set_Pins+0x1d0>)
 8000910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000914:	899b      	ldrh	r3, [r3, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d114      	bne.n	8000944 <MCAL_SPI_GPIO_Set_Pins+0x1b8>
		{
			PinCfg.GPIO_PinNumber = (SPIx == SPI1) ? GPIO_PIN_4 : GPIO_PIN_12;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a0b      	ldr	r2, [pc, #44]	@ (800094c <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d101      	bne.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x19a>
 8000922:	2310      	movs	r3, #16
 8000924:	e001      	b.n	800092a <MCAL_SPI_GPIO_Set_Pins+0x19e>
 8000926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092a:	813b      	strh	r3, [r7, #8]
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 800092c:	2301      	movs	r3, #1
 800092e:	817b      	strh	r3, [r7, #10]
			MCAL_GPIO_Init(GPIO_Port, &PinCfg);
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4619      	mov	r1, r3
 8000936:	6938      	ldr	r0, [r7, #16]
 8000938:	f000 fb00 	bl	8000f3c <MCAL_GPIO_Init>
 800093c:	e002      	b.n	8000944 <MCAL_SPI_GPIO_Set_Pins+0x1b8>
		return;
 800093e:	bf00      	nop
 8000940:	e000      	b.n	8000944 <MCAL_SPI_GPIO_Set_Pins+0x1b8>
		return;
 8000942:	bf00      	nop
		}
	}
}
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013000 	.word	0x40013000
 8000950:	40010800 	.word	0x40010800
 8000954:	40003800 	.word	0x40003800
 8000958:	40010c00 	.word	0x40010c00
 800095c:	2000005c 	.word	0x2000005c

08000960 <SPI1_IRQHandler>:
 * =======================================================================================
 */


void SPI1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <SPI1_IRQHandler+0x54>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	f362 0300 	bfi	r3, r2, #0, #1
 8000978:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <SPI1_IRQHandler+0x54>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	793b      	ldrb	r3, [r7, #4]
 8000986:	f362 0341 	bfi	r3, r2, #1, #1
 800098a:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <SPI1_IRQHandler+0x54>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	793b      	ldrb	r3, [r7, #4]
 800099a:	f362 0382 	bfi	r3, r2, #2, #1
 800099e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(IRQ_SRC);
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <SPI1_IRQHandler+0x58>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	4798      	blx	r3
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013000 	.word	0x40013000
 80009b8:	2000005c 	.word	0x2000005c

080009bc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE = ((SPI2->SR & (1<<1)) >> 1);
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <SPI2_IRQHandler+0x54>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	085b      	lsrs	r3, r3, #1
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	793b      	ldrb	r3, [r7, #4]
 80009d0:	f362 0300 	bfi	r3, r2, #0, #1
 80009d4:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <SPI2_IRQHandler+0x54>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	793b      	ldrb	r3, [r7, #4]
 80009e2:	f362 0341 	bfi	r3, r2, #1, #1
 80009e6:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <SPI2_IRQHandler+0x54>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	793b      	ldrb	r3, [r7, #4]
 80009f6:	f362 0382 	bfi	r3, r2, #2, #1
 80009fa:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(IRQ_SRC);
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <SPI2_IRQHandler+0x58>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	4798      	blx	r3
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40003800 	.word	0x40003800
 8000a14:	2000005c 	.word	0x2000005c

08000a18 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			- NONE
 ==================================================================*/

void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	if(USARTx == USART1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a60      	ldr	r2, [pc, #384]	@ (8000ba8 <MCAL_UART_Init+0x190>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d103      	bne.n	8000a32 <MCAL_UART_Init+0x1a>
		Global_UART1_Config = UART_Config;
 8000a2a:	4a60      	ldr	r2, [pc, #384]	@ (8000bac <MCAL_UART_Init+0x194>)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	e00e      	b.n	8000a50 <MCAL_UART_Init+0x38>
	else if(USARTx == USART2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a5e      	ldr	r2, [pc, #376]	@ (8000bb0 <MCAL_UART_Init+0x198>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d103      	bne.n	8000a42 <MCAL_UART_Init+0x2a>
		Global_UART2_Config = UART_Config;
 8000a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8000bb4 <MCAL_UART_Init+0x19c>)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e006      	b.n	8000a50 <MCAL_UART_Init+0x38>
	else if(USARTx == USART3)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a5c      	ldr	r2, [pc, #368]	@ (8000bb8 <MCAL_UART_Init+0x1a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d102      	bne.n	8000a50 <MCAL_UART_Init+0x38>
		Global_UART3_Config = UART_Config;
 8000a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8000bbc <MCAL_UART_Init+0x1a4>)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	6013      	str	r3, [r2, #0]

	//Enable the Clock for given USART Peripheral
	if(USARTx == USART1) RCC_USART1_CLK_EN();
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a55      	ldr	r2, [pc, #340]	@ (8000ba8 <MCAL_UART_Init+0x190>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <MCAL_UART_Init+0x4e>
 8000a58:	4b59      	ldr	r3, [pc, #356]	@ (8000bc0 <MCAL_UART_Init+0x1a8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a58      	ldr	r2, [pc, #352]	@ (8000bc0 <MCAL_UART_Init+0x1a8>)
 8000a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	e014      	b.n	8000a90 <MCAL_UART_Init+0x78>
	else if(USARTx == USART2) RCC_USART2_CLK_EN();
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a51      	ldr	r2, [pc, #324]	@ (8000bb0 <MCAL_UART_Init+0x198>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <MCAL_UART_Init+0x64>
 8000a6e:	4b54      	ldr	r3, [pc, #336]	@ (8000bc0 <MCAL_UART_Init+0x1a8>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a53      	ldr	r2, [pc, #332]	@ (8000bc0 <MCAL_UART_Init+0x1a8>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	e009      	b.n	8000a90 <MCAL_UART_Init+0x78>
	else if(USARTx == USART3) RCC_USART3_CLK_EN();
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8000bb8 <MCAL_UART_Init+0x1a0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d105      	bne.n	8000a90 <MCAL_UART_Init+0x78>
 8000a84:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc0 <MCAL_UART_Init+0x1a8>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	4a4d      	ldr	r2, [pc, #308]	@ (8000bc0 <MCAL_UART_Init+0x1a8>)
 8000a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a8e:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	60da      	str	r2, [r3, #12]

	//Enable USART Tx & Rx engines according  to the USART_Mode configuration item
	//USART_CR1  Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60da      	str	r2, [r3, #12]

	//PayLoad Width
	//USART_CR1 Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	8912      	ldrh	r2, [r2, #8]
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	//USARTx->CR1 Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->parity;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	7a92      	ldrb	r2, [r2, #10]
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	7ad2      	ldrb	r2, [r2, #11]
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlow_CTL;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	7b12      	ldrb	r2, [r2, #12]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if(USARTx == USART1) pclk = MCAL_RCC_GetPCLK2Freq();
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a30      	ldr	r2, [pc, #192]	@ (8000ba8 <MCAL_UART_Init+0x190>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d103      	bne.n	8000af2 <MCAL_UART_Init+0xda>
 8000aea:	f7ff fd4f 	bl	800058c <MCAL_RCC_GetPCLK2Freq>
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	e002      	b.n	8000af8 <MCAL_UART_Init+0xe0>
	else pclk = MCAL_RCC_GetPCLK1Freq();
 8000af2:	f7ff fd37 	bl	8000564 <MCAL_RCC_GetPCLK1Freq>
 8000af6:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	0119      	lsls	r1, r3, #4
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009a      	lsls	r2, r3, #2
 8000b10:	441a      	add	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b28:	2064      	movs	r0, #100	@ 0x64
 8000b2a:	fb00 f303 	mul.w	r3, r0, r3
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	4a24      	ldr	r2, [pc, #144]	@ (8000bc4 <MCAL_UART_Init+0x1ac>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	095b      	lsrs	r3, r3, #5
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR ;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	7b5b      	ldrb	r3, [r3, #13]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d026      	beq.n	8000b9e <MCAL_UART_Init+0x186>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	7b52      	ldrb	r2, [r2, #13]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60da      	str	r2, [r3, #12]

		//Enable NVIC For USARTx IRQ
		if(USARTx == USART1) NVIC_IRQ37_USART1_EN;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <MCAL_UART_Init+0x190>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d106      	bne.n	8000b74 <MCAL_UART_Init+0x15c>
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MCAL_UART_Init+0x1b0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <MCAL_UART_Init+0x1b0>)
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2) NVIC_IRQ38_USART2_EN;
		else if(USARTx == USART3) NVIC_IRQ39_USART3_EN;
	}
}
 8000b72:	e014      	b.n	8000b9e <MCAL_UART_Init+0x186>
		else if(USARTx == USART2) NVIC_IRQ38_USART2_EN;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <MCAL_UART_Init+0x198>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d106      	bne.n	8000b8a <MCAL_UART_Init+0x172>
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <MCAL_UART_Init+0x1b0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <MCAL_UART_Init+0x1b0>)
 8000b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	e009      	b.n	8000b9e <MCAL_UART_Init+0x186>
		else if(USARTx == USART3) NVIC_IRQ39_USART3_EN;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <MCAL_UART_Init+0x1a0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d105      	bne.n	8000b9e <MCAL_UART_Init+0x186>
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <MCAL_UART_Init+0x1b0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <MCAL_UART_Init+0x1b0>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	20000064 	.word	0x20000064
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	20000068 	.word	0x20000068
 8000bb8:	40004800 	.word	0x40004800
 8000bbc:	2000006c 	.word	0x2000006c
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	51eb851f 	.word	0x51eb851f
 8000bc8:	e000e104 	.word	0xe000e104

08000bcc <MCAL_UART_SendData>:
 * @param[in]         - PollingEn   Enable pooling or disable it
 *
 * @retval 			  - NONE
 =================================================================*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	71fb      	strb	r3, [r7, #7]

	// wait until TXE flag is set in the SR
	if(PollingEn == enable) while(!(USARTx->SR & 1<<7));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d106      	bne.n	8000bee <MCAL_UART_SendData+0x22>
 8000be0:	bf00      	nop
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f9      	beq.n	8000be2 <MCAL_UART_SendData+0x16>
	//	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//	because it is replaced by the parity.
	//	When receiving with the parity enabled, the value read in the MSB bit is the received parity
	//	bit.

	if( (USARTx == USART1 && Global_UART1_Config->Payload_Length == UART_Payload_Length_9B) ||
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4a24      	ldr	r2, [pc, #144]	@ (8000c84 <MCAL_UART_SendData+0xb8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d105      	bne.n	8000c02 <MCAL_UART_SendData+0x36>
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <MCAL_UART_SendData+0xbc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	891b      	ldrh	r3, [r3, #8]
 8000bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c00:	d013      	beq.n	8000c2a <MCAL_UART_SendData+0x5e>
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <MCAL_UART_SendData+0xc0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d105      	bne.n	8000c16 <MCAL_UART_SendData+0x4a>
	    (USARTx == USART2 && Global_UART2_Config->Payload_Length == UART_Payload_Length_9B) ||
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MCAL_UART_SendData+0xc4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	891b      	ldrh	r3, [r3, #8]
 8000c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c14:	d009      	beq.n	8000c2a <MCAL_UART_SendData+0x5e>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4a1e      	ldr	r2, [pc, #120]	@ (8000c94 <MCAL_UART_SendData+0xc8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d126      	bne.n	8000c6c <MCAL_UART_SendData+0xa0>
	    (USARTx == USART3 && Global_UART3_Config->Payload_Length == UART_Payload_Length_9B) )
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MCAL_UART_SendData+0xcc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	891b      	ldrh	r3, [r3, #8]
 8000c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c28:	d120      	bne.n	8000c6c <MCAL_UART_SendData+0xa0>
	{
		//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
		if(USARTx == USART1) USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MCAL_UART_SendData+0xb8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d106      	bne.n	8000c40 <MCAL_UART_SendData+0x74>
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	e01b      	b.n	8000c78 <MCAL_UART_SendData+0xac>
		else if(USARTx == USART2) USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <MCAL_UART_SendData+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d106      	bne.n	8000c56 <MCAL_UART_SendData+0x8a>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	605a      	str	r2, [r3, #4]
		if(USARTx == USART1) USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 8000c54:	e010      	b.n	8000c78 <MCAL_UART_SendData+0xac>
		else if(USARTx == USART3) USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <MCAL_UART_SendData+0xc8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10c      	bne.n	8000c78 <MCAL_UART_SendData+0xac>
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	605a      	str	r2, [r3, #4]
		if(USARTx == USART1) USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 8000c6a:	e005      	b.n	8000c78 <MCAL_UART_SendData+0xac>
	}
	else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	605a      	str	r2, [r3, #4]
	}
}
 8000c76:	e000      	b.n	8000c7a <MCAL_UART_SendData+0xae>
		if(USARTx == USART1) USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 8000c78:	bf00      	nop
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40013800 	.word	0x40013800
 8000c88:	20000064 	.word	0x20000064
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	20000068 	.word	0x20000068
 8000c94:	40004800 	.word	0x40004800
 8000c98:	2000006c 	.word	0x2000006c

08000c9c <MCAL_UART_GPIO_Set_Pins>:
 * @brief 			- Initializes GPIO Pins
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	GPIO_Config_t PinCfg;
	if(USARTx == USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d54 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d118      	bne.n	8000cde <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb0:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4825      	ldr	r0, [pc, #148]	@ (8000d58 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cc2:	f000 f93b 	bl	8000f3c <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cca:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4820      	ldr	r0, [pc, #128]	@ (8000d58 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cd8:	f000 f930 	bl	8000f3c <MCAL_GPIO_Init>
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}
}
 8000cdc:	e036      	b.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d116      	bne.n	8000d14 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000cea:	2306      	movs	r3, #6
 8000cec:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cfa:	f000 f91f 	bl	8000f3c <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000cfe:	2308      	movs	r3, #8
 8000d00:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 8000d02:	2308      	movs	r3, #8
 8000d04:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d0e:	f000 f915 	bl	8000f3c <MCAL_GPIO_Init>
}
 8000d12:	e01b      	b.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d117      	bne.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d20:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000d22:	2306      	movs	r3, #6
 8000d24:	817b      	strh	r3, [r7, #10]
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000d26:	2301      	movs	r3, #1
 8000d28:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d32:	f000 f903 	bl	8000f3c <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000d36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d3a:	813b      	strh	r3, [r7, #8]
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d48:	f000 f8f8 	bl	8000f3c <MCAL_GPIO_Init>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40004800 	.word	0x40004800
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <USART1_IRQHandler>:
 * 						ISR Functions
 * =======================================================================================
 */

void USART1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	//RXNE interrupt
	if(((USART1->SR) & (1<<5)) && ((USART1->CR1) & (1<<5)) )
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <USART1_IRQHandler+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d009      	beq.n	8000d8c <USART1_IRQHandler+0x24>
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <USART1_IRQHandler+0x28>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f003 0320 	and.w	r3, r3, #32
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <USART1_IRQHandler+0x24>
	{
		Global_UART1_Config->P_IRQ_CallBack();
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <USART1_IRQHandler+0x2c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	4798      	blx	r3
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40013800 	.word	0x40013800
 8000d94:	20000064 	.word	0x20000064

08000d98 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	//RXNE interrupt
	if(((USART2->SR) & (1<<5)) && ((USART2->CR1) & (1<<5)) )
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <USART2_IRQHandler+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d009      	beq.n	8000dbc <USART2_IRQHandler+0x24>
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <USART2_IRQHandler+0x28>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <USART2_IRQHandler+0x24>
	{
		Global_UART2_Config->P_IRQ_CallBack();
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <USART2_IRQHandler+0x2c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	4798      	blx	r3
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	20000068 	.word	0x20000068

08000dc8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	//RXNE interrupt
	if(((USART3->SR) & (1<<5)) && ((USART3->CR1) & (1<<5)) )
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <USART3_IRQHandler+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d009      	beq.n	8000dec <USART3_IRQHandler+0x24>
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <USART3_IRQHandler+0x28>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <USART3_IRQHandler+0x24>
	{
		Global_UART3_Config->P_IRQ_CallBack();
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <USART3_IRQHandler+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	4798      	blx	r3
	}
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	2000006c 	.word	0x2000006c

08000df8 <Get_PinPostion>:
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_PinPostion(uint16_t PinNumber)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e08:	f000 808f 	beq.w	8000f2a <Get_PinPostion+0x132>
 8000e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e10:	f300 808d 	bgt.w	8000f2e <Get_PinPostion+0x136>
 8000e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e18:	f000 8085 	beq.w	8000f26 <Get_PinPostion+0x12e>
 8000e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e20:	f300 8085 	bgt.w	8000f2e <Get_PinPostion+0x136>
 8000e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e28:	d07b      	beq.n	8000f22 <Get_PinPostion+0x12a>
 8000e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e2e:	dc7e      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e34:	d073      	beq.n	8000f1e <Get_PinPostion+0x126>
 8000e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e3a:	dc78      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e40:	d06b      	beq.n	8000f1a <Get_PinPostion+0x122>
 8000e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e46:	dc72      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e4c:	d063      	beq.n	8000f16 <Get_PinPostion+0x11e>
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e52:	dc6c      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e58:	d05b      	beq.n	8000f12 <Get_PinPostion+0x11a>
 8000e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e5e:	dc66      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e64:	d053      	beq.n	8000f0e <Get_PinPostion+0x116>
 8000e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e6a:	dc60      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e6c:	2b80      	cmp	r3, #128	@ 0x80
 8000e6e:	d05c      	beq.n	8000f2a <Get_PinPostion+0x132>
 8000e70:	2b80      	cmp	r3, #128	@ 0x80
 8000e72:	dc5c      	bgt.n	8000f2e <Get_PinPostion+0x136>
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	dc47      	bgt.n	8000f08 <Get_PinPostion+0x110>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	dd58      	ble.n	8000f2e <Get_PinPostion+0x136>
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	2b1f      	cmp	r3, #31
 8000e80:	d855      	bhi.n	8000f2e <Get_PinPostion+0x136>
 8000e82:	a201      	add	r2, pc, #4	@ (adr r2, 8000e88 <Get_PinPostion+0x90>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000f0f 	.word	0x08000f0f
 8000e8c:	08000f13 	.word	0x08000f13
 8000e90:	08000f2f 	.word	0x08000f2f
 8000e94:	08000f17 	.word	0x08000f17
 8000e98:	08000f2f 	.word	0x08000f2f
 8000e9c:	08000f2f 	.word	0x08000f2f
 8000ea0:	08000f2f 	.word	0x08000f2f
 8000ea4:	08000f1b 	.word	0x08000f1b
 8000ea8:	08000f2f 	.word	0x08000f2f
 8000eac:	08000f2f 	.word	0x08000f2f
 8000eb0:	08000f2f 	.word	0x08000f2f
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f2f 	.word	0x08000f2f
 8000ebc:	08000f2f 	.word	0x08000f2f
 8000ec0:	08000f2f 	.word	0x08000f2f
 8000ec4:	08000f1f 	.word	0x08000f1f
 8000ec8:	08000f2f 	.word	0x08000f2f
 8000ecc:	08000f2f 	.word	0x08000f2f
 8000ed0:	08000f2f 	.word	0x08000f2f
 8000ed4:	08000f2f 	.word	0x08000f2f
 8000ed8:	08000f2f 	.word	0x08000f2f
 8000edc:	08000f2f 	.word	0x08000f2f
 8000ee0:	08000f2f 	.word	0x08000f2f
 8000ee4:	08000f2f 	.word	0x08000f2f
 8000ee8:	08000f2f 	.word	0x08000f2f
 8000eec:	08000f2f 	.word	0x08000f2f
 8000ef0:	08000f2f 	.word	0x08000f2f
 8000ef4:	08000f2f 	.word	0x08000f2f
 8000ef8:	08000f2f 	.word	0x08000f2f
 8000efc:	08000f2f 	.word	0x08000f2f
 8000f00:	08000f2f 	.word	0x08000f2f
 8000f04:	08000f23 	.word	0x08000f23
 8000f08:	2b40      	cmp	r3, #64	@ 0x40
 8000f0a:	d00c      	beq.n	8000f26 <Get_PinPostion+0x12e>
 8000f0c:	e00f      	b.n	8000f2e <Get_PinPostion+0x136>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e00e      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	e00c      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000f16:	2308      	movs	r3, #8
 8000f18:	e00a      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	e008      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	e006      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 8000f22:	2314      	movs	r3, #20
 8000f24:	e004      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000f26:	2318      	movs	r3, #24
 8000f28:	e002      	b.n	8000f30 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000f2a:	231c      	movs	r3, #28
 8000f2c:	e000      	b.n	8000f30 <Get_PinPostion+0x138>
		break;
	}
	return 0;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <MCAL_GPIO_Init>:
 * 							 the configuration information for the specified GPIO PIN
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_Config_t *pin_config)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	// Port configuration register high (GPIOx_CRH) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *confg_reg = NULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
	uint8_t PinConfig = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
	//see if it's CRL or CRH
	confg_reg = (pin_config->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH ;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2bff      	cmp	r3, #255	@ 0xff
 8000f54:	d801      	bhi.n	8000f5a <MCAL_GPIO_Init+0x1e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e001      	b.n	8000f5e <MCAL_GPIO_Init+0x22>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	60bb      	str	r3, [r7, #8]
	//Reset CNF and MODE
	*confg_reg &= ~(0xf<<Get_PinPostion(pin_config->GPIO_PinNumber));//* because we will write value
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff47 	bl	8000df8 <Get_PinPostion>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	230f      	movs	r3, #15
 8000f70:	4093      	lsls	r3, r2
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	401a      	ands	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	601a      	str	r2, [r3, #0]

	//if it's output
	if((pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_PP)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_OD)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP)||(pin_config->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	885b      	ldrh	r3, [r3, #2]
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d00b      	beq.n	8000f9e <MCAL_GPIO_Init+0x62>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	2b05      	cmp	r3, #5
 8000f8c:	d007      	beq.n	8000f9e <MCAL_GPIO_Init+0x62>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	885b      	ldrh	r3, [r3, #2]
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d003      	beq.n	8000f9e <MCAL_GPIO_Init+0x62>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	885b      	ldrh	r3, [r3, #2]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	d10f      	bne.n	8000fbe <MCAL_GPIO_Init+0x82>
		 * 00: General purpose output push-pull
		 * 01: General purpose output Open-drain
		 * 10: Alternate function output Push-pull
		 * 11: Alternate function output Open-drain
		 */
		PinConfig = ((((pin_config->GPIO_PinMode - 4) <<2)|(pin_config->GPIO_PinSpeed))&0xf);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	885b      	ldrh	r3, [r3, #2]
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	b25a      	sxtb	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	889b      	ldrh	r3, [r3, #4]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e02d      	b.n	800101a <MCAL_GPIO_Init+0xde>
		 * 01: Floating input
		 * 01: Alternative input
		 * 11: Input with PU or PD
		 * //the diff between PU & PD :=> PU: ODR --> 1  PD: ODR --> 0
		 */
		if((pin_config->GPIO_PinMode == GPIO_MODE_ANALOG)||(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_FLO))
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	885b      	ldrh	r3, [r3, #2]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <MCAL_GPIO_Init+0x92>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	885b      	ldrh	r3, [r3, #2]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <MCAL_GPIO_Init+0xa4>
		{
			PinConfig = (((pin_config->GPIO_PinMode << 2))&0xf);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	885b      	ldrh	r3, [r3, #2]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e01c      	b.n	800101a <MCAL_GPIO_Init+0xde>
		}
		else if(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	885b      	ldrh	r3, [r3, #2]
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d102      	bne.n	8000fee <MCAL_GPIO_Init+0xb2>
		{
			PinConfig = (((GPIO_MODE_INPUT_FLO << 2))&0xf);
 8000fe8:	2304      	movs	r3, #4
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e015      	b.n	800101a <MCAL_GPIO_Init+0xde>
		}
		else
		{
			PinConfig = (((GPIO_MODE_INPUT_PU << 2))&0xf);
 8000fee:	2308      	movs	r3, #8
 8000ff0:	73fb      	strb	r3, [r7, #15]
			if(pin_config->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	885b      	ldrh	r3, [r3, #2]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d107      	bne.n	800100a <MCAL_GPIO_Init+0xce>
				GPIOx->ODR |= pin_config->GPIO_PinNumber;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	8812      	ldrh	r2, [r2, #0]
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	e007      	b.n	800101a <MCAL_GPIO_Init+0xde>
			else
				GPIOx->ODR &= ~pin_config->GPIO_PinNumber;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	8812      	ldrh	r2, [r2, #0]
 8001012:	43d2      	mvns	r2, r2
 8001014:	401a      	ands	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60da      	str	r2, [r3, #12]
		}
	}
	*confg_reg |= (PinConfig<<Get_PinPostion(pin_config->GPIO_PinNumber));
 800101a:	7bfc      	ldrb	r4, [r7, #15]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fee9 	bl	8000df8 <Get_PinPostion>
 8001026:	4603      	mov	r3, r0
 8001028:	fa04 f203 	lsl.w	r2, r4, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	431a      	orrs	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
	...

08001040 <__libc_init_array>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	2600      	movs	r6, #0
 8001044:	4d0c      	ldr	r5, [pc, #48]	@ (8001078 <__libc_init_array+0x38>)
 8001046:	4c0d      	ldr	r4, [pc, #52]	@ (800107c <__libc_init_array+0x3c>)
 8001048:	1b64      	subs	r4, r4, r5
 800104a:	10a4      	asrs	r4, r4, #2
 800104c:	42a6      	cmp	r6, r4
 800104e:	d109      	bne.n	8001064 <__libc_init_array+0x24>
 8001050:	f000 f81a 	bl	8001088 <_init>
 8001054:	2600      	movs	r6, #0
 8001056:	4d0a      	ldr	r5, [pc, #40]	@ (8001080 <__libc_init_array+0x40>)
 8001058:	4c0a      	ldr	r4, [pc, #40]	@ (8001084 <__libc_init_array+0x44>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	42a6      	cmp	r6, r4
 8001060:	d105      	bne.n	800106e <__libc_init_array+0x2e>
 8001062:	bd70      	pop	{r4, r5, r6, pc}
 8001064:	f855 3b04 	ldr.w	r3, [r5], #4
 8001068:	4798      	blx	r3
 800106a:	3601      	adds	r6, #1
 800106c:	e7ee      	b.n	800104c <__libc_init_array+0xc>
 800106e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001072:	4798      	blx	r3
 8001074:	3601      	adds	r6, #1
 8001076:	e7f2      	b.n	800105e <__libc_init_array+0x1e>
 8001078:	080010b8 	.word	0x080010b8
 800107c:	080010b8 	.word	0x080010b8
 8001080:	080010b8 	.word	0x080010b8
 8001084:	080010bc 	.word	0x080010bc

08001088 <_init>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	bf00      	nop
 800108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108e:	bc08      	pop	{r3}
 8001090:	469e      	mov	lr, r3
 8001092:	4770      	bx	lr

08001094 <_fini>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr
