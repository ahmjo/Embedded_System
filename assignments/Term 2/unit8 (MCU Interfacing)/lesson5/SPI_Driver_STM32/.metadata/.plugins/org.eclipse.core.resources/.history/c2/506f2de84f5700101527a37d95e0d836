#include "stm32f103x6.h"
#include "Stm32_F103C6_gpio_driver.h"
#include "Stm32_F103C6_RCC_driver.h"
#include "Stm32_F103C6_USART_driver.h"


UART_Config_t* Global_UART_Config = NULL;

/**================================================================
 * @Fn				-MCAL_UART_Init
 * @brief 			- Initializes UART (Supported feature ASYNCH. Only)
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- UART_Config: All UART Configuration
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ
 */
void MCAL_UART_Init(USART_t *USARTx, UART_Config_t* UART_Config)
{
	Global_UART_Config = UART_Config;
	uint32_t pclk, BRR;

	// Enable USART Clock
	if (USARTx == USART1)
		RCC_USART1_CLK_EN();
	else if (USARTx == USART2)
		RCC_USART2_CLK_EN();
	else if (USARTx == USART3)
		RCC_USART3_CLK_EN();

	// Enable USART Module
	USARTx->CR1 |= 1 << 13; // UE: USART Enable

	// Enable Tx and Rx according to config
	USARTx->CR1 |= UART_Config->USART_Mode;

	// Payload length
	USARTx->CR1 |= UART_Config->Payload_Length;

	// Parity configuration
	USARTx->CR1 |= UART_Config->parity;

	// Stop bits config
	USARTx->CR2 |= UART_Config->StopBits;

	// Hardware flow control
	USARTx->CR3 |= UART_Config->HwFlow_CTL;

	// Baudrate calculation
	if (USARTx == USART1)
		pclk = MCAL_RCC_GetPCLK2Freq();
	else
		pclk = MCAL_RCC_GetPCLK1Freq();

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
	USARTx->BRR = BRR;

	// IRQ Enable
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;

		// Enable NVIC IRQ
		if (USARTx == USART1)
			NVIC_IRQ37_USART1_Enable;
		else if (USARTx == USART2)
			NVIC_IRQ38_USART2_Enable;
		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}

/**================================================================
 * @Fn				-MCAL_UART_DeInit
 * @brief 			- Deinitializes UART
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 */
void MCAL_UART_DeInit(USART_t *USARTx)
{
	if (USARTx == USART1)
	{
		RCC_USART1_Reset();
		NVIC_IRQ37_USART1_Disable;
	}
	else if (USARTx == USART2)
	{
		RCC_USART2_Reset();
		NVIC_IRQ38_USART2_Disable;
	}
	else if (USARTx == USART3)
	{
		RCC_USART3_Reset();
		NVIC_IRQ39_USART3_Disable;
	}
}

/**================================================================
 * @Fn				-MCAL_UART_SendData
 * @brief 			- Send data buffer on UART
 * @param [in] 		- USARTx
 * @param [in] 		- pTxBuffer: pointer to data buffer
 * @param [in] 		- PollingEn: enable/disable polling
 */
void MCAL_UART_SendData(USART_t *USARTx, uint16_t *pTxBuffer, enum Polling_mechism PollingEn)
{
	// Wait until TXE flag is set
	if (PollingEn == enable)
		while (!(USARTx->SR & (1 << 7)));

	// Check payload length: 9 bits or 8 bits
	if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
	}
}

/**================================================================
 * @Fn				-MCAL_UART_ReceiveData
 * @brief 			- Receive data buffer from UART
 * @param [in] 		- USARTx
 * @param [out] 		- pRxBuffer: pointer to buffer to store data
 * @param [in] 		- PollingEn: enable/disable polling
 */
void MCAL_UART_ReceiveData(USART_t *USARTx, uint16_t *pRxBuffer, enum Polling_mechism PollingEn)
{
	if (PollingEn == enable)
	{
		// Wait until RXNE flag set
		while (!(USARTx->SR & (1 << 5)));
	}

	if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
	{
		if (Global_UART_Config->parity == UART_parity_NONE)
		{
			*pRxBuffer = USARTx->DR;
		}
		else
		{
			*pRxBuffer = (USARTx->DR & 0xFF);
		}
	}
	else
	{
		if (Global_UART_Config->parity == UART_parity_NONE)
		{
			*pRxBuffer = (USARTx->DR & 0xFF);
		}
		else
		{
			*pRxBuffer = (USARTx->DR & 0x7F);
		}
	}
}

/**================================================================
 * @Fn				-MCAL_UART_GPIO_Set_Pins
 * @brief 			- Initialize GPIO pins for UART
 * @param [in] 		- USARTx
 */
void MCAL_UART_GPIO_Set_Pins(USART_t *USARTx)
{
	GPIO_t PinCfg;

	if (USARTx == USART1)
	{
		// PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		// PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS ||
			Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			// PA12 RTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_12;
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
		if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS ||
			Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			// PA11 CTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_11;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}
	else if (USARTx == USART2)
	{
		// PA2 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		// PA3 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS ||
			Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			// PA1 RTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_1;
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
		if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS ||
			Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			// PA0 CTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_0;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}
	else if (USARTx == USART3)
	{
		// PB10 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		// PB11 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS ||
			Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			// PA14 RTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
		if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS ||
			Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			// PB13 CTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}


// ISR Handlers

void USART1_IRQHandler(void)
{
	if (Global_UART_Config != NULL && Global_UART_Config->P_IRQ_CallBack != NULL)
	{
		Global_UART_Config->P_IRQ_CallBack();
	}
}

void USART2_IRQHandler(void)
{
	if (Global_UART_Config != NULL && Global_UART_Config->P_IRQ_CallBack != NULL)
	{
		Global_UART_Config->P_IRQ_CallBack();
	}
}

void USART3_IRQHandler(void)
{
	if (Global_UART_Config != NULL && Global_UART_Config->P_IRQ_CallBack != NULL)
	{
		Global_UART_Config->P_IRQ_CallBack();
	}
}
