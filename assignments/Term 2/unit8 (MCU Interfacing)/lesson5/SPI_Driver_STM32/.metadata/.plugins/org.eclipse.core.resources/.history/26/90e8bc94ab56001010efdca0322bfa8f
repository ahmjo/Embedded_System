/*
 * STM32_F103C6_USART_Driver.c
 *
 *  Updated on: July 1, 2025
 *      Author: Ahmed
 */

#include "STM32_F103C6_USART_Driver.h"

UART_Config_t* Global_UART_Config = NULL;

void MCAL_UART_Init(USART_t *USARTx, UART_Config_t* UART_Config)
{
	Global_UART_Config = UART_Config;
	uint32_t Pclk, BRR;

	if (USARTx == USART1)		RCC_USART1_CLK_EN();
	else if (USARTx == USART2)	RCC_USART2_CLK_EN();
	else if (USARTx == USART3)	RCC_USART3_CLK_EN();

	USARTx->CR1 |= (1 << 13); // UE
	USARTx->CR1 |= UART_Config->USART_MODE;
	USARTx->CR1 |= UART_Config->DATA_LENGTH;
	USARTx->CR1 |= UART_Config->PARITY;
	USARTx->CR2 |= UART_Config->STOPBITS;
	USARTx->CR3 |= UART_Config->FLOW_CONTROL;

	Pclk = (USARTx == USART1) ? RCC_Get_PCLK2_Frequency() : RCC_Get_PCLK1_Frequency();
	BRR = UART_BRR_Register(Pclk, UART_Config->USART_BAUDRATE);
	USARTx->BRR = BRR;

	if (UART_Config->IQR_ENABLE != UART_IRQ_Enable_NONE)
	{
		USARTx->CR1 |= UART_Config->IQR_ENABLE;
		if (USARTx == USART1) NVIC_IRQ37_USART1_Enable();
		else if (USARTx == USART2) NVIC_IRQ38_USART2_Enable();
		else if (USARTx == USART3) NVIC_IRQ39_USART3_Enable();
	}
}

void MCAL_UART_DeInit(USART_t *USARTx)
{
	if (USARTx == USART1)
	{
		RCC_USART1_CLK_DI();
		NVIC_IRQ37_USART1_Disable();
	}
	else if (USARTx == USART2)
	{
		RCC_USART2_CLK_DI();
		NVIC_IRQ38_USART2_Disable();
	}
	else if (USARTx == USART3)
	{
		RCC_USART3_CLK_DI();
		NVIC_IRQ39_USART3_Disable();
	}
}

void MCAL_UART_GPIO_Set_Pins(USART_t *USARTx)
{
	GPIO_Config_t Pin_Config;
	if (USARTx == USART1)
	{
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
		Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		GPIO_Init(GPIOA, &Pin_Config);

		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
		Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		GPIO_Init(GPIOA, &Pin_Config);

		if (Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_CTS || Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS_CTS)
		{
			Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
			Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			GPIO_Init(GPIOA, &Pin_Config);
		}
		if (Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS || Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS_CTS)
		{
			Pin_Config.GPIO_PinNumber = GPIO_PIN_12;
			Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			GPIO_Init(GPIOA, &Pin_Config);
		}
	}
	else if (USARTx == USART2)
	{
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
		Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		GPIO_Init(GPIOA, &Pin_Config);

		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
		Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		GPIO_Init(GPIOA, &Pin_Config);

		if (Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_CTS || Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS_CTS)
		{
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
			Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			GPIO_Init(GPIOA, &Pin_Config);
		}
		if (Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS || Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS_CTS)
		{
			Pin_Config.GPIO_PinNumber = GPIO_PIN_1;
			Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			GPIO_Init(GPIOA, &Pin_Config);
		}
	}
	else if (USARTx == USART3)
	{
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
		Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		GPIO_Init(GPIOB, &Pin_Config);

		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
		Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		GPIO_Init(GPIOB, &Pin_Config);

		if (Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_CTS || Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS_CTS)
		{
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
			Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			GPIO_Init(GPIOB, &Pin_Config);
		}
		if (Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS || Global_UART_Config->FLOW_CONTROL == UART_HwFlowCtl_RTS_CTS)
		{
			Pin_Config.GPIO_PinNumber = GPIO_PIN_14;
			Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}

void MCAL_UART_SendData(USART_t *USARTx, uint16_t *pTxBuffer, enum Polling_mechism Polling)
{
	if (Polling == enable)
		while (!(USARTx->SR & 1 << 7));

	if (Global_UART_Config->DATA_LENGTH == UART_DATA_Length_8B)
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
	else
		USARTx->DR = (*pTxBuffer & (uint16_t)0x1FF);
}

void MCAL_UART_ReceiveData(USART_t *USARTx, uint16_t *pRxBuffer, enum Polling_mechism Polling)
{
	if (Polling == enable)
		while (!(USARTx->SR & 1 << 5));

	if (Global_UART_Config->DATA_LENGTH == UART_DATA_Length_9B)
	{
		if (Global_UART_Config->PARITY == UART_NOParity)
			*pRxBuffer = USARTx->DR;
		else
			*pRxBuffer = (USARTx->DR & (uint8_t)0xFF);
	}
	else
	{
		if (Global_UART_Config->PARITY == UART_NOParity)
			*pRxBuffer = (USARTx->DR & (uint8_t)0xFF);
		else
			*pRxBuffer = (USARTx->DR & (uint8_t)0x7F);
	}
}

void MCAL_UART_WAIT_TC(USART_t *USARTx)
{
	while (!(USARTx->SR & (1 << 6)));
}

void USART1_IRQHandler(void)
{
	Global_UART_Config->IRQ_CallBack();
}

void USART2_IRQHandler(void)
{
	Global_UART_Config->IRQ_CallBack();
}

void USART3_IRQHandler(void)
{
	Global_UART_Config->IRQ_CallBack();
}
