#include "Stm32_F103C6_USART_driver.h"

/*
 * =======================================================================================
 * 							Generic Variables
 * =======================================================================================
 */
UART_Config_t* Global_UART1_Config = NULL;
UART_Config_t* Global_UART2_Config = NULL;
UART_Config_t* Global_UART3_Config = NULL;

/*
 * =======================================================================================
 * 					    BRR Calculation Function (FIXED)
 * =======================================================================================
 */
uint32_t UART_BRR_Register(uint32_t pclk, uint32_t baudrate)
{
    uint32_t usartdiv = (pclk * 25) / (4 * baudrate);
    uint32_t mantissa = usartdiv / 100;
    uint32_t fraction = ((usartdiv - (mantissa * 100)) * 16 + 50) / 100;

    // تأكد إن الـ fraction مش أكبر من 15
    if(fraction > 15)
    {
        mantissa++;
        fraction = 0;
    }

    return (mantissa << 4) | (fraction & 0x0F);
}

/*
 * =======================================================================================
 * 							             APIs
 * =======================================================================================
 */

/**================================================================
 * @Fn				- MCAL_UART_Init
 * @brief 			- Initializes UART (CORRECTED VERSION)
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- UART_Config: All UART Configuration
 * @retval 			- NONE
 ==================================================================*/
void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
    uint32_t pclk, BRR;

    // حفظ pointer للـ config
    if(USARTx == USART1)
        Global_UART1_Config = UART_Config;
    else if(USARTx == USART2)
        Global_UART2_Config = UART_Config;
    else if(USARTx == USART3)
        Global_UART3_Config = UART_Config;

    // Enable the Clock for given USART Peripheral
    if(USARTx == USART1)
        RCC_USART1_CLK_EN();
    else if(USARTx == USART2)
        RCC_USART2_CLK_EN();
    else if(USARTx == USART3)
        RCC_USART3_CLK_EN();

    // RESET USART registers قبل التكوين
    USARTx->CR1 = 0;
    USARTx->CR2 = 0;
    USARTx->CR3 = 0;

    // Enable USART Tx & Rx engines according to the USART_Mode configuration
    USARTx->CR1 |= UART_Config->USART_Mode;

    // PayLoad Width
    USARTx->CR1 |= UART_Config->Payload_Length;

    // Configuration of parity control
    USARTx->CR1 |= UART_Config->parity;

    // Configure the number of stop bits
    USARTx->CR2 |= UART_Config->StopBits;

    // USART hardware flow control
    USARTx->CR3 |= UART_Config->HwFlow_CTL;

    // Configuration of BRR(Baudrate register) - FIXED
    if(USARTx == USART1)
        pclk = MCAL_RCC_GetPCLK2Freq();
    else
        pclk = MCAL_RCC_GetPCLK1Freq();

    BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
    USARTx->BRR = BRR;

    // ENABLE / DISABLE Interrupt
    if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
    {
        USARTx->CR1 |= (UART_Config->IRQ_Enable);

        // Enable NVIC For USARTx IRQ
        if(USARTx == USART1)
            NVIC_IRQ37_USART1_EN;
        else if(USARTx == USART2)
            NVIC_IRQ38_USART2_EN;
        else if(USARTx == USART3)
            NVIC_IRQ39_USART3_EN;
    }

    // Enable USART Module - مهم إن ده يكون في الآخر
    USARTx->CR1 |= (1<<13); // UE: USART enable
}

/**================================================================
 * @Fn				- MCAL_UART_DeInit (IMPROVED)
 * @brief 			- DEInitializes UART
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_DeInit(USART_t* USARTx)
{
    if(USARTx == USART1)
    {
        RCC_USART1_Reset();
        NVIC_IRQ37_USART1_Disable;
        Global_UART1_Config = NULL;
    }
    else if(USARTx == USART2)
    {
        RCC_USART2_Reset();
        NVIC_IRQ38_USART2_Disable;
        Global_UART2_Config = NULL;
    }
    else if(USARTx == USART3)
    {
        RCC_USART3_Reset();
        NVIC_IRQ39_USART3_Disable;
        Global_UART3_Config = NULL;
    }
}

/**================================================================
 * @fn      		  - MCAL_UART_SendData (CORRECTED)
 * @brief             - Send Buffer on UART
 * @param [in] 		  - USARTx: where x can be (1..3 depending on device used)
 * @param[in]         - pTxBuffer
 * @param[in]         - PollingEn   Enable pooling or disable it
 * @retval 			  - NONE
 =================================================================*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
    // Wait until TXE flag is set in the SR
    if(PollingEn == enable)
    {
        while(!(USARTx->SR & (1<<7))); // Wait for TXE
    }

    // Get the current USART config
    UART_Config_t* current_config = NULL;
    if(USARTx == USART1) current_config = Global_UART1_Config;
    else if(USARTx == USART2) current_config = Global_UART2_Config;
    else if(USARTx == USART3) current_config = Global_UART3_Config;

    // Check payload length
    if(current_config && current_config->Payload_Length == UART_Payload_Length_9B)
    {
        // 9-bit data transfer
        USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
    }
    else
    {
        // 8-bit data transfer
        USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
    }
}

/**================================================================
 * @fn      		  - MCAL_UART_WAIT_TC (IMPROVED)
 * @brief             - Wait for transmission complete
 * @param [in] 		  - USARTx: where x can be (1..3 depending on device used)
 * @retval 			  - NONE
 =================================================================*/
void MCAL_UART_WAIT_TC(USART_t* USARTx)
{
    // Wait till TC flag is set in the SR
    while(!(USARTx->SR & (1<<6)));
}

/**================================================================
 * @fn      		  - MCAL_UART_ReceiveData (SIMPLIFIED & CORRECTED)
 * @brief             - Receive data from UART
 * @param [in] 		  - USARTx: where x can be (1..3 depending on device used)
 * @param[out]        - pRxBuffer
 * @param[in]         - PollingEn   Enable pooling or disable it
 * @retval 			  - NONE
 =================================================================*/
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechism PollingEn)
{
    // Wait until RXNE flag is set in the SR
    if(PollingEn == enable)
    {
        while(!(USARTx->SR & (1<<5))); // Wait for RXNE
    }

    // Get the current USART config
    UART_Config_t* current_config = NULL;
    if(USARTx == USART1) current_config = Global_UART1_Config;
    else if(USARTx == USART2) current_config = Global_UART2_Config;
    else if(USARTx == USART3) current_config = Global_UART3_Config;

    if(current_config == NULL) return; // Safety check

    // Read data based on configuration
    if(current_config->Payload_Length == UART_Payload_Length_9B)
    {
        if(current_config->parity == UART_parity_NONE)
        {
            // 9-bit data, no parity
            *pRxBuffer = (USARTx->DR & (uint16_t)0x01FF);
        }
        else
        {
            // 8-bit data + 1 parity bit
            *pRxBuffer = (USARTx->DR & (uint8_t)0xFF);
        }
    }
    else // 8-bit payload
    {
        if(current_config->parity == UART_parity_NONE)
        {
            // 8-bit data, no parity
            *pRxBuffer = (USARTx->DR & (uint8_t)0xFF);
        }
        else
        {
            // 7-bit data + 1 parity bit
            *pRxBuffer = (USARTx->DR & (uint8_t)0x7F);
        }
    }
}

/**================================================================
 * @Fn				- MCAL_UART_GPIO_Set_Pins (IMPROVED)
 * @brief 			- Initializes GPIO Pins
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
    GPIO_Config_t PinCfg;

    if(USARTx == USART1)
    {
        // Enable GPIOA Clock
        RCC_GPIOA_CLK_EN();

        // PA9 TX - Alternate Function Output Push-Pull
        PinCfg.GPIO_PinNumber = GPIO_PIN_9;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // PA10 RX - Input Floating (or Input Pull-up)
        PinCfg.GPIO_PinNumber = GPIO_PIN_10;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO; // أو GPIO_MODE_INPUT_AF
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // Hardware Flow Control pins (إذا مطلوبة)
        if(Global_UART1_Config &&
           (Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS ||
            Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS))
        {
            // PA11 CTS - Input Floating
            PinCfg.GPIO_PinNumber = GPIO_PIN_11;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }

        if(Global_UART1_Config &&
           (Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS ||
            Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS))
        {
            // PA12 RTS - Alternate Function Output Push-Pull
            PinCfg.GPIO_PinNumber = GPIO_PIN_12;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }
    }
    else if(USARTx == USART2)
    {
        // Enable GPIOA Clock
        RCC_GPIOA_CLK_EN();

        // PA2 TX
        PinCfg.GPIO_PinNumber = GPIO_PIN_2;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // PA3 RX
        PinCfg.GPIO_PinNumber = GPIO_PIN_3;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // Hardware Flow Control
        if(Global_UART2_Config &&
           (Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS ||
            Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS))
        {
            // PA0 CTS
            PinCfg.GPIO_PinNumber = GPIO_PIN_0;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }

        if(Global_UART2_Config &&
           (Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS ||
            Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS))
        {
            // PA1 RTS
            PinCfg.GPIO_PinNumber = GPIO_PIN_1;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }
    }
    else if(USARTx == USART3)
    {
        // Enable GPIOA and GPIOB Clock
        RCC_GPIOA_CLK_EN();
        RCC_GPIOB_CLK_EN();

        // PB10 TX
        PinCfg.GPIO_PinNumber = GPIO_PIN_10;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOB, &PinCfg);

        // PB11 RX
        PinCfg.GPIO_PinNumber = GPIO_PIN_11;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
        MCAL_GPIO_Init(GPIOB, &PinCfg);

        // Hardware Flow Control
        if(Global_UART3_Config &&
           (Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS ||
            Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS))
        {
            // PB13 CTS
            PinCfg.GPIO_PinNumber = GPIO_PIN_13;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOB, &PinCfg);
        }

        if(Global_UART3_Config &&
           (Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS ||
            Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS))
        {
            // PB14 RTS (تم تصحيحه من PA14)
            PinCfg.GPIO_PinNumber = GPIO_PIN_14;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOB, &PinCfg); // تم تصحيحه من GPIOA
        }
    }
}

/*
 * =======================================================================================
 * 							ISR Functions (IMPROVED)
 * =======================================================================================
 */

void USART1_IRQHandler(void)
{
    // Check for RXNE interrupt
    if(((USART1->SR) & (1<<5)) && ((USART1->CR1) & (1<<5)))
    {
        if(Global_UART1_Config && Global_UART1_Config->P_IRQ_CallBack)
            Global_UART1_Config->P_IRQ_CallBack();
    }

    // Check for TXE interrupt
    if(((USART1->SR) & (1<<7)) && ((USART1->CR1) & (1<<7)))
    {
        if(Global_UART1_Config && Global_UART1_Config->P_IRQ_CallBack)
            Global_UART1_Config->P_IRQ_CallBack();
    }

    // Check for TC interrupt
    if(((USART1->SR) & (1<<6)) && ((USART1->CR1) & (1<<6)))
    {
        if(Global_UART1_Config && Global_UART1_Config->P_IRQ_CallBack)
            Global_UART1_Config->P_IRQ_CallBack();
    }
}

void USART2_IRQHandler(void)
{
    // Check for RXNE interrupt
    if(((USART2->SR) & (1<<5)) && ((USART2->CR1) & (1<<5)))
    {
        if(Global_UART2_Config && Global_UART2_Config->P_IRQ_CallBack)
            Global_UART2_Config->P_IRQ_CallBack();
    }

    // Check for TXE interrupt
    if(((USART2->SR) & (1<<7)) && ((USART2->CR1) & (1<<7)))
    {
        if(Global_UART2_Config && Global_UART2_Config->P_IRQ_CallBack)
            Global_UART2_Config->P_IRQ_CallBack();
    }

    // Check for TC interrupt
    if(((USART2->SR) & (1<<6)) && ((USART2->CR1) & (1<<6)))
    {
        if(Global_UART2_Config && Global_UART2_Config->P_IRQ_CallBack)
            Global_UART2_Config->P_IRQ_CallBack();
    }
}

void USART3_IRQHandler(void)
{
    // Check for RXNE interrupt
    if(((USART3->SR) & (1<<5)) && ((USART3->CR1) & (1<<5)))
    {
        if(Global_UART3_Config && Global_UART3_Config->P_IRQ_CallBack)
            Global_UART3_Config->P_IRQ_CallBack();
    }

    // Check for TXE interrupt
    if(((USART3->SR) & (1<<7)) && ((USART3->CR1) & (1<<7)))
    {
        if(Global_UART3_Config && Global_UART3_Config->P_IRQ_CallBack)
            Global_UART3_Config->P_IRQ_CallBack();
    }

    // Check for TC interrupt
    if(((USART3->SR) & (1<<6)) && ((USART3->CR1) & (1<<6)))
    {
        if(Global_UART3_Config && Global_UART3_Config->P_IRQ_CallBack)
            Global_UART3_Config->P_IRQ_CallBack();
    }
}

/*
 * =======================================================================================
 * 						Additional Helper Functions
 * =======================================================================================
 */

/**================================================================
 * @Fn				- MCAL_UART_SendString
 * @brief 			- Send string via UART
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- str: pointer to string
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_SendString(USART_t* USARTx, char* str)
{
    uint16_t data;
    while(*str)
    {
        data = *str;
        MCAL_UART_SendData(USARTx, &data, enable);
        MCAL_UART_WAIT_TC(USARTx);
        str++;
    }
}

/**================================================================
 * @Fn				- MCAL_UART_ReceiveString
 * @brief 			- Receive string via UART
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [out] 		- str: pointer to string buffer
 * @param [in] 		- max_len: maximum string length
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_ReceiveString(USART_t* USARTx, char* str, uint16_t max_len)
{
    uint16_t data;
    uint16_t count = 0;

    do
    {
        MCAL_UART_ReceiveData(USARTx, &data, enable);
        str[count] = (char)data;
        count++;
    }
    while((str[count-1] != '\r') && (str[count-1] != '\n') && (count < max_len-1));

    str[count-1] = '\0'; // Null terminate
}
