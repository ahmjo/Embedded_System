#include "Stm32_F103C6_USART_driver.h"


/*
 * =======================================================================================
 * 							Generic Variables
 * =======================================================================================
 */
UART_Config_t* Global_UART1_Config = NULL;
UART_Config_t* Global_UART2_Config = NULL;
UART_Config_t* Global_UART3_Config = NULL;


/*
 * =======================================================================================
 * 							             APIs
 * =======================================================================================
 */

/**================================================================
 * @Fn				- MCAL_UART_Init
 * @brief 			- Initializes UART
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			- NONE
 ==================================================================*/
void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
	uint32_t pclk, BRR;

	if(USARTx == USART1)
		Global_UART1_Config = UART_Config;
	else if(USARTx == USART2)
		Global_UART2_Config = UART_Config;
	else if(USARTx == USART3)
		Global_UART3_Config = UART_Config;

	// Enable Clock for USARTx
	if(USARTx == USART1) RCC_USART1_CLK_EN();
	else if(USARTx == USART2) RCC_USART2_CLK_EN();
	else if(USARTx == USART3) RCC_USART3_CLK_EN();

	// Disable USART before configuration
	USARTx->CR1 &= ~(1 << 13);

	// Configure CR1
	USARTx->CR1 &= ~((1 << 3) | (1 << 2) | (1 << 12) | (1 << 10) | (1 << 9));
	USARTx->CR1 |= UART_Config->USART_Mode;
	USARTx->CR1 |= UART_Config->Payload_Length;
	USARTx->CR1 |= UART_Config->parity;

	// Configure CR2
	USARTx->CR2 &= ~(3 << 12);
	USARTx->CR2 |= UART_Config->StopBits;

	// Configure CR3
	USARTx->CR3 &= ~((1 << 9) | (1 << 8));
	USARTx->CR3 |= UART_Config->HwFlow_CTL;

	// Configure Baudrate
	if(USARTx == USART1) pclk = MCAL_RCC_GetPCLK2Freq();
	else pclk = MCAL_RCC_GetPCLK1Freq();

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
	USARTx->BRR = BRR;

	// Enable Interrupts if needed
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;

		if(USARTx == USART1) NVIC_IRQ37_USART1_EN;
		else if(USARTx == USART2) NVIC_IRQ38_USART2_EN;
		else if(USARTx == USART3) NVIC_IRQ39_USART3_EN;
	}

	// Enable USART
	USARTx->CR1 |= (1 << 13);
}



/**================================================================
 * @Fn				- MCAL_UART_DeInit
 * @brief 			- DEInitializes UART
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_DeInit(USART_t* USARTx)
{
	if(USARTx == USART1)
	{
		RCC_USART1_Reset();
		NVIC_IRQ37_USART1_Disable;
	}
	else if(USARTx == USART2)
	{
		RCC_USART2_Reset();
		NVIC_IRQ38_USART2_Disable;
	}
	else if(USARTx == USART3)
	{
		RCC_USART3_Reset();
		NVIC_IRQ39_USART3_Disable;
	}
}


/**================================================================
 * @fn      		  - MCAL_UART_SendData
 *
 * @brief             - Send Buffer on UART
 *
 * @param [in] 		  - USARTx: where x can be (1..3 depending on device used)
 * @param[in]         - pTxBuffer
 * @param[in]         - PollingEn   Enable pooling or disable it
 *
 * @retval 			  - NONE
 =================================================================*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
	UART_Config_t* UART_Config = NULL;

	if (USARTx == USART1) UART_Config = Global_UART1_Config;
	else if (USARTx == USART2) UART_Config = Global_UART2_Config;
	else if (USARTx == USART3) UART_Config = Global_UART3_Config;
	// wait until TXE flag is set in the SR
	if(PollingEn == enable) while(!(USARTx->SR & 1<<7));

	//Check the USART_WordLength item for 9BIT or 8BIT in a frame
	//	When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	//	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//	because it is replaced by the parity.
	//	When receiving with the parity enabled, the value read in the MSB bit is the received parity
	//	bit.

	if (UART_Config != NULL && UART_Config->Payload_Length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & 0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer & 0xFF);
	}
}



void MCAL_UART_WAIT_TC (USART_t* USARTx )
{
	// wait till TC flag is set in the SR
	while(!(USARTx->SR & 1<<6));
}



void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechism PollingEn)
{
    // Pointer to UART configuration structure
    UART_Config_t* UART_Config = NULL;

    // Assign corresponding UART configuration based on USART peripheral
    if (USARTx == USART1) UART_Config = Global_UART1_Config;
    else if (USARTx == USART2) UART_Config = Global_UART2_Config;
    else if (USARTx == USART3) UART_Config = Global_UART3_Config;

    // Poll on RXNE (Receive Data Register Not Empty) flag if polling mechanism is enabled
    if (PollingEn == enable)
        while (!(USARTx->SR & (1 << 5)));

    // Proceed only if UART configuration is valid
    if (UART_Config != NULL)
    {
        // Check if payload length is 9 bits
        if (UART_Config->Payload_Length == UART_Payload_Length_9B)
        {
            // If parity is disabled, read full 9 bits data from DR register
            if (UART_Config->parity == UART_parity_NONE)
            {
                *pRxBuffer = USARTx->DR;
            }
            else
            {
                // If parity is enabled, the MSB is parity bit, read only 8 bits data
                *pRxBuffer = (USARTx->DR & 0xFF);
            }
        }
        else // Payload length is 8 bits
        {
            if (UART_Config->parity == UART_parity_NONE)
            {
                // No parity, read 8 bits data
                *pRxBuffer = (USARTx->DR & 0xFF);
            }
            else
            {
                // Parity enabled, read 7 bits data (MSB is parity bit)
                *pRxBuffer = (USARTx->DR & 0x7F);
            }
        }
    }
}



/**================================================================
 * @Fn				- MCAL_UART_GPIO_Set_Pins
 * @brief 			- Initializes GPIO Pins
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- NONE
 =================================================================*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
	GPIO_Config_t PinCfg;
	if(USARTx == USART1)
	{
		//PA9 TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		if(Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS || Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			//PA11 CTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_11;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

		if(Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS || Global_UART1_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			//PA12 RTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_12;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}

	else if(USARTx == USART2)
	{
		//PA2 TX
		//PA3 RX
		//PA0 CTS
		//PA1 RTS

		//PA2 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		//PA3 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		if(Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS || Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			//PA0 CTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_0;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

		if(Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS || Global_UART2_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			//PA1 RTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_1;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}

	else if(USARTx == USART3)
	{
		//PB10 TX
		//PB11 RX
		//PB13 CTS
		//PA14 RTS

		//PB10 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		//PB11 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		if(Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS || Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			//PB13 CTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

		if(Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS || Global_UART3_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS)
		{
			//PA14 RTS
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}
}


/*
 * =======================================================================================
 * 						ISR Functions
 * =======================================================================================
 */

void USART1_IRQHandler(void)
{
	//RXNE interrupt
	if(((USART1->SR) & (1<<5)) && ((USART1->CR1) & (1<<5)) )
	{
		Global_UART1_Config->P_IRQ_CallBack();
	}
}

void USART2_IRQHandler(void)
{
	//RXNE interrupt
	if(((USART2->SR) & (1<<5)) && ((USART2->CR1) & (1<<5)) )
	{
		Global_UART2_Config->P_IRQ_CallBack();
	}
}

void USART3_IRQHandler(void)
{
	//RXNE interrupt
	if(((USART3->SR) & (1<<5)) && ((USART3->CR1) & (1<<5)) )
	{
		Global_UART3_Config->P_IRQ_CallBack();
	}
}
