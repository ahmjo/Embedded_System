/*
 * Stm32_F103C6_SPI_driver.c
 *
 *  Created on: Jun 17, 2025
 *      Author: AAMA
 */


#include "Stm32_F103C6_SPI_driver.h"


/*
 * =======================================================================================
 * 							Generic Variables
 * =======================================================================================
 */
SPI_Config_t* Global_SPI_Config[2] = {NULL,NULL};


/*
 * =======================================================================================
 * 							Generic Macros
 * =======================================================================================
 */
#define SPI1_Index		0
#define SPI2_Index		1

#define SPI_SR_TXE		((uint8_t)0x02)		//transmit buffer empty
#define SPI_SR_RXNE		((uint8_t)0x01)		//receive buffer not empty

/*
 * =======================================================================================
 * 							             APIs
 * =======================================================================================
 */

/**================================================================
 * @Fn				- MCAL_SPI_Init
 * @brief 			- Initializes the SPI peripheral according to the specified parameters
 * @param [in] 		- SPIx: where x can be (1..2 depending on device used)
 * @param [in] 		- SPI_Config: pointer to a structure that contains the configuration information for SPI (Master/Slave, Clock Polarity, Phase, etc.)
 * @retval 			- NONE
 * Note				- This function enables the SPI clock and configures the SPI CR1 and CR2 registers.
 ==================================================================*/
void MCAL_SPI_Init(SPI_t* SPIx, SPI_Config_t* SPI_Config)
{
	//Sefety for registers
	uint16_t tmpreg_CR1 = 0;
	uint16_t tmpreg_CR2 = 0;

	if(SPIx == SPI1)
	{
		Global_SPI_Config[SPI1_Index] = SPI_Config;
		RCC_SPI1_CLK_EN();
	}
	else if(SPIx == SPI2)
	{
		Global_SPI_Config[SPI2_Index] = SPI_Config;
		RCC_SPI2_CLK_EN();
	}

	//Enable SPI CR1:Bit6 SPE: SPI enable
	tmpreg_CR1 = (0x1<<6);

	//Master or Slave
	tmpreg_CR1 |= SPI_Config->Device_Mode;

	//SPI_Communication_Mode
	tmpreg_CR1 |= SPI_Config->Communication_Mode;

	//SPI_Frame_Format
	tmpreg_CR1 |= SPI_Config->Frame_format;

	//SPI_DataSize
	tmpreg_CR1 |= SPI_Config->DataSize;

	//SPI_Clock_Phase
	tmpreg_CR1 |= SPI_Config->CLKPhase;

	//SPI_Clock_Polarity
	tmpreg_CR1 |= SPI_Config->CLKPolarity;

	//=======================NSS==============================
	if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_OP_EN)
	{
		tmpreg_CR2 |= SPI_Config->NSS;
	}
	else if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_OP_Disable)
	{
		tmpreg_CR2 &= SPI_Config->NSS;
	}
	else
	{
		tmpreg_CR1 |= SPI_Config->NSS;
	}
	//========================================================
	//SPI_BandRatePrescaler
	tmpreg_CR1 |= SPI_Config->SPI_BandRatePrescaler;

	//Interrupt
	if(SPI_Config->IRQ_Enable != SPI_IRQ_Enable_NONE)
	{
		tmpreg_CR2 |= SPI_Config->IRQ_Enable;
		if(SPIx == SPI1)
		{
			NVIC_IRQ35_SPI1_EN;
		}
		else if(SPIx == SPI2)
		{
			NVIC_IRQ36_SPI2_EN;
		}
	}


	SPIx->CR1 = tmpreg_CR1;
	SPIx->CR2 = tmpreg_CR2;
}


/**================================================================
 * @Fn				- MCAL_SPI_DeInit
 * @brief 			- Resets the SPI peripheral registers and disables the SPI clock
 * @param [in] 		- SPIx: where x can be (1..2 depending on device used)
 * @retval 			- NONE
 * Note				- This function resets the SPI peripheral to its default state.
 ==================================================================*/
void MCAL_SPI_DeInit(SPI_t* SPIx)
{
	if(SPIx == SPI1)
	{
		NVIC_IRQ35_SPI1_Disable;
		RCC_SPI1_Reset();
	}
	else if(SPIx == SPI2)
	{
		NVIC_IRQ36_SPI2_Disable;
		RCC_SPI2_Reset();
	}
}


/**================================================================
 * @Fn				- MCAL_SPI_SendData
 * @brief 			- Transmits data over SPI
 * @param [in] 		- SPIx: where x can be (1..2 depending on device used)
 * @param [in] 		- pTxBuffer: Pointer to the data buffer to be sent
 * @param [in] 		- PollingEn: Specifies whether the function will use polling or not
 * 						@ref PollingMechism (Enable_Polling or Disable_Polling)
 * @retval 			- NONE
 * Note				- This function waits for TXE flag if polling is enabled,
 * 					  then writes the data to the SPI data register.
 ==================================================================*/
void MCAL_SPI_SendData(SPI_t* SPIx,const uint16_t* pTxBuffer, enum PollingMechism PollingEn)
{
	if(PollingEn == PollingEnable) while(!((SPIx)->SR & SPI_SR_TXE));

	if (Global_SPI_Config[SPIx == SPI1 ? SPI1_Index : SPI2_Index]->DataSize == SPI_DataSize_16BIT)
	{
		SPIx->DR = *((uint16_t*)pTxBuffer);
	}
	else
	{
		*((uint8_t*)&SPIx->DR) = *((uint8_t*)pTxBuffer);
	}
}


/**================================================================
 * @Fn				- MCAL_SPI_ReceiveData
 * @brief 			- Receives data over SPI
 * @param [in] 		- SPIx: where x can be (1..2 depending on device used)
 * @param [out] 	- pTxBuffer: Pointer to the buffer where the received data will be stored
 * @param [in] 		- PollingEn: Specifies whether the function will use polling or not
 * 						@ref PollingMechism (Enable_Polling or Disable_Polling)
 * @retval 			- NONE
 * Note				- This function waits for RXNE flag if polling is enabled,
 * 					  then reads the data from the SPI data register.
 ==================================================================*/
void MCAL_SPI_ReceiveData(SPI_t* SPIx, uint16_t* pTxBuffer, enum PollingMechism PollingEn)
{
	if(PollingEn == PollingEnable) while(!((SPIx)->SR & SPI_SR_RXNE));

	if(Global_SPI_Config[SPIx == SPI1 ? SPI1_Index : SPI2_Index]->DataSize == SPI_DataSize_16BIT)
	{
		*pRxBuffer = SPIx->DR;
	}
	else
	{
		*((uint8_t*)pRxBuffer) = *((uint8_t*)&SPIx->DR);
	}
}


/**================================================================
 * @Fn				- MCAL_SPI_Tx_Rx
 * @brief 			- Transmits and receives a single frame of data simultaneously over SPI (full-duplex)
 * @param [in] 		- SPIx: where x can be (1..2 depending on the device used)
 * @param [in,out] 	- pTxBuffer: Pointer to the data to be sent.
 *								  After the function returns, it holds the received data.
 * @param [in] 		- PollingEn: Specifies whether to use polling mechanism
 * 						@ref PollingMechism (Enable_Polling or Disable_Polling)
 * @retval 			- NONE
 * Note				- In full-duplex SPI, sending and receiving occur simultaneously.
 * 					  This function sends the data in *pTxBuffer and overwrites it with received data.
 ==================================================================*/
void MCAL_SPI_Tx_Rx(SPI_t* SPIx, uint16_t* pTxBuffer, enum PollingMechism PollingEn)
{
	if(PollingEn == PollingEnable) while(!((SPIx)->SR & SPI_SR_TXE));
	SPIx->DR = *pTxBuffer;

	if(PollingEn == PollingEnable) while(!((SPIx)->SR & SPI_SR_RXNE));
	*pTxBuffer = SPIx->DR;
}


/**================================================================
 * @Fn				- MCAL_SPI_GPIO_Set_Pins
 * @brief 			- Configures the GPIO pins associated with the specified SPI peripheral
 * @param [in] 		- SPIx: where x can be (1..2 depending on the device used)
 * @retval 			- NONE
 * Note				- This function sets the alternate function, mode, speed, and pull configurations
 * 					  for SPI pins (SCK, MISO, MOSI) based on the SPI mode (Master/Slave).
 * 					  - In Master mode:
 * 							SCK and MOSI are configured as Alternate Function Push-Pull outputs
 * 							MISO is configured as Input Floating
 * 					  - In Slave mode:
 * 							SCK and MOSI are configured as Input Floating
 * 							MISO is configured as Alternate Function Push-Pull output
 * 					  - NSS pin is configured only if hardware slave management is enabled.
 ==================================================================*/
void MCAL_SPI_GPIO_Set_Pins(SPI_t* SPIx)
{
	GPIO_Config_t PinCfg;
	//*************************************SPI1***************************************
	//=========================== SPI1 =========================================
	if(SPIx == SPI1)
	{
		// PA4  : SPI1_NSS
		// PA5  : SPI1_SCK
		// PA6  : SPI1_MISO
		// PA7  : SPI1_MOSI

		//=========================== MASTER ====================================
		if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_Device_Mode_MASTER)
		{
			// PA4 : SPI1_NSS
			switch(Global_SPI_Config[SPI1_Index]->NSS)
			{
			case SPI_NSS_HW_Master_SS_OP_Disable:
				// HW Master/Slave Input Floating
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
				PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;
			case SPI_NSS_HW_Master_SS_OP_EN:
				// HW Master/NSS Alternate Function Push-Pull output
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
				PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
				PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;
			}

			// PA5 : SPI1_SCK
			// Master Alternate Function Push-Pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);

			// PA6 : SPI1_MISO
			// Full duplex / Master Input Floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);

			// todo: support half duplex and simplex

			// PA7 : SPI1_MOSI
			// Full duplex / Master Alternate Function Push-Pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
		//=========================== SLAVE ====================================
		else
		{
			// PA5 : SPI1_SCK
			// Slave Input Floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);

			// PA7 : SPI1_MOSI
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);

			// PA6 : SPI1_MISO
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOA, &PinCfg);

			// PA4 : SPI1_NSS
			if (Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
				PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;	// Input Floating
				MCAL_GPIO_Init(GPIOA, &PinCfg);
			}
		}
	}
	//*************************************SPI2***************************************
	else if(SPIx == SPI2)
	{
		//PB12 : SPI2_NSS
		//PB13 : SPI2_SCK
		//PB14 : SPI2_MISO
		//PB15 : SPI2_MOSI

		//===========================MASTER=========================================
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_Device_Mode_MASTER)
		{
			//PB12 : SPI2_NSS
			switch(Global_SPI_Config[SPI2_Index]->NSS)
			{
			case SPI_NSS_HW_Master_SS_OP_Disable:
				//HW Master/Slave Input Floating
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
				PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
				MCAL_GPIO_Init(GPIOB, &PinCfg);
				break;
			case SPI_NSS_HW_Master_SS_OP_EN:
				//HW Master/NSS Alternate Function Push-Pull output
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
				PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
				PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
				MCAL_GPIO_Init(GPIOB, &PinCfg);
				break;
			}

			//PB13 : SPI2_SCK
			//Master Alternate Function Push-Pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

			//PB14 : SPI2_MISO (Supported only full duplex)
			//Full duplex / Master Input Floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

			//todo to support half duplex and simplex

			//PB15 : SPI2_MOSI
			//Full duplex / Master Alternate Function Push-Pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
		//===========================SLAVE=========================================
		else
		{
			//PB13 : SPI2_SCK
			//Slave Input Floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

			//PB15 : SPI2_MOSI
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
			PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

			//PB14 : SPI2_MISO
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

			//PB12 : SPI2_NSS
			if (Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_HW_Slave)
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
				PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;	// Input Floating
				MCAL_GPIO_Init(GPIOB, &PinCfg);
			}
		}
	}
}



/*
 * =======================================================================================
 * 						ISR Functions
 * =======================================================================================
 */


void SPI1_IRQHandler(void)
{
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE = ((SPI1->SR & (1<<1)) >> 1);
	IRQ_SRC.RXNE = ((SPI1->SR & (1<<0)) >> 0);
	IRQ_SRC.ERRI = ((SPI1->SR & (1<<4)) >> 4);
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(IRQ_SRC);
}

void SPI2_IRQHandler(void)
{
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE = ((SPI2->SR & (1<<1)) >> 1);
	IRQ_SRC.RXNE = ((SPI2->SR & (1<<0)) >> 0);
	IRQ_SRC.ERRI = ((SPI2->SR & (1<<4)) >> 4);
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(IRQ_SRC);
}
