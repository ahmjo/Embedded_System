#include "Stm32_F103C6_USART_driver.h"

// Use only one global config pointer
UART_Config_t* Global_UART_Config = NULL;

void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
    uint32_t pclk, BRR;

    // Save user config globally
    Global_UART_Config = UART_Config;

    if (USARTx == USART1) RCC_USART1_CLK_EN();
    else if (USARTx == USART2) RCC_USART2_CLK_EN();
    else if (USARTx == USART3) RCC_USART3_CLK_EN();

    USARTx->CR1 &= ~(1 << 13);
    USARTx->CR1 &= ~((1 << 3) | (1 << 2) | (1 << 12) | (1 << 10) | (1 << 9));
    USARTx->CR1 |= UART_Config->USART_Mode;
    USARTx->CR1 |= UART_Config->Payload_Length;
    USARTx->CR1 |= UART_Config->parity;

    USARTx->CR2 &= ~(3 << 12);
    USARTx->CR2 |= UART_Config->StopBits;

    USARTx->CR3 &= ~((1 << 9) | (1 << 8));
    USARTx->CR3 |= UART_Config->HwFlow_CTL;

    pclk = (USARTx == USART1) ? MCAL_RCC_GetPCLK2Freq() : MCAL_RCC_GetPCLK1Freq();
    BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
    USARTx->BRR = BRR;

    if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE) {
        USARTx->CR1 |= UART_Config->IRQ_Enable;
        if (USARTx == USART1) NVIC_IRQ37_USART1_EN;
        else if (USARTx == USART2) NVIC_IRQ38_USART2_EN;
        else if (USARTx == USART3) NVIC_IRQ39_USART3_EN;
    }

    USARTx->CR1 |= (1 << 13);
}

void MCAL_UART_DeInit(USART_t* USARTx)
{
    if (USARTx == USART1) { RCC_USART1_Reset(); NVIC_IRQ37_USART1_Disable; }
    else if (USARTx == USART2) { RCC_USART2_Reset(); NVIC_IRQ38_USART2_Disable; }
    else if (USARTx == USART3) { RCC_USART3_Reset(); NVIC_IRQ39_USART3_Disable; }
}

void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
    if (PollingEn == enable)
        while (!(USARTx->SR & (1 << 7)));

    if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
        USARTx->DR = (*pTxBuffer & 0x01FF);
    else
        USARTx->DR = (*pTxBuffer & 0xFF);
}

void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer , enum Polling_mechism PollingEn)
{
    if (PollingEn == enable)
        while (!(USARTx->SR & (1 << 5)));

    if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B) {
        if (Global_UART_Config->parity == UART_parity_NONE)
            *pRxBuffer = USARTx->DR;
        else
            *pRxBuffer = (USARTx->DR & 0xFF);
    } else {
        if (Global_UART_Config->parity == UART_parity_NONE)
            *pRxBuffer = (USARTx->DR & 0xFF);
        else
            *pRxBuffer = (USARTx->DR & 0x7F);
    }
}

void MCAL_UART_WAIT_TC(USART_t* USARTx) {
    while (!(USARTx->SR & 1 << 6));
}

void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
    GPIO_Config_t PinCfg;

    if (USARTx == USART1) {
        PinCfg.GPIO_PinNumber = GPIO_PIN_9;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        PinCfg.GPIO_PinNumber = GPIO_PIN_10;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_AF;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_CTS || Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS) {
            PinCfg.GPIO_PinNumber = GPIO_PIN_11;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }
        if (Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS || Global_UART_Config->HwFlow_CTL == UART_HwFlow_CTL_RTS_CTS) {
            PinCfg.GPIO_PinNumber = GPIO_PIN_12;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }
    }
    // Apply same for USART2 / USART3 if needed
}

void USART1_IRQHandler(void)
{
    if ((USART1->SR & (1 << 5)) && (USART1->CR1 & (1 << 5)))
        Global_UART_Config->P_IRQ_CallBack();
}

void USART2_IRQHandler(void)
{
    if ((USART2->SR & (1 << 5)) && (USART2->CR1 & (1 << 5)))
        Global_UART_Config->P_IRQ_CallBack();
}

void USART3_IRQHandler(void)
{
    if ((USART3->SR & (1 << 5)) && (USART3->CR1 & (1 << 5)))
        Global_UART_Config->P_IRQ_CallBack();
}
