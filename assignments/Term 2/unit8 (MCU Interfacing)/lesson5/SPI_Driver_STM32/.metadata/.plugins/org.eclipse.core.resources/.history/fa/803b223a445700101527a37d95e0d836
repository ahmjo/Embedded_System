#ifndef INC_STM32F103C6_USART_DRIVERS_H_
#define INC_STM32F103C6_USART_DRIVERS_H_


#include "stm32f103x6.h"
#include "Stm32_F103C6_gpio_driver.h"
#include "Stm32_F103C6_RCC_driver.h"


//Configuration Structure
typedef struct
{
	uint8_t		USART_Mode; //Specifies Tx/Rx En/Disable
							//This parameter must be set based on @ref UART_Mode_define

	uint32_t		BaudRate;	//this member configures the UART communication baud rate
							//This parameter must be set based on @ref UART_BaudRate_define

	uint8_t		Payload_Length; //Specifies the number of data bits transmitted or recived in a frame
								//This parameter must be set based on @ref UART_Payload_Length_define

	uint8_t		parity; //Specifies the Parity Mode
						//This parameter must be set based on @ref UART_parity_define

	uint8_t		StopBits; //Specifies the number of Stop bits transmitted
						  //This parameter must be set based on @ref UART_StopBits_define

	uint8_t		HwFlow_CTL; //Specifies whether the HW Flow Control mode is Enable or Disable
							//This parameter must be set based on @ref UART_HwFlow_CTL_define

	uint8_t		IRQ_Enable;	//Enable & Disable IRQ TX/RX
							//This parameter must be set based on @ref UART_IRQ_Enable_define

	void(*P_IRQ_CallBack)(void); //Set the C Function() which will be called once the IRQ  Happen
}UART_Config_t;



//--------------------------------------------------
//-*-*-*-*-*-*-*-*-*-*-*-
//Macros for Configurations
//-*-*-*-*-*-*-*-*-*-*-*

//@ref UART_Mode_define
#define UART_Mode_RX			(uint32_t(1<<2)) //Bit 2 RE: Receiver enable
#define UART_Mode_TX 			((uint32_t)(1<<3)) //Bit 3 TE: Transmitter enable
#define UART_Mode_TX_RX			(uint32_t) (1<<3 | 1<<2)

//@ref UART_BaudRate_define
#define UART_BaudRate_2400		2400
#define UART_BaudRate_9600		9600
#define UART_BaudRate_19200		19200
#define UART_BaudRate_57600		57600
#define UART_BaudRate_115200	115200
#define UART_BaudRate_230400	230400
#define UART_BaudRate_460800	460800
#define UART_BaudRate_921600	921600
#define UART_BaudRate_2250000	2250000
#define UART_BaudRate_4500000	4500000

//@ref UART_Payload_Length_define
#define UART_Payload_Length_8B		(uint32_t)(0)
#define UART_Payload_Length_9B		(uint32_t)(1<<12)

//@ref UART_parity_define
#define UART_parity_NONE			(uint32_t)(0)
#define UART_parity_EVEN			(uint32_t)(1<<10)
#define UART_parity_ODD				(uint32_t)(1<<10 | 1<<9)

//@ref UART_StopBits_define
#define UART_StopBits_half			(uint32_t)(1<<12)
#define UART_StopBits_1				(uint32_t)(0)
#define UART_StopBits_1_half		(uint32_t)(3<<12)
#define UART_StopBits_2				(uint32_t)(2<<12)

//@ref UART_HwFlow_CTL_define
#define UART_HwFlow_CTL_NONE 		(uint32_t)(0)
#define UART_HwFlow_CTL_RTS			(uint32_t)(1<<8)
#define UART_HwFlow_CTL_CTS			(uint32_t)(1<<9)
#define UART_HwFlow_CTL_RTS_CTS		(uint32_t)(1<<9 | 1<<8)

//@ref UART_IRQ_Enable_define
#define UART_IRQ_Enable_NONE                      		(uint32_t)(0)
#define UART_IRQ_Enable_TXE                       		(uint32_t) (1<<7) //Transmit data register empty
#define UART_IRQ_Enable_TC                     			((uint32_t)(1<<6)) //Transmission complete
#define UART_IRQ_Enable_RXNEIE                       	(uint32_t) (1<<5) //Received data ready to be read & Overrun error detected
#define UART_IRQ_Enable_PE                       	     (uint32_t) (1<<8) //Parity error


//BaudRate Calculation
//USARTDIV = fclk / (16*Baudrate)
//USARTDIV_MUL100 = uint32((100*fclk ) / (16*Baudrate) = (25*fclk) / (4*Baudrate))
//DIV_Mantissa_MUL100 = Integer Part(USARTDIV)*100
//DIV_Mantissa = Integer Part(USARTDIV)
//DIV_Fraction = ((USARTDIV_MUL100 - DIV_Mantissa_MUL100)*16) / 100
#define USARTDIV(_PCLK_,_BAUD_)             ((uint32_t)((_PCLK_)/(16 * (_BAUD_))))
#define USARTDIV_MUL100(_PCLK_,_BAUD_)      ((uint32_t)((25 * (_PCLK_)) / (4  * (_BAUD_))))
#define Mantissa_MUL100(_PCLK_,_BAUD_)      ((uint32_t)(USARTDIV(_PCLK_, _BAUD_) * 100))
#define Mantissa(_PCLK_,_BAUD_)             ((uint32_t)(USARTDIV(_PCLK_, _BAUD_)))
#define DIV_Fraction(_PCLK_,_BAUD_)         ((uint32_t)(((USARTDIV_MUL100(_PCLK_, _BAUD_) -  Mantissa_MUL100(_PCLK_, _BAUD_)) * 16 ) / 100))
#define UART_BRR_Register(_PCLK_,_BAUD_)    (((Mantissa(_PCLK_, _BAUD_)) << 4) | ((DIV_Fraction(_PCLK_, _BAUD_)) & 0xF))




enum Polling_mechism
{
	enable,
	disable
};

/*
 * =======================================================================================
 * 							APIs Supported by "MCAL UART DRIVER"
 * =======================================================================================
 */

void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config);
void MCAL_UART_DeInit(USART_t* USARTx);

void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx);

void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn);
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn );

void MCAL_UART_WAIT_TC (USART_t* USARTx );

//todo MCAL_USART_LIN_Init ()  					//LIN
//todo MCAL_USART_Init ()  						//Synchronous
//todo  MCAL_USART_DMA_Init () 					// Multibuffer Communication



#endif /* INC_STM32F103C6_USART_DRIVERS_H_ */
