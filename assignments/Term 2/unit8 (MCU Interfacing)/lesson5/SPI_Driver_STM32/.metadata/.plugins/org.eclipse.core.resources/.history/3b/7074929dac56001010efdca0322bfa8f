#include "Stm32_F103C6_USART_driver.h"


// Initialize UART peripheral
void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
	// Enable clock for USARTx
	if(USARTx == USART1)
	{
		RCC_USART1_CLK_EN();
	}
	else if(USARTx == USART2)
	{
		RCC_USART2_CLK_EN();
	}
	else if(USARTx == USART3)
	{
		RCC_USART3_CLK_EN();
	}

	// Configure USART CR1 register
	USARTx->CR1 = 0;

	// Set mode (RX, TX or RX+TX)
	USARTx->CR1 |= UART_Config->USART_Mode;

	// Payload length (8 or 9 bits)
	if(UART_Config->Payload_Length == UART_Payload_Length_9B)
	{
		USARTx->CR1 |= UART_Payload_Length_9B;
	}

	// Parity configuration
	USARTx->CR1 |= UART_Config->parity;

	// Enable or disable interrupts
	USARTx->CR1 |= UART_Config->IRQ_Enable;

	// Configure CR2 for stop bits
	USARTx->CR2 = 0;
	USARTx->CR2 |= UART_Config->StopBits;

	// Configure CR3 for hardware flow control
	USARTx->CR3 = 0;
	USARTx->CR3 |= UART_Config->HwFlow_CTL;

	// Baud rate calculation (Assuming PCLK frequency = 8 MHz or 72 MHz)
	// You may want to change it according to your clock setup.
	uint32_t PCLK_Freq = 8000000; // Example: 8 MHz APB clock
	if(USARTx == USART1) PCLK_Freq = 72000000; // APB2 clock for USART1
	if(USARTx == USART2 || USARTx == USART3) PCLK_Freq = 36000000; // APB1 clock

	USARTx->BRR = UART_BRR_Register(PCLK_Freq, UART_Config->BaudRate);

	// Enable USART peripheral
	SET_BIT(USARTx->CR1, 13); // UE bit

	// Enable Transmitter and/or Receiver again if not already set
	// (Handled by USART_Mode config)

	// Enable NVIC interrupts if any
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
	{
		if(USARTx == USART1) NVIC_IRQ37_USART1_EN;
		else if(USARTx == USART2) NVIC_IRQ38_USART2_EN;
		else if(USARTx == USART3) NVIC_IRQ39_USART3_EN;
	}
}


// Reset UART peripheral to default state
void MCAL_UART_DeInit(USART_t* USARTx)
{
	if(USARTx == USART1)
	{
		RCC_USART1_Reset();
		NVIC_IRQ37_USART1_Disable;
	}
	else if(USARTx == USART2)
	{
		RCC_USART2_Reset();
		NVIC_IRQ38_USART2_Disable;
	}
	else if(USARTx == USART3)
	{
		RCC_USART3_Reset();
		NVIC_IRQ39_USART3_Disable;
	}
}


// Setup GPIO pins for UART according to USARTx
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
	if(USARTx == USART1)
	{
		// Enable GPIO clocks for pins used by USART1 (PA9=TX, PA10=RX)
		RCC_GPIOA_CLK_EN();

		// PA9 as Alternate function push-pull (TX)
		GPIO_Config_t pinCfg;
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
		pinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		pinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOA, &pinCfg);

		// PA10 as Input floating (RX)
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
		pinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		MCAL_GPIO_Init(GPIOA, &pinCfg);
	}
	else if(USARTx == USART2)
	{
		// USART2 pins: PA2=TX, PA3=RX
		RCC_GPIOA_CLK_EN();

		GPIO_Config_t pinCfg;
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
		pinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		pinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOA, &pinCfg);

		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
		pinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		MCAL_GPIO_Init(GPIOA, &pinCfg);
	}
	else if(USARTx == USART3)
	{
		// USART3 pins: PB10=TX, PB11=RX
		RCC_GPIOB_CLK_EN();

		GPIO_Config_t pinCfg;
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
		pinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		pinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOB, &pinCfg);

		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
		pinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		MCAL_GPIO_Init(GPIOB, &pinCfg);
	}
}


// Send data buffer (blocking mode if polling enabled)
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
	uint8_t* pData = (uint8_t*)pTxBuffer;

	while(*pData != '\0') // Send until null-terminator
	{
		if(PollingEn == enable)
		{
			// Wait until TXE (Transmit Data Register Empty) flag is set
			while(!(USARTx->SR & (1<<7)) );
		}

		// Check payload length
		if(USARTx->CR1 & UART_Payload_Length_9B)
		{
			// 9-bit data
			USARTx->DR = *((uint16_t*)pData);
			pData += 2;  // 2 bytes for 9-bit data (16 bits container)
		}
		else
		{
			// 8-bit data
			USARTx->DR = *pData;
			pData++;
		}
	}

	// Wait for Transmission Complete flag if polling enabled
	if(PollingEn == enable)
	{
		MCAL_UART_WAIT_TC(USARTx);
	}
}


// Receive data buffer (blocking mode if polling enabled)
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechism PollingEn)
{
	uint8_t* pData = (uint8_t*)pRxBuffer;

	while(1) // You may want to limit this in real code or add timeout
	{
		if(PollingEn == enable)
		{
			// Wait until RXNE (Read Data Register Not Empty) flag is set
			while(!(USARTx->SR & (1<<5)) );
		}

		// Check payload length
		if(USARTx->CR1 & UART_Payload_Length_9B)
		{
			// 9-bit data
			*((uint16_t*)pData) = USARTx->DR & 0x1FF; // 9 bits mask
			pData += 2;
		}
		else
		{
			// 8-bit data
			*pData = USARTx->DR & 0xFF;
			pData++;
		}

		// For demo: break after one char received
		break;
	}
}


// Wait for Transmission Complete (TC) flag
void MCAL_UART_WAIT_TC(USART_t* USARTx)
{
	while(!(USARTx->SR & (1 << 6))); // Wait for TC flag
}

