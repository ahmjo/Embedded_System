/*
 * STM32_F103C6_USART_Driver.c
 *
 *  Created on: Jul 1, 2025
 *      Author: Ahmed
 */

#include "STM32_F103C6_USART_Driver.h"

UART_Config_t* Global_UART_Config[3] = {NULL, NULL, NULL};

void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Config)
{
	uint32_t pclk, BRR;

	// Save config globally
	if(USARTx == USART1)
	{
		Global_UART_Config[0] = UART_Config;
		RCC_USART1_CLK_EN();
	}
	else if(USARTx == USART2)
	{
		Global_UART_Config[1] = UART_Config;
		RCC_USART2_CLK_EN();
	}
	else if(USARTx == USART3)
	{
		Global_UART_Config[2] = UART_Config;
		RCC_USART3_CLK_EN();
	}

	USARTx->CR1 |= 1 << 13; // UE
	USARTx->CR1 |= UART_Config->USART_Mode;
	USARTx->CR1 |= UART_Config->Payload_Length;
	USARTx->CR1 |= UART_Config->parity;
	USARTx->CR2 |= UART_Config->StopBits;
	USARTx->CR3 |= UART_Config->HwFlow_CTL;

	if(USARTx == USART1)
		pclk = MCAL_RCC_GET_PCLK2();
	else
		pclk = MCAL_RCC_GET_PCLK1();

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
	USARTx->BRR = BRR;

	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;
		if(USARTx == USART1) NVIC_IRQ37_USART1_Enable();
		else if(USARTx == USART2) NVIC_IRQ38_USART2_Enable();
		else if(USARTx == USART3) NVIC_IRQ39_USART3_Enable();
	}
}

void MCAL_UART_DeInit(USART_t* USARTx)
{
	if(USARTx == USART1)
	{
		RCC_USART1_CLK_DI();
		NVIC_IRQ37_USART1_Disable();
		Global_UART_Config[0] = NULL;
	}
	else if(USARTx == USART2)
	{
		RCC_USART2_CLK_DI();
		NVIC_IRQ38_USART2_Disable();
		Global_UART_Config[1] = NULL;
	}
	else if(USARTx == USART3)
	{
		RCC_USART3_CLK_DI();
		NVIC_IRQ39_USART3_Disable();
		Global_UART_Config[2] = NULL;
	}
}

void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
	GPIO_Config_t PinCfg;

	if(USARTx == USART1)
	{
		// PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		GPIO_Init(GPIOA, &PinCfg);

		// PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		GPIO_Init(GPIOA, &PinCfg);

		if(Global_UART_Config[0]->HwFlow_CTL & UART_HwFlow_CTL_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_11;
			GPIO_Init(GPIOA, &PinCfg);
		}
		if(Global_UART_Config[0]->HwFlow_CTL & UART_HwFlow_CTL_RTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_12;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			GPIO_Init(GPIOA, &PinCfg);
		}
	}
	else if(USARTx == USART2)
	{
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		GPIO_Init(GPIOA, &PinCfg);

		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		GPIO_Init(GPIOA, &PinCfg);

		if(Global_UART_Config[1]->HwFlow_CTL & UART_HwFlow_CTL_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_0;
			GPIO_Init(GPIOA, &PinCfg);
		}
		if(Global_UART_Config[1]->HwFlow_CTL & UART_HwFlow_CTL_RTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_1;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			GPIO_Init(GPIOA, &PinCfg);
		}
	}
	else if(USARTx == USART3)
	{
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
		GPIO_Init(GPIOB, &PinCfg);

		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
		GPIO_Init(GPIOB, &PinCfg);

		if(Global_UART_Config[2]->HwFlow_CTL & UART_HwFlow_CTL_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			GPIO_Init(GPIOB, &PinCfg);
		}
		if(Global_UART_Config[2]->HwFlow_CTL & UART_HwFlow_CTL_RTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
			PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			GPIO_Init(GPIOB, &PinCfg);
		}
	}
}

void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
	if(PollingEn == enable)
		while(!(USARTx->SR & (1<<7)));

	uint8_t index = (USARTx == USART1) ? 0 : (USARTx == USART2) ? 1 : 2;
	if(Global_UART_Config[index]->Payload_Length == UART_Payload_Length_9B)
		USARTx->DR = (*pTxBuffer & 0x1FF);
	else
		USARTx->DR = (*pTxBuffer & 0xFF);
}

void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechism PollingEn)
{
	if(PollingEn == enable)
		while(!(USARTx->SR & (1<<5)));

	uint8_t index = (USARTx == USART1) ? 0 : (USARTx == USART2) ? 1 : 2;
	if(Global_UART_Config[index]->Payload_Length == UART_Payload_Length_9B)
	{
		if(Global_UART_Config[index]->parity == UART_parity_NONE)
			*pRxBuffer = USARTx->DR;
		else
			*pRxBuffer = (USARTx->DR & 0xFF);
	}
	else
	{
		if(Global_UART_Config[index]->parity == UART_parity_NONE)
			*pRxBuffer = (USARTx->DR & 0xFF);
		else
			*pRxBuffer = (USARTx->DR & 0x7F);
	}
}

void MCAL_UART_WAIT_TC (USART_t* USARTx )
{
	while(!(USARTx->SR & (1<<6)));
}

void USART1_IRQHandler(void)
{
	if(Global_UART_Config[0] && Global_UART_Config[0]->P_IRQ_CallBack)
		Global_UART_Config[0]->P_IRQ_CallBack();
}

void USART2_IRQHandler(void)
{
	if(Global_UART_Config[1] && Global_UART_Config[1]->P_IRQ_CallBack)
		Global_UART_Config[1]->P_IRQ_CallBack();
}

void USART3_IRQHandler(void)
{
	if(Global_UART_Config[2] && Global_UART_Config[2]->P_IRQ_CallBack)
		Global_UART_Config[2]->P_IRQ_CallBack();
}
