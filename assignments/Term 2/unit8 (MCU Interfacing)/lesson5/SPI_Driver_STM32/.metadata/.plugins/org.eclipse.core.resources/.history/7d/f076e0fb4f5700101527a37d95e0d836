#include "Stm32_F103C6_USART_driver.h".h"

UART_Config* Global_UART_Config = NULL;

void MCAL_UART_Init(USART_t *USARTx, UART_Config *UART_Config)
{
    Global_UART_Config = UART_Config;
    uint32_t pclk, BRR;

    // Enable USART clock
    if (USARTx == USART1)
        RCC_USART1_CLK_EN();
    else if (USARTx == USART2)
        RCC_USART2_CLK_EN();
    else if (USARTx == USART3)
        RCC_USART3_CLK_EN();

    // Enable USART (UE bit 13)
    USARTx->CR1 |= (1 << 13);

    // Enable Tx and Rx
    USARTx->CR1 |= UART_Config->USART_Mode;

    // Payload length (M bit 12)
    USARTx->CR1 |= UART_Config->Payload_Length;

    // Parity control (PCE bit 10, PS bit 9)
    USARTx->CR1 |= UART_Config->Parity;

    // Stop bits (STOP bits 13:12 in CR2)
    USARTx->CR2 |= UART_Config->StopBits;

    // Hardware flow control (CTS bit 9, RTS bit 8 in CR3)
    USARTx->CR3 |= UART_Config->HwFlowCtl;

    // Baud rate calculation
    if (USARTx == USART1)
        pclk = MCAL_RCC_GetPCLK2Freq();
    else
        pclk = MCAL_RCC_GetPCLK1Freq();

    BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
    USARTx->BRR = BRR;

    // IRQ Enable
    if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
    {
        USARTx->CR1 |= UART_Config->IRQ_Enable;

        if (USARTx == USART1)
            NVIC_IRQ37_USART1_EN;
        else if (USARTx == USART2)
            NVIC_IRQ38_USART2_EN;
        else if (USARTx == USART3)
            NVIC_IRQ39_USART3_EN;
    }
}

void MCAL_UART_DeInit(USART_t *USARTx)
{
    if (USARTx == USART1)
    {
        RCC_USART1_Reset();
        NVIC_IRQ37_USART1_Disable;
    }
    else if (USARTx == USART2)
    {
        RCC_USART2_Reset();
        NVIC_IRQ38_USART2_Disable;
    }
    else if (USARTx == USART3)
    {
        RCC_USART3_Reset();
        NVIC_IRQ39_USART3_Disable;
    }
}

void MCAL_UART_SendData(USART_t *USARTx, uint16_t *pTxBuffer, Polling_mechanism PollingEn)
{
    if (PollingEn == enable)
        while (!(USARTx->SR & (1 << 7)));  // Wait for TXE = 1

    if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
    {
        // Send 9 bits (masking 9 bits)
        USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
    }
    else
    {
        // Send 8 bits (masking 8 bits)
        USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
    }
}

void MCAL_UART_WAIT_TC(USART_t *USARTx)
{
    // Wait until TC (Transmission Complete) flag is set (bit 6)
    while (!(USARTx->SR & (1 << 6)));
}

void MCAL_UART_ReceiveData(USART_t *USARTx, uint16_t *pRxBuffer, Polling_mechanism PollingEn)
{
    if (PollingEn == enable)
        while (!(USARTx->SR & (1 << 5)));  // Wait RXNE = 1

    if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
    {
        if (Global_UART_Config->Parity == UART_Parity_NONE)
        {
            // No parity, all 9 bits data
            *pRxBuffer = USARTx->DR;
        }
        else
        {
            // Parity used, only 8 bits data
            *pRxBuffer = (uint8_t)(USARTx->DR & 0xFF);
        }
    }
    else
    {
        if (Global_UART_Config->Parity == UART_Parity_NONE)
        {
            // No parity, 8 bits data
            *pRxBuffer = (uint8_t)(USARTx->DR & 0xFF);
        }
        else
        {
            // Parity used, 7 bits data
            *pRxBuffer = (uint8_t)(USARTx->DR & 0x7F);
        }
    }
}

void MCAL_UART_GPIO_Set_Pins(USART_t *USARTx)
{
    GPIO_Config_t PinCfg;

    if (USARTx == USART1)
    {
        // PA9 TX
        PinCfg.GPIO_PinNumber = GPIO_PIN_9;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // PA10 RX
        PinCfg.GPIO_PinNumber = GPIO_PIN_10;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // CTS (PA11)
        if (Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS || Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
        {
            PinCfg.GPIO_PinNumber = GPIO_PIN_11;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }

        // RTS (PA12)
        if (Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS || Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
        {
            PinCfg.GPIO_PinNumber = GPIO_PIN_12;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }
    }
    else if (USARTx == USART2)
    {
        // PA2 TX
        PinCfg.GPIO_PinNumber = GPIO_PIN_2;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // PA3 RX
        PinCfg.GPIO_PinNumber = GPIO_PIN_3;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
        MCAL_GPIO_Init(GPIOA, &PinCfg);

        // CTS (PA0)
        if (Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS || Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
        {
            PinCfg.GPIO_PinNumber = GPIO_PIN_0;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }

        // RTS (PA1)
        if (Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS || Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
        {
            PinCfg.GPIO_PinNumber = GPIO_PIN_1;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOA, &PinCfg);
        }
    }
    else if (USARTx == USART3)
    {
        // PB10 TX
        PinCfg.GPIO_PinNumber = GPIO_PIN_10;
        PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
        PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
        MCAL_GPIO_Init(GPIOB, &PinCfg);

        // PB11 RX
        PinCfg.GPIO_PinNumber = GPIO_PIN_11;
        PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
        MCAL_GPIO_Init(GPIOB, &PinCfg);

        // CTS (PB13)
        if (Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS || Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
        {
            PinCfg.GPIO_PinNumber = GPIO_PIN_13;
            PinCfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
            MCAL_GPIO_Init(GPIOB, &PinCfg);
        }

        // RTS (PB14)
        if (Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS || Global_UART_Config->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
        {
            PinCfg.GPIO_PinNumber = GPIO_PIN_14;
            PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
            PinCfg.GPIO_PinSpeed = GPIO_SPEED_10MHz;
            MCAL_GPIO_Init(GPIOB, &PinCfg);
        }
    }
}

// IRQ Handlers
void USART1_IRQHandler(void)
{
    Global_UART_Config->P_IRQ_CallBack();
}

void USART2_IRQHandler(void)
{
    Global_UART_Config->P_IRQ_CallBack();
}

void USART3_IRQHandler(void)
{
    Global_UART_Config->P_IRQ_CallBack();
}
