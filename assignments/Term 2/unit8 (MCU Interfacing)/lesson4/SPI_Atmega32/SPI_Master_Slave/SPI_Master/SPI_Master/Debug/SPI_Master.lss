
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017e  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013b  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005eb5  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  00006675  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000066b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000237  00000000  00000000  000066d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0c d0       	rcall	.+24     	; 0x7a <main>
  62:	1d c0       	rjmp	.+58     	; 0x9e <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <SPI_MasterInit>:
#define MISO	6
#define SCK		7

void SPI_MasterInit(void)
{
	DDRB = (1<<SS) | (1<<MOSI) | (1<<SCK);
  66:	80 eb       	ldi	r24, 0xB0	; 176
  68:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  6a:	81 e5       	ldi	r24, 0x51	; 81
  6c:	8d b9       	out	0x0d, r24	; 13
  6e:	08 95       	ret

00000070 <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(uint8_t cdata)
{
	SPDR = cdata;
  70:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  72:	77 9b       	sbis	0x0e, 7	; 14
  74:	fe cf       	rjmp	.-4      	; 0x72 <SPI_MasterTransmit+0x2>
	return SPDR;
  76:	8f b1       	in	r24, 0x0f	; 15
}
  78:	08 95       	ret

0000007a <main>:

int main(void)
{
	SPI_MasterInit();
  7a:	f5 df       	rcall	.-22     	; 0x66 <SPI_MasterInit>
	DDRA = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	uint8_t data = 0;
	for(data = 0 ; data <= 255 ; data++)
  80:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e3       	ldi	r18, 0x3F	; 63
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0xe>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x18>
  92:	00 00       	nop
	{
		_delay_ms(1000);
		PORTA = SPI_MasterTransmit(data);
  94:	8c 2f       	mov	r24, r28
  96:	ec df       	rcall	.-40     	; 0x70 <SPI_MasterTransmit>
  98:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
	SPI_MasterInit();
	DDRA = 0xFF;
	uint8_t data = 0;
	for(data = 0 ; data <= 255 ; data++)
  9a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		_delay_ms(1000);
		PORTA = SPI_MasterTransmit(data);
	}
  9c:	f2 cf       	rjmp	.-28     	; 0x82 <main+0x8>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
