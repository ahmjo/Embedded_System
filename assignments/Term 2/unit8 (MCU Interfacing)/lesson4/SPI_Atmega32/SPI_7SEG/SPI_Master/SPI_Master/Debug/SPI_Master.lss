
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001fd  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015e  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000363  00000000  00000000  0000051f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005eba  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  00006782  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000067d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000231  00000000  00000000  0000680e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	12 d0       	rcall	.+36     	; 0x86 <main>
  62:	35 c0       	rjmp	.+106    	; 0xce <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <SPI_MasterInit>:
#define MOSI	5
#define SCK		7

void SPI_MasterInit(void)
{
	DDRB |= (1<<MOSI) | (1<<SS) | (1<<SCK);
  66:	87 b3       	in	r24, 0x17	; 23
  68:	80 6b       	ori	r24, 0xB0	; 176
  6a:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<MSTR) | (1<<SPE) | (1<<SPR0);
  6c:	8d b1       	in	r24, 0x0d	; 13
  6e:	81 65       	ori	r24, 0x51	; 81
  70:	8d b9       	out	0x0d, r24	; 13
  72:	08 95       	ret

00000074 <Execute>:
}

void Execute(uint8_t COM, uint8_t data)
{
	PORTB &= ~(1<<SS);
  74:	c4 98       	cbi	0x18, 4	; 24
	
	SPDR = COM;
  76:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  78:	77 9b       	sbis	0x0e, 7	; 14
  7a:	fe cf       	rjmp	.-4      	; 0x78 <Execute+0x4>
	
	SPDR = data;
  7c:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
  7e:	77 9b       	sbis	0x0e, 7	; 14
  80:	fe cf       	rjmp	.-4      	; 0x7e <Execute+0xa>
	
	PORTB |= (1<<SS);
  82:	c4 9a       	sbi	0x18, 4	; 24
  84:	08 95       	ret

00000086 <main>:
}


int main(void)
{
	SPI_MasterInit();
  86:	ef df       	rcall	.-34     	; 0x66 <SPI_MasterInit>
	Execute(0x09, 0xFF);
  88:	6f ef       	ldi	r22, 0xFF	; 255
  8a:	89 e0       	ldi	r24, 0x09	; 9
  8c:	f3 df       	rcall	.-26     	; 0x74 <Execute>
	Execute(0x0A, 0xFF);
  8e:	6f ef       	ldi	r22, 0xFF	; 255
  90:	8a e0       	ldi	r24, 0x0A	; 10
  92:	f0 df       	rcall	.-32     	; 0x74 <Execute>
	Execute(0x0B, 0xF7);
  94:	67 ef       	ldi	r22, 0xF7	; 247
  96:	8b e0       	ldi	r24, 0x0B	; 11
  98:	ed df       	rcall	.-38     	; 0x74 <Execute>
	Execute(0x0C, 0x01);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	ea df       	rcall	.-44     	; 0x74 <Execute>
	
	uint8_t count = 0;
  a0:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		for(uint8_t iDisplay=1 ; iDisplay <9 ; iDisplay++)
  a2:	01 e0       	ldi	r16, 0x01	; 1
	Execute(0x09, 0xFF);
	Execute(0x0A, 0xFF);
	Execute(0x0B, 0xF7);
	Execute(0x0C, 0x01);
	
	uint8_t count = 0;
  a4:	61 2f       	mov	r22, r17
	while(1)
	{
		for(uint8_t iDisplay=1 ; iDisplay <9 ; iDisplay++)
  a6:	c0 2f       	mov	r28, r16
			Execute(iDisplay, count++);
  a8:	d1 e0       	ldi	r29, 0x01	; 1
  aa:	d6 0f       	add	r29, r22
  ac:	8c 2f       	mov	r24, r28
  ae:	e2 df       	rcall	.-60     	; 0x74 <Execute>
	Execute(0x0C, 0x01);
	
	uint8_t count = 0;
	while(1)
	{
		for(uint8_t iDisplay=1 ; iDisplay <9 ; iDisplay++)
  b0:	cf 5f       	subi	r28, 0xFF	; 255
			Execute(iDisplay, count++);
  b2:	6d 2f       	mov	r22, r29
	Execute(0x0C, 0x01);
	
	uint8_t count = 0;
	while(1)
	{
		for(uint8_t iDisplay=1 ; iDisplay <9 ; iDisplay++)
  b4:	c9 30       	cpi	r28, 0x09	; 9
  b6:	c1 f7       	brne	.-16     	; 0xa8 <main+0x22>
  b8:	18 5f       	subi	r17, 0xF8	; 248
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e3       	ldi	r18, 0x3F	; 63
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x3a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x44>
  ca:	00 00       	nop
  cc:	eb cf       	rjmp	.-42     	; 0xa4 <main+0x1e>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
